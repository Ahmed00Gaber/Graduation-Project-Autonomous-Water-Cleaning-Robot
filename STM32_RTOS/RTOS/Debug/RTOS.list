
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006308  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08006418  08006418  00016418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065b4  080065b4  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080065b4  080065b4  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080065b4  080065b4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065b4  080065b4  000165b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065b8  080065b8  000165b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080065bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ac0  20000084  08006640  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b44  08006640  00021b44  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b7f  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003398  00000000  00000000  00038c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  0003bfc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001470  00000000  00000000  0003d560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a91  00000000  00000000  0003e9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a18  00000000  00000000  00057461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092df6  00000000  00000000  0006de79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00100c6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bd4  00000000  00000000  00100cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000084 	.word	0x20000084
 800012c:	00000000 	.word	0x00000000
 8000130:	08006400 	.word	0x08006400

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000088 	.word	0x20000088
 800014c:	08006400 	.word	0x08006400

08000150 <CS_Select>:
#define NRF24_CSN_PIN  GPIO_PIN_4



void CS_Select (void)
{//bring to low to select
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000154:	2200      	movs	r2, #0
 8000156:	2110      	movs	r1, #16
 8000158:	4802      	ldr	r0, [pc, #8]	; (8000164 <CS_Select+0x14>)
 800015a:	f001 f9eb 	bl	8001534 <HAL_GPIO_WritePin>
}
 800015e:	bf00      	nop
 8000160:	bd80      	pop	{r7, pc}
 8000162:	bf00      	nop
 8000164:	40010800 	.word	0x40010800

08000168 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 800016c:	2201      	movs	r2, #1
 800016e:	2110      	movs	r1, #16
 8000170:	4802      	ldr	r0, [pc, #8]	; (800017c <CS_UnSelect+0x14>)
 8000172:	f001 f9df 	bl	8001534 <HAL_GPIO_WritePin>
}
 8000176:	bf00      	nop
 8000178:	bd80      	pop	{r7, pc}
 800017a:	bf00      	nop
 800017c:	40010800 	.word	0x40010800

08000180 <CE_Enable>:

//it control if we make it work or not
void CE_Enable (void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000184:	2201      	movs	r2, #1
 8000186:	2108      	movs	r1, #8
 8000188:	4802      	ldr	r0, [pc, #8]	; (8000194 <CE_Enable+0x14>)
 800018a:	f001 f9d3 	bl	8001534 <HAL_GPIO_WritePin>
}
 800018e:	bf00      	nop
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	40010800 	.word	0x40010800

08000198 <CE_Disable>:

void CE_Disable (void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 800019c:	2200      	movs	r2, #0
 800019e:	2108      	movs	r1, #8
 80001a0:	4802      	ldr	r0, [pc, #8]	; (80001ac <CE_Disable+0x14>)
 80001a2:	f001 f9c7 	bl	8001534 <HAL_GPIO_WritePin>
}
 80001a6:	bf00      	nop
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	40010800 	.word	0x40010800

080001b0 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b084      	sub	sp, #16
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	460a      	mov	r2, r1
 80001ba:	71fb      	strb	r3, [r7, #7]
 80001bc:	4613      	mov	r3, r2
 80001be:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5; //when writing to address 5th bit should be 1  0001AAA
 80001c0:	79fb      	ldrb	r3, [r7, #7]
 80001c2:	f043 0320 	orr.w	r3, r3, #32
 80001c6:	b2db      	uxtb	r3, r3
 80001c8:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 80001ca:	79bb      	ldrb	r3, [r7, #6]
 80001cc:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80001ce:	f7ff ffbf 	bl	8000150 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 80001d2:	f107 010c 	add.w	r1, r7, #12
 80001d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001da:	2202      	movs	r2, #2
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <nrf24_WriteReg+0x40>)
 80001de:	f001 fe9f 	bl	8001f20 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80001e2:	f7ff ffc1 	bl	8000168 <CS_UnSelect>
}
 80001e6:	bf00      	nop
 80001e8:	3710      	adds	r7, #16
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	200000c0 	.word	0x200000c0

080001f4 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b086      	sub	sp, #24
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	4603      	mov	r3, r0
 80001fc:	60b9      	str	r1, [r7, #8]
 80001fe:	607a      	str	r2, [r7, #4]
 8000200:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000202:	7bfb      	ldrb	r3, [r7, #15]
 8000204:	f043 0320 	orr.w	r3, r3, #32
 8000208:	b2db      	uxtb	r3, r3
 800020a:	753b      	strb	r3, [r7, #20]


	// Pull the CS Pin LOW to select the device
	CS_Select();
 800020c:	f7ff ffa0 	bl	8000150 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8000210:	f107 0114 	add.w	r1, r7, #20
 8000214:	2364      	movs	r3, #100	; 0x64
 8000216:	2201      	movs	r2, #1
 8000218:	4808      	ldr	r0, [pc, #32]	; (800023c <nrf24_WriteRegMulti+0x48>)
 800021a:	f001 fe81 	bl	8001f20 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	b29a      	uxth	r2, r3
 8000222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000226:	68b9      	ldr	r1, [r7, #8]
 8000228:	4804      	ldr	r0, [pc, #16]	; (800023c <nrf24_WriteRegMulti+0x48>)
 800022a:	f001 fe79 	bl	8001f20 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800022e:	f7ff ff9b 	bl	8000168 <CS_UnSelect>
}
 8000232:	bf00      	nop
 8000234:	3718      	adds	r7, #24
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	200000c0 	.word	0x200000c0

08000240 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
 8000246:	4603      	mov	r3, r0
 8000248:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 800024a:	2300      	movs	r3, #0
 800024c:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800024e:	f7ff ff7f 	bl	8000150 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);//give name of register you want to read from
 8000252:	1df9      	adds	r1, r7, #7
 8000254:	2364      	movs	r3, #100	; 0x64
 8000256:	2201      	movs	r2, #1
 8000258:	4808      	ldr	r0, [pc, #32]	; (800027c <nrf24_ReadReg+0x3c>)
 800025a:	f001 fe61 	bl	8001f20 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100); //store it in the data
 800025e:	f107 010f 	add.w	r1, r7, #15
 8000262:	2364      	movs	r3, #100	; 0x64
 8000264:	2201      	movs	r2, #1
 8000266:	4805      	ldr	r0, [pc, #20]	; (800027c <nrf24_ReadReg+0x3c>)
 8000268:	f001 ff9d 	bl	80021a6 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800026c:	f7ff ff7c 	bl	8000168 <CS_UnSelect>

	return data;
 8000270:	7bfb      	ldrb	r3, [r7, #15]
}
 8000272:	4618      	mov	r0, r3
 8000274:	3710      	adds	r7, #16
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	200000c0 	.word	0x200000c0

08000280 <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 800028a:	f7ff ff61 	bl	8000150 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 800028e:	1df9      	adds	r1, r7, #7
 8000290:	2364      	movs	r3, #100	; 0x64
 8000292:	2201      	movs	r2, #1
 8000294:	4804      	ldr	r0, [pc, #16]	; (80002a8 <nrfsendCmd+0x28>)
 8000296:	f001 fe43 	bl	8001f20 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800029a:	f7ff ff65 	bl	8000168 <CS_UnSelect>
}
 800029e:	bf00      	nop
 80002a0:	3708      	adds	r7, #8
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	200000c0 	.word	0x200000c0

080002ac <NRF24_Init>:


void NRF24_Init (void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80002b0:	f7ff ff72 	bl	8000198 <CE_Disable>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 80002b4:	2100      	movs	r1, #0
 80002b6:	2000      	movs	r0, #0
 80002b8:	f7ff ff7a 	bl	80001b0 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 80002bc:	2100      	movs	r1, #0
 80002be:	2001      	movs	r0, #1
 80002c0:	f7ff ff76 	bl	80001b0 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 80002c4:	2100      	movs	r1, #0
 80002c6:	2002      	movs	r0, #2
 80002c8:	f7ff ff72 	bl	80001b0 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address 0x03=11
 80002cc:	2103      	movs	r1, #3
 80002ce:	2003      	movs	r0, #3
 80002d0:	f7ff ff6e 	bl	80001b0 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 80002d4:	2100      	movs	r1, #0
 80002d6:	2004      	movs	r0, #4
 80002d8:	f7ff ff6a 	bl	80001b0 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 80002dc:	2100      	movs	r1, #0
 80002de:	2005      	movs	r0, #5
 80002e0:	f7ff ff66 	bl	80001b0 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 80002e4:	210e      	movs	r1, #14
 80002e6:	2006      	movs	r0, #6
 80002e8:	f7ff ff62 	bl	80001b0 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80002ec:	f7ff ff48 	bl	8000180 <CE_Enable>

}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <NRF24_RxMode>:

	return 0;
}

void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	460b      	mov	r3, r1
 80002fe:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 8000300:	f7ff ff4a 	bl	8000198 <CE_Disable>

	//nrf24_reset (STATUS);
	uint8_t test_channel=nrf24_ReadReg(RF_CH);
 8000304:	2005      	movs	r0, #5
 8000306:	f7ff ff9b 	bl	8000240 <nrf24_ReadReg>
 800030a:	4603      	mov	r3, r0
 800030c:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (RF_CH, channel);  // select the channel
 800030e:	78fb      	ldrb	r3, [r7, #3]
 8000310:	4619      	mov	r1, r3
 8000312:	2005      	movs	r0, #5
 8000314:	f7ff ff4c 	bl	80001b0 <nrf24_WriteReg>
	uint8_t test1_channel=nrf24_ReadReg(RF_CH);
 8000318:	2005      	movs	r0, #5
 800031a:	f7ff ff91 	bl	8000240 <nrf24_ReadReg>
 800031e:	4603      	mov	r3, r0
 8000320:	73bb      	strb	r3, [r7, #14]

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR); //read the datapipe first then modify the bit you want
 8000322:	2002      	movs	r0, #2
 8000324:	f7ff ff8c 	bl	8000240 <nrf24_ReadReg>
 8000328:	4603      	mov	r3, r0
 800032a:	737b      	strb	r3, [r7, #13]
	en_rxaddr = en_rxaddr | (1<<1);
 800032c:	7b7b      	ldrb	r3, [r7, #13]
 800032e:	f043 0302 	orr.w	r3, r3, #2
 8000332:	737b      	strb	r3, [r7, #13]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 8000334:	7b7b      	ldrb	r3, [r7, #13]
 8000336:	4619      	mov	r1, r3
 8000338:	2002      	movs	r0, #2
 800033a:	f7ff ff39 	bl	80001b0 <nrf24_WriteReg>
	uint8_t test1_en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 800033e:	2002      	movs	r0, #2
 8000340:	f7ff ff7e 	bl	8000240 <nrf24_ReadReg>
 8000344:	4603      	mov	r3, r0
 8000346:	733b      	strb	r3, [r7, #12]

	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 8000348:	2205      	movs	r2, #5
 800034a:	6879      	ldr	r1, [r7, #4]
 800034c:	200b      	movs	r0, #11
 800034e:	f7ff ff51 	bl	80001f4 <nrf24_WriteRegMulti>

	nrf24_WriteReg (RX_PW_P1, 2);   // 2 bytesize payload  for pipe 1
 8000352:	2102      	movs	r1, #2
 8000354:	2012      	movs	r0, #18
 8000356:	f7ff ff2b 	bl	80001b0 <nrf24_WriteReg>

	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 800035a:	2000      	movs	r0, #0
 800035c:	f7ff ff70 	bl	8000240 <nrf24_ReadReg>
 8000360:	4603      	mov	r3, r0
 8000362:	72fb      	strb	r3, [r7, #11]
	config = config | (1<<1) | (1<<0); //set bit 0 in RX
 8000364:	7afb      	ldrb	r3, [r7, #11]
 8000366:	f043 0303 	orr.w	r3, r3, #3
 800036a:	72fb      	strb	r3, [r7, #11]
	nrf24_WriteReg (CONFIG, config);
 800036c:	7afb      	ldrb	r3, [r7, #11]
 800036e:	4619      	mov	r1, r3
 8000370:	2000      	movs	r0, #0
 8000372:	f7ff ff1d 	bl	80001b0 <nrf24_WriteReg>
	uint8_t Test_config = nrf24_ReadReg(CONFIG);
 8000376:	2000      	movs	r0, #0
 8000378:	f7ff ff62 	bl	8000240 <nrf24_ReadReg>
 800037c:	4603      	mov	r3, r0
 800037e:	72bb      	strb	r3, [r7, #10]
	// Enable the chip after configuring the device
	CE_Enable();
 8000380:	f7ff fefe 	bl	8000180 <CE_Enable>
}
 8000384:	bf00      	nop
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}

0800038c <isDataAvailable>:


//check if data avilable at receiver or not
uint8_t isDataAvailable (int pipenum)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b084      	sub	sp, #16
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
	//first read status register
	uint8_t status = nrf24_ReadReg(STATUS);
 8000394:	2007      	movs	r0, #7
 8000396:	f7ff ff53 	bl	8000240 <nrf24_ReadReg>
 800039a:	4603      	mov	r3, r0
 800039c:	73fb      	strb	r3, [r7, #15]

	/*check 1: 6th bit INTR flag if data received
			2: 1th
	*/
	if ((status&(1<<6))&&(status&(pipenum<<1)))
 800039e:	7bfb      	ldrb	r3, [r7, #15]
 80003a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d00b      	beq.n	80003c0 <isDataAvailable+0x34>
 80003a8:	7bfa      	ldrb	r2, [r7, #15]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	005b      	lsls	r3, r3, #1
 80003ae:	4013      	ands	r3, r2
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d005      	beq.n	80003c0 <isDataAvailable+0x34>
	{
		//clear INTR flag of receiving
		nrf24_WriteReg(STATUS, (1<<6));
 80003b4:	2140      	movs	r1, #64	; 0x40
 80003b6:	2007      	movs	r0, #7
 80003b8:	f7ff fefa 	bl	80001b0 <nrf24_WriteReg>

		//data received succcefly
		return 1;
 80003bc:	2301      	movs	r3, #1
 80003be:	e000      	b.n	80003c2 <isDataAvailable+0x36>
	}

	return 0;
 80003c0:	2300      	movs	r3, #0
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	3710      	adds	r7, #16
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
	...

080003cc <NRF24_Receive>:

/*
 * @breif: receive data from data pipe receiver into our buffer
 */
void NRF24_Receive (uint8_t *data)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 80003d4:	2300      	movs	r3, #0
 80003d6:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 80003d8:	f7ff feba 	bl	8000150 <CS_Select>

	// payload command
	//inform NRF we want to receive data from data pipe
	cmdtosend = R_RX_PAYLOAD;
 80003dc:	2361      	movs	r3, #97	; 0x61
 80003de:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 80003e0:	f107 010f 	add.w	r1, r7, #15
 80003e4:	2364      	movs	r3, #100	; 0x64
 80003e6:	2201      	movs	r2, #1
 80003e8:	480c      	ldr	r0, [pc, #48]	; (800041c <NRF24_Receive+0x50>)
 80003ea:	f001 fd99 	bl	8001f20 <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 2, 1000); //2 bit data received
 80003ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003f2:	2202      	movs	r2, #2
 80003f4:	6879      	ldr	r1, [r7, #4]
 80003f6:	4809      	ldr	r0, [pc, #36]	; (800041c <NRF24_Receive+0x50>)
 80003f8:	f001 fed5 	bl	80021a6 <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 80003fc:	f7ff feb4 	bl	8000168 <CS_UnSelect>

	HAL_Delay(1);
 8000400:	2001      	movs	r0, #1
 8000402:	f000 fe17 	bl	8001034 <HAL_Delay>

	cmdtosend = FLUSH_RX; //once data received flush NRF fifo
 8000406:	23e2      	movs	r3, #226	; 0xe2
 8000408:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 800040a:	7bfb      	ldrb	r3, [r7, #15]
 800040c:	4618      	mov	r0, r3
 800040e:	f7ff ff37 	bl	8000280 <nrfsendCmd>
}
 8000412:	bf00      	nop
 8000414:	3710      	adds	r7, #16
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	200000c0 	.word	0x200000c0

08000420 <map>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8000420:	b480      	push	{r7}
 8000422:	b085      	sub	sp, #20
 8000424:	af00      	add	r7, sp, #0
 8000426:	60f8      	str	r0, [r7, #12]
 8000428:	60b9      	str	r1, [r7, #8]
 800042a:	607a      	str	r2, [r7, #4]
 800042c:	603b      	str	r3, [r7, #0]
 return (x - in_min) * (out_max - out_min + 1) / (in_max - in_min + 1) + out_min;
 800042e:	68fa      	ldr	r2, [r7, #12]
 8000430:	68bb      	ldr	r3, [r7, #8]
 8000432:	1ad3      	subs	r3, r2, r3
 8000434:	69b9      	ldr	r1, [r7, #24]
 8000436:	683a      	ldr	r2, [r7, #0]
 8000438:	1a8a      	subs	r2, r1, r2
 800043a:	3201      	adds	r2, #1
 800043c:	fb03 f202 	mul.w	r2, r3, r2
 8000440:	6879      	ldr	r1, [r7, #4]
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	1acb      	subs	r3, r1, r3
 8000446:	3301      	adds	r3, #1
 8000448:	fb92 f2f3 	sdiv	r2, r2, r3
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	4413      	add	r3, r2
 }
 8000450:	4618      	mov	r0, r3
 8000452:	3714      	adds	r7, #20
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr
	...

0800045c <adjustMotorSpeed>:
        return maxValue;
    } else {
        return value;
    }
}
void adjustMotorSpeed(uint32_t potValue, uint32_t joystickXValue) {
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af02      	add	r7, sp, #8
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	6039      	str	r1, [r7, #0]
	//move right
	if(joystickXValue> 2070)
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	f640 0216 	movw	r2, #2070	; 0x816
 800046c:	4293      	cmp	r3, r2
 800046e:	d929      	bls.n	80004c4 <adjustMotorSpeed+0x68>
	{
		Left_motor_speed= map(potValue, 0, 4096, 500, 950);
 8000470:	6878      	ldr	r0, [r7, #4]
 8000472:	f240 33b6 	movw	r3, #950	; 0x3b6
 8000476:	9300      	str	r3, [sp, #0]
 8000478:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800047c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000480:	2100      	movs	r1, #0
 8000482:	f7ff ffcd 	bl	8000420 <map>
 8000486:	4603      	mov	r3, r0
 8000488:	461a      	mov	r2, r3
 800048a:	4b3b      	ldr	r3, [pc, #236]	; (8000578 <adjustMotorSpeed+0x11c>)
 800048c:	601a      	str	r2, [r3, #0]
		Right_motor_speed=map(joystickXValue,2048,4096,650,500);
 800048e:	6838      	ldr	r0, [r7, #0]
 8000490:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000494:	9300      	str	r3, [sp, #0]
 8000496:	f240 238a 	movw	r3, #650	; 0x28a
 800049a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800049e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004a2:	f7ff ffbd 	bl	8000420 <map>
 80004a6:	4603      	mov	r3, r0
 80004a8:	461a      	mov	r2, r3
 80004aa:	4b34      	ldr	r3, [pc, #208]	; (800057c <adjustMotorSpeed+0x120>)
 80004ac:	601a      	str	r2, [r3, #0]
		//set speed
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, Left_motor_speed);
 80004ae:	4b34      	ldr	r3, [pc, #208]	; (8000580 <adjustMotorSpeed+0x124>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a31      	ldr	r2, [pc, #196]	; (8000578 <adjustMotorSpeed+0x11c>)
 80004b4:	6812      	ldr	r2, [r2, #0]
 80004b6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, Right_motor_speed);
 80004b8:	4b31      	ldr	r3, [pc, #196]	; (8000580 <adjustMotorSpeed+0x124>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a2f      	ldr	r2, [pc, #188]	; (800057c <adjustMotorSpeed+0x120>)
 80004be:	6812      	ldr	r2, [r2, #0]
 80004c0:	639a      	str	r2, [r3, #56]	; 0x38
		//set speed
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, Left_motor_speed);
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, Right_motor_speed);
	}

}
 80004c2:	e054      	b.n	800056e <adjustMotorSpeed+0x112>
	else if(joystickXValue< 2000)
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80004ca:	d228      	bcs.n	800051e <adjustMotorSpeed+0xc2>
		Right_motor_speed= map(potValue, 0, 4096, 500, 950);
 80004cc:	6878      	ldr	r0, [r7, #4]
 80004ce:	f240 33b6 	movw	r3, #950	; 0x3b6
 80004d2:	9300      	str	r3, [sp, #0]
 80004d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80004d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004dc:	2100      	movs	r1, #0
 80004de:	f7ff ff9f 	bl	8000420 <map>
 80004e2:	4603      	mov	r3, r0
 80004e4:	461a      	mov	r2, r3
 80004e6:	4b25      	ldr	r3, [pc, #148]	; (800057c <adjustMotorSpeed+0x120>)
 80004e8:	601a      	str	r2, [r3, #0]
		Left_motor_speed=map(joystickXValue,0,2048,500,650);
 80004ea:	6838      	ldr	r0, [r7, #0]
 80004ec:	f240 238a 	movw	r3, #650	; 0x28a
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80004f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80004fa:	2100      	movs	r1, #0
 80004fc:	f7ff ff90 	bl	8000420 <map>
 8000500:	4603      	mov	r3, r0
 8000502:	461a      	mov	r2, r3
 8000504:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <adjustMotorSpeed+0x11c>)
 8000506:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, Left_motor_speed);
 8000508:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <adjustMotorSpeed+0x124>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a1a      	ldr	r2, [pc, #104]	; (8000578 <adjustMotorSpeed+0x11c>)
 800050e:	6812      	ldr	r2, [r2, #0]
 8000510:	635a      	str	r2, [r3, #52]	; 0x34
	    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, Right_motor_speed);
 8000512:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <adjustMotorSpeed+0x124>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a19      	ldr	r2, [pc, #100]	; (800057c <adjustMotorSpeed+0x120>)
 8000518:	6812      	ldr	r2, [r2, #0]
 800051a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800051c:	e027      	b.n	800056e <adjustMotorSpeed+0x112>
		Right_motor_speed= map(potValue, 0, 4096, 500, 950);
 800051e:	6878      	ldr	r0, [r7, #4]
 8000520:	f240 33b6 	movw	r3, #950	; 0x3b6
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800052a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800052e:	2100      	movs	r1, #0
 8000530:	f7ff ff76 	bl	8000420 <map>
 8000534:	4603      	mov	r3, r0
 8000536:	461a      	mov	r2, r3
 8000538:	4b10      	ldr	r3, [pc, #64]	; (800057c <adjustMotorSpeed+0x120>)
 800053a:	601a      	str	r2, [r3, #0]
		Left_motor_speed=map(potValue, 0, 4096, 500, 950);
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f240 33b6 	movw	r3, #950	; 0x3b6
 8000542:	9300      	str	r3, [sp, #0]
 8000544:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000548:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800054c:	2100      	movs	r1, #0
 800054e:	f7ff ff67 	bl	8000420 <map>
 8000552:	4603      	mov	r3, r0
 8000554:	461a      	mov	r2, r3
 8000556:	4b08      	ldr	r3, [pc, #32]	; (8000578 <adjustMotorSpeed+0x11c>)
 8000558:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, Left_motor_speed);
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <adjustMotorSpeed+0x124>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a06      	ldr	r2, [pc, #24]	; (8000578 <adjustMotorSpeed+0x11c>)
 8000560:	6812      	ldr	r2, [r2, #0]
 8000562:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, Right_motor_speed);
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <adjustMotorSpeed+0x124>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a04      	ldr	r2, [pc, #16]	; (800057c <adjustMotorSpeed+0x120>)
 800056a:	6812      	ldr	r2, [r2, #0]
 800056c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	200000a4 	.word	0x200000a4
 800057c:	200000ac 	.word	0x200000ac
 8000580:	20000118 	.word	0x20000118

08000584 <camera_move_left_motor>:

/*
 * breif: Set motor speeds based on the direction of the error
 * breif::Object is to the left, move right motor
 */
void camera_move_left_motor(uint16_t speedAdjustment){
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, maxMotorSpeed - speedAdjustment); //right motor
 800058e:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <camera_move_left_motor+0x34>)
 8000590:	881b      	ldrh	r3, [r3, #0]
 8000592:	461a      	mov	r2, r3
 8000594:	88fb      	ldrh	r3, [r7, #6]
 8000596:	1ad2      	subs	r2, r2, r3
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <camera_move_left_motor+0x38>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, minMotorSpeed + speedAdjustment); // left motor
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <camera_move_left_motor+0x3c>)
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	461a      	mov	r2, r3
 80005a4:	88fb      	ldrh	r3, [r7, #6]
 80005a6:	441a      	add	r2, r3
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <camera_move_left_motor+0x38>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	639a      	str	r2, [r3, #56]	; 0x38
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr
 80005b8:	20000008 	.word	0x20000008
 80005bc:	20000118 	.word	0x20000118
 80005c0:	2000000a 	.word	0x2000000a

080005c4 <camera_move_right_motor>:

/*
 * breif: Object is to the left, move right motor
 */
void camera_move_right_motor(uint16_t speedAdjustment){
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, minMotorSpeed + speedAdjustment);
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <camera_move_right_motor+0x34>)
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	461a      	mov	r2, r3
 80005d4:	88fb      	ldrh	r3, [r7, #6]
 80005d6:	441a      	add	r2, r3
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <camera_move_right_motor+0x38>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, maxMotorSpeed - speedAdjustment);
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <camera_move_right_motor+0x3c>)
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	461a      	mov	r2, r3
 80005e4:	88fb      	ldrh	r3, [r7, #6]
 80005e6:	1ad2      	subs	r2, r2, r3
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <camera_move_right_motor+0x38>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	639a      	str	r2, [r3, #56]	; 0x38
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr
 80005f8:	2000000a 	.word	0x2000000a
 80005fc:	20000118 	.word	0x20000118
 8000600:	20000008 	.word	0x20000008

08000604 <SetMotorSpeed>:

//new functions

void SetMotorSpeed(uint16_t speed)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <SetMotorSpeed+0x24>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	88fa      	ldrh	r2, [r7, #6]
 8000614:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
 8000616:	4b04      	ldr	r3, [pc, #16]	; (8000628 <SetMotorSpeed+0x24>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	88fa      	ldrh	r2, [r7, #6]
 800061c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	20000118 	.word	0x20000118

0800062c <CalculateSpeedAdjustment>:

uint16_t CalculateSpeedAdjustment(uint16_t error)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	80fb      	strh	r3, [r7, #6]
  if(abs(error) > someThreshold)
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <CalculateSpeedAdjustment+0x58>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	b29b      	uxth	r3, r3
 800063c:	88fa      	ldrh	r2, [r7, #6]
 800063e:	429a      	cmp	r2, r3
 8000640:	d919      	bls.n	8000676 <CalculateSpeedAdjustment+0x4a>
  {
    uint16_t adjustment = (maxMotorSpeed - minMotorSpeed) * abs(error) / someMaxError;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <CalculateSpeedAdjustment+0x5c>)
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	461a      	mov	r2, r3
 8000648:	4b10      	ldr	r3, [pc, #64]	; (800068c <CalculateSpeedAdjustment+0x60>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	88fa      	ldrh	r2, [r7, #6]
 8000650:	fb02 f303 	mul.w	r3, r2, r3
 8000654:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <CalculateSpeedAdjustment+0x64>)
 8000656:	7812      	ldrb	r2, [r2, #0]
 8000658:	fb93 f3f2 	sdiv	r3, r3, r2
 800065c:	81fb      	strh	r3, [r7, #14]
    return (adjustment > (maxMotorSpeed - minMotorSpeed)) ? (maxMotorSpeed - minMotorSpeed) : adjustment;
 800065e:	89fa      	ldrh	r2, [r7, #14]
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <CalculateSpeedAdjustment+0x5c>)
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	4619      	mov	r1, r3
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <CalculateSpeedAdjustment+0x60>)
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	1acb      	subs	r3, r1, r3
 800066c:	4293      	cmp	r3, r2
 800066e:	bfa8      	it	ge
 8000670:	4613      	movge	r3, r2
 8000672:	b29b      	uxth	r3, r3
 8000674:	e000      	b.n	8000678 <CalculateSpeedAdjustment+0x4c>
  }
  else
  {
    return 0;
 8000676:	2300      	movs	r3, #0
  }
}
 8000678:	4618      	mov	r0, r3
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	2000000c 	.word	0x2000000c
 8000688:	20000008 	.word	0x20000008
 800068c:	2000000a 	.word	0x2000000a
 8000690:	2000000d 	.word	0x2000000d

08000694 <AdjustMotorSpeedBasedOnError>:
void AdjustMotorSpeedBasedOnError(int16_t error)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	80fb      	strh	r3, [r7, #6]
  uint16_t speedAdjustment = CalculateSpeedAdjustment(error);
 800069e:	88fb      	ldrh	r3, [r7, #6]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ffc3 	bl	800062c <CalculateSpeedAdjustment>
 80006a6:	4603      	mov	r3, r0
 80006a8:	81fb      	strh	r3, [r7, #14]

  if(error > 0)
 80006aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	dd04      	ble.n	80006bc <AdjustMotorSpeedBasedOnError+0x28>
  {
    // Object is to the right, adjust left motor
    // Assuming camera_move_left_motor adjusts the motor speed
    camera_move_left_motor(speedAdjustment);
 80006b2:	89fb      	ldrh	r3, [r7, #14]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ff65 	bl	8000584 <camera_move_left_motor>
  else
  {
    // Object is centered, set default speed
    SetMotorSpeed(550);
  }
}
 80006ba:	e00c      	b.n	80006d6 <AdjustMotorSpeedBasedOnError+0x42>
  else if(error < 0)
 80006bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	da04      	bge.n	80006ce <AdjustMotorSpeedBasedOnError+0x3a>
    camera_move_right_motor(speedAdjustment);
 80006c4:	89fb      	ldrh	r3, [r7, #14]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ff7c 	bl	80005c4 <camera_move_right_motor>
}
 80006cc:	e003      	b.n	80006d6 <AdjustMotorSpeedBasedOnError+0x42>
    SetMotorSpeed(550);
 80006ce:	f240 2026 	movw	r0, #550	; 0x226
 80006d2:	f7ff ff97 	bl	8000604 <SetMotorSpeed>
}
 80006d6:	bf00      	nop
 80006d8:	3710      	adds	r7, #16
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e4:	f000 fc74 	bl	8000fd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e8:	f000 f858 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ec:	f000 f95e 	bl	80009ac <MX_GPIO_Init>
  MX_SPI1_Init();
 80006f0:	f000 f898 	bl	8000824 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80006f4:	f000 f930 	bl	8000958 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80006f8:	f000 f8ca 	bl	8000890 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //NRF intialization
    NRF24_Init();//init NRF
 80006fc:	f7ff fdd6 	bl	80002ac <NRF24_Init>
    NRF24_RxMode(NRF_RxAddress, 10); //NRF RX mode
 8000700:	210a      	movs	r1, #10
 8000702:	481e      	ldr	r0, [pc, #120]	; (800077c <main+0x9c>)
 8000704:	f7ff fdf6 	bl	80002f4 <NRF24_RxMode>

    //Timer Intilallization
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //start PWM timer
 8000708:	2100      	movs	r1, #0
 800070a:	481d      	ldr	r0, [pc, #116]	; (8000780 <main+0xa0>)
 800070c:	f002 fa00 	bl	8002b10 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //start PWM timer
 8000710:	2104      	movs	r1, #4
 8000712:	481b      	ldr	r0, [pc, #108]	; (8000780 <main+0xa0>)
 8000714:	f002 f9fc 	bl	8002b10 <HAL_TIM_PWM_Start>

    //Calibration for Beeb of motos
  #if calibrate
  	TIM2->CCR1 =1000; //set max pulse (2ms)
 8000718:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800071c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000720:	635a      	str	r2, [r3, #52]	; 0x34
  	TIM2->CCR2 =1000;
 8000722:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000726:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800072a:	639a      	str	r2, [r3, #56]	; 0x38
  	HAL_Delay(2000);  //wait for 1 beeb
 800072c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000730:	f000 fc80 	bl	8001034 <HAL_Delay>
  	TIM2->CCR1 =500; //set min pulse (1ms)
 8000734:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000738:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800073c:	635a      	str	r2, [r3, #52]	; 0x34
  	TIM2->CCR2 =500;
 800073e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000742:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000746:	639a      	str	r2, [r3, #56]	; 0x38
  	HAL_Delay(1000);  //wait for 2 beeb
 8000748:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800074c:	f000 fc72 	bl	8001034 <HAL_Delay>

  #endif
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000750:	f003 f8b4 	bl	80038bc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_1 */
  Task_1Handle = osThreadNew(Task_one, NULL, &Task_1_attributes); //UART
 8000754:	4a0b      	ldr	r2, [pc, #44]	; (8000784 <main+0xa4>)
 8000756:	2100      	movs	r1, #0
 8000758:	480b      	ldr	r0, [pc, #44]	; (8000788 <main+0xa8>)
 800075a:	f003 f915 	bl	8003988 <osThreadNew>
 800075e:	4603      	mov	r3, r0
 8000760:	4a0a      	ldr	r2, [pc, #40]	; (800078c <main+0xac>)
 8000762:	6013      	str	r3, [r2, #0]

  /* creation of Task_2 */
  Task_2Handle = osThreadNew(Task_Two, NULL, &Task_2_attributes); //NRF
 8000764:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <main+0xb0>)
 8000766:	2100      	movs	r1, #0
 8000768:	480a      	ldr	r0, [pc, #40]	; (8000794 <main+0xb4>)
 800076a:	f003 f90d 	bl	8003988 <osThreadNew>
 800076e:	4603      	mov	r3, r0
 8000770:	4a09      	ldr	r2, [pc, #36]	; (8000798 <main+0xb8>)
 8000772:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000774:	f003 f8d4 	bl	8003920 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000778:	e7fe      	b.n	8000778 <main+0x98>
 800077a:	bf00      	nop
 800077c:	20000000 	.word	0x20000000
 8000780:	20000118 	.word	0x20000118
 8000784:	08006440 	.word	0x08006440
 8000788:	08000a6d 	.word	0x08000a6d
 800078c:	200001a8 	.word	0x200001a8
 8000790:	08006464 	.word	0x08006464
 8000794:	08000b2d 	.word	0x08000b2d
 8000798:	200001ac 	.word	0x200001ac

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b090      	sub	sp, #64	; 0x40
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0318 	add.w	r3, r7, #24
 80007a6:	2228      	movs	r2, #40	; 0x28
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f005 fd9a 	bl	80062e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007be:	2301      	movs	r3, #1
 80007c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007cc:	2301      	movs	r3, #1
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d0:	2302      	movs	r3, #2
 80007d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80007da:	2300      	movs	r3, #0
 80007dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f107 0318 	add.w	r3, r7, #24
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 fed8 	bl	8001598 <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80007ee:	f000 f9f0 	bl	8000bd2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f2:	230f      	movs	r3, #15
 80007f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f6:	2302      	movs	r3, #2
 80007f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80007fa:	2380      	movs	r3, #128	; 0x80
 80007fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f001 f946 	bl	8001a9c <HAL_RCC_ClockConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000816:	f000 f9dc 	bl	8000bd2 <Error_Handler>
  }
}
 800081a:	bf00      	nop
 800081c:	3740      	adds	r7, #64	; 0x40
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000828:	4b17      	ldr	r3, [pc, #92]	; (8000888 <MX_SPI1_Init+0x64>)
 800082a:	4a18      	ldr	r2, [pc, #96]	; (800088c <MX_SPI1_Init+0x68>)
 800082c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800082e:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MX_SPI1_Init+0x64>)
 8000830:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000834:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000836:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_SPI1_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_SPI1_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_SPI1_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_SPI1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_SPI1_Init+0x64>)
 8000850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000854:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_SPI1_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MX_SPI1_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_SPI1_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <MX_SPI1_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_SPI1_Init+0x64>)
 8000870:	220a      	movs	r2, #10
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_SPI1_Init+0x64>)
 8000876:	f001 facf 	bl	8001e18 <HAL_SPI_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000880:	f000 f9a7 	bl	8000bd2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200000c0 	.word	0x200000c0
 800088c:	40013000 	.word	0x40013000

08000890 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	; 0x28
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000896:	f107 0320 	add.w	r3, r7, #32
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]
 80008ae:	615a      	str	r2, [r3, #20]
 80008b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008b2:	4b27      	ldr	r3, [pc, #156]	; (8000950 <MX_TIM3_Init+0xc0>)
 80008b4:	4a27      	ldr	r2, [pc, #156]	; (8000954 <MX_TIM3_Init+0xc4>)
 80008b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 80008b8:	4b25      	ldr	r3, [pc, #148]	; (8000950 <MX_TIM3_Init+0xc0>)
 80008ba:	220f      	movs	r2, #15
 80008bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008be:	4b24      	ldr	r3, [pc, #144]	; (8000950 <MX_TIM3_Init+0xc0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80008c4:	4b22      	ldr	r3, [pc, #136]	; (8000950 <MX_TIM3_Init+0xc0>)
 80008c6:	f242 720f 	movw	r2, #9999	; 0x270f
 80008ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008cc:	4b20      	ldr	r3, [pc, #128]	; (8000950 <MX_TIM3_Init+0xc0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d2:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <MX_TIM3_Init+0xc0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008d8:	481d      	ldr	r0, [pc, #116]	; (8000950 <MX_TIM3_Init+0xc0>)
 80008da:	f002 f8c9 	bl	8002a70 <HAL_TIM_PWM_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80008e4:	f000 f975 	bl	8000bd2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008f0:	f107 0320 	add.w	r3, r7, #32
 80008f4:	4619      	mov	r1, r3
 80008f6:	4816      	ldr	r0, [pc, #88]	; (8000950 <MX_TIM3_Init+0xc0>)
 80008f8:	f002 fd98 	bl	800342c <HAL_TIMEx_MasterConfigSynchronization>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000902:	f000 f966 	bl	8000bd2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000906:	2360      	movs	r3, #96	; 0x60
 8000908:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2200      	movs	r2, #0
 800091a:	4619      	mov	r1, r3
 800091c:	480c      	ldr	r0, [pc, #48]	; (8000950 <MX_TIM3_Init+0xc0>)
 800091e:	f002 fa9b 	bl	8002e58 <HAL_TIM_PWM_ConfigChannel>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000928:	f000 f953 	bl	8000bd2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2204      	movs	r2, #4
 8000930:	4619      	mov	r1, r3
 8000932:	4807      	ldr	r0, [pc, #28]	; (8000950 <MX_TIM3_Init+0xc0>)
 8000934:	f002 fa90 	bl	8002e58 <HAL_TIM_PWM_ConfigChannel>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800093e:	f000 f948 	bl	8000bd2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000942:	4803      	ldr	r0, [pc, #12]	; (8000950 <MX_TIM3_Init+0xc0>)
 8000944:	f000 f9ea 	bl	8000d1c <HAL_TIM_MspPostInit>

}
 8000948:	bf00      	nop
 800094a:	3728      	adds	r7, #40	; 0x28
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000118 	.word	0x20000118
 8000954:	40000400 	.word	0x40000400

08000958 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 800095e:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <MX_USART1_UART_Init+0x50>)
 8000960:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000964:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000968:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 800097e:	220c      	movs	r2, #12
 8000980:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000990:	f002 fdb6 	bl	8003500 <HAL_UART_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800099a:	f000 f91a 	bl	8000bd2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000160 	.word	0x20000160
 80009a8:	40013800 	.word	0x40013800

080009ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	f107 0310 	add.w	r3, r7, #16
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c0:	4b27      	ldr	r3, [pc, #156]	; (8000a60 <MX_GPIO_Init+0xb4>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	4a26      	ldr	r2, [pc, #152]	; (8000a60 <MX_GPIO_Init+0xb4>)
 80009c6:	f043 0320 	orr.w	r3, r3, #32
 80009ca:	6193      	str	r3, [r2, #24]
 80009cc:	4b24      	ldr	r3, [pc, #144]	; (8000a60 <MX_GPIO_Init+0xb4>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	f003 0320 	and.w	r3, r3, #32
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d8:	4b21      	ldr	r3, [pc, #132]	; (8000a60 <MX_GPIO_Init+0xb4>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a20      	ldr	r2, [pc, #128]	; (8000a60 <MX_GPIO_Init+0xb4>)
 80009de:	f043 0304 	orr.w	r3, r3, #4
 80009e2:	6193      	str	r3, [r2, #24]
 80009e4:	4b1e      	ldr	r3, [pc, #120]	; (8000a60 <MX_GPIO_Init+0xb4>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f003 0304 	and.w	r3, r3, #4
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f0:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <MX_GPIO_Init+0xb4>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	4a1a      	ldr	r2, [pc, #104]	; (8000a60 <MX_GPIO_Init+0xb4>)
 80009f6:	f043 0308 	orr.w	r3, r3, #8
 80009fa:	6193      	str	r3, [r2, #24]
 80009fc:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <MX_GPIO_Init+0xb4>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	f003 0308 	and.w	r3, r3, #8
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2118      	movs	r1, #24
 8000a0c:	4815      	ldr	r0, [pc, #84]	; (8000a64 <MX_GPIO_Init+0xb8>)
 8000a0e:	f000 fd91 	bl	8001534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000a18:	4813      	ldr	r0, [pc, #76]	; (8000a68 <MX_GPIO_Init+0xbc>)
 8000a1a:	f000 fd8b 	bl	8001534 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000a1e:	2318      	movs	r3, #24
 8000a20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	f107 0310 	add.w	r3, r7, #16
 8000a32:	4619      	mov	r1, r3
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <MX_GPIO_Init+0xb8>)
 8000a36:	f000 fc01 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000a3a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000a3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	4619      	mov	r1, r3
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_GPIO_Init+0xbc>)
 8000a54:	f000 fbf2 	bl	800123c <HAL_GPIO_Init>

}
 8000a58:	bf00      	nop
 8000a5a:	3720      	adds	r7, #32
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40021000 	.word	0x40021000
 8000a64:	40010800 	.word	0x40010800
 8000a68:	40010c00 	.word	0x40010c00

08000a6c <Task_one>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_one */
void Task_one(void *argument)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	for(;;)
	  {
		HAL_StatusTypeDef status = HAL_UART_Receive(&huart1, &receivedByte, 1, HAL_MAX_DELAY);
 8000a74:	f04f 33ff 	mov.w	r3, #4294967295
 8000a78:	2201      	movs	r2, #1
 8000a7a:	4925      	ldr	r1, [pc, #148]	; (8000b10 <Task_one+0xa4>)
 8000a7c:	4825      	ldr	r0, [pc, #148]	; (8000b14 <Task_one+0xa8>)
 8000a7e:	f002 fd8f 	bl	80035a0 <HAL_UART_Receive>
 8000a82:	4603      	mov	r3, r0
 8000a84:	73fb      	strb	r3, [r7, #15]

		    if (status == HAL_OK)
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d13d      	bne.n	8000b08 <Task_one+0x9c>
		    {
		      // Toggle LED on receiving data for visual indication
		      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000a8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a90:	4821      	ldr	r0, [pc, #132]	; (8000b18 <Task_one+0xac>)
 8000a92:	f000 fd67 	bl	8001564 <HAL_GPIO_TogglePin>

		      // Check if end of line or buffer is about to overflow
		      if (receivedByte == '\n' || bufferIndex >= sizeof(rxBuffer) - 1)
 8000a96:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <Task_one+0xa4>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b0a      	cmp	r3, #10
 8000a9c:	d003      	beq.n	8000aa6 <Task_one+0x3a>
 8000a9e:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <Task_one+0xb0>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d925      	bls.n	8000af2 <Task_one+0x86>
		      {
		        // Null-terminate the received data
		        rxBuffer[bufferIndex] = '\0';
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <Task_one+0xb0>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <Task_one+0xb4>)
 8000aae:	2100      	movs	r1, #0
 8000ab0:	5499      	strb	r1, [r3, r2]
		        receivedNumber = atoi((char *)rxBuffer);
 8000ab2:	481b      	ldr	r0, [pc, #108]	; (8000b20 <Task_one+0xb4>)
 8000ab4:	f005 fbda 	bl	800626c <atoi>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	4a1a      	ldr	r2, [pc, #104]	; (8000b24 <Task_one+0xb8>)
 8000abc:	6013      	str	r3, [r2, #0]
		        int16_t error = receivedNumber - centerValue;
 8000abe:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <Task_one+0xb8>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <Task_one+0xbc>)
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	81bb      	strh	r3, [r7, #12]

		        // Handle special command
		        if(receivedNumber == 1)
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <Task_one+0xb8>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d104      	bne.n	8000ae0 <Task_one+0x74>
		        {
		          SetMotorSpeed(550); // Set both motors to speed 550
 8000ad6:	f240 2026 	movw	r0, #550	; 0x226
 8000ada:	f7ff fd93 	bl	8000604 <SetMotorSpeed>
 8000ade:	e004      	b.n	8000aea <Task_one+0x7e>
		        }
		        else
		        {
		          AdjustMotorSpeedBasedOnError(error);
 8000ae0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fdd5 	bl	8000694 <AdjustMotorSpeedBasedOnError>
		        }

		        bufferIndex = 0; // Reset the buffer index for next message
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <Task_one+0xb0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	701a      	strb	r2, [r3, #0]
		      {
 8000af0:	e00a      	b.n	8000b08 <Task_one+0x9c>
		      }
		      else
		      {
		        // Store received byte and increment buffer index
		        rxBuffer[bufferIndex++] = receivedByte;
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <Task_one+0xb0>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	1c5a      	adds	r2, r3, #1
 8000af8:	b2d1      	uxtb	r1, r2
 8000afa:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <Task_one+0xb0>)
 8000afc:	7011      	strb	r1, [r2, #0]
 8000afe:	461a      	mov	r2, r3
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <Task_one+0xa4>)
 8000b02:	7819      	ldrb	r1, [r3, #0]
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <Task_one+0xb4>)
 8000b06:	5499      	strb	r1, [r3, r2]
		      }
		    }

		osDelay(20);
 8000b08:	2014      	movs	r0, #20
 8000b0a:	f002 ffe7 	bl	8003adc <osDelay>
	  {
 8000b0e:	e7b1      	b.n	8000a74 <Task_one+0x8>
 8000b10:	200000b9 	.word	0x200000b9
 8000b14:	20000160 	.word	0x20000160
 8000b18:	40010c00 	.word	0x40010c00
 8000b1c:	200000b8 	.word	0x200000b8
 8000b20:	200000b4 	.word	0x200000b4
 8000b24:	200000bc 	.word	0x200000bc
 8000b28:	20000006 	.word	0x20000006

08000b2c <Task_Two>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Two */
void Task_Two(void *argument)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af02      	add	r7, sp, #8
 8000b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Two */
  /* Infinite loop */
	for(;;)
	  {
		  //Remote controll code
		  if(isDataAvailable(1) == 1 )
 8000b34:	2001      	movs	r0, #1
 8000b36:	f7ff fc29 	bl	800038c <isDataAvailable>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d12d      	bne.n	8000b9c <Task_Two+0x70>
		  {
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8000b40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b44:	4817      	ldr	r0, [pc, #92]	; (8000ba4 <Task_Two+0x78>)
 8000b46:	f000 fd0d 	bl	8001564 <HAL_GPIO_TogglePin>
			  NRF24_Receive(NRF_RxData);
 8000b4a:	4817      	ldr	r0, [pc, #92]	; (8000ba8 <Task_Two+0x7c>)
 8000b4c:	f7ff fc3e 	bl	80003cc <NRF24_Receive>
			  ADC_Read_speed = map(NRF_RxData[0],0,255,0,4096);
 8000b50:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <Task_Two+0x7c>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	22ff      	movs	r2, #255	; 0xff
 8000b60:	2100      	movs	r1, #0
 8000b62:	f7ff fc5d 	bl	8000420 <map>
 8000b66:	4603      	mov	r3, r0
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <Task_Two+0x80>)
 8000b6c:	601a      	str	r2, [r3, #0]
			  ADC_Read_Direction = map(NRF_RxData[1],0,255,0,4096);
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <Task_Two+0x7c>)
 8000b70:	785b      	ldrb	r3, [r3, #1]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	22ff      	movs	r2, #255	; 0xff
 8000b7e:	2100      	movs	r1, #0
 8000b80:	f7ff fc4e 	bl	8000420 <map>
 8000b84:	4603      	mov	r3, r0
 8000b86:	461a      	mov	r2, r3
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <Task_Two+0x84>)
 8000b8a:	601a      	str	r2, [r3, #0]
			  adjustMotorSpeed(ADC_Read_speed,ADC_Read_Direction);
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <Task_Two+0x80>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <Task_Two+0x84>)
 8000b92:	6812      	ldr	r2, [r2, #0]
 8000b94:	4611      	mov	r1, r2
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fc60 	bl	800045c <adjustMotorSpeed>
		  }
		  osDelay(5);
 8000b9c:	2005      	movs	r0, #5
 8000b9e:	f002 ff9d 	bl	8003adc <osDelay>
		  if(isDataAvailable(1) == 1 )
 8000ba2:	e7c7      	b.n	8000b34 <Task_Two+0x8>
 8000ba4:	40010c00 	.word	0x40010c00
 8000ba8:	200000b0 	.word	0x200000b0
 8000bac:	200000a0 	.word	0x200000a0
 8000bb0:	200000a8 	.word	0x200000a8

08000bb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bc4:	d101      	bne.n	8000bca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bc6:	f000 fa19 	bl	8000ffc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd6:	b672      	cpsid	i
}
 8000bd8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bda:	e7fe      	b.n	8000bda <Error_Handler+0x8>

08000bdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000be2:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <HAL_MspInit+0x68>)
 8000be4:	699b      	ldr	r3, [r3, #24]
 8000be6:	4a17      	ldr	r2, [pc, #92]	; (8000c44 <HAL_MspInit+0x68>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6193      	str	r3, [r2, #24]
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <HAL_MspInit+0x68>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfa:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_MspInit+0x68>)
 8000bfc:	69db      	ldr	r3, [r3, #28]
 8000bfe:	4a11      	ldr	r2, [pc, #68]	; (8000c44 <HAL_MspInit+0x68>)
 8000c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c04:	61d3      	str	r3, [r2, #28]
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <HAL_MspInit+0x68>)
 8000c08:	69db      	ldr	r3, [r3, #28]
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	210f      	movs	r1, #15
 8000c16:	f06f 0001 	mvn.w	r0, #1
 8000c1a:	f000 fae4 	bl	80011e6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <HAL_MspInit+0x6c>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <HAL_MspInit+0x6c>)
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40010000 	.word	0x40010000

08000c4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0310 	add.w	r3, r7, #16
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a1b      	ldr	r2, [pc, #108]	; (8000cd4 <HAL_SPI_MspInit+0x88>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d12f      	bne.n	8000ccc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c6c:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <HAL_SPI_MspInit+0x8c>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	4a19      	ldr	r2, [pc, #100]	; (8000cd8 <HAL_SPI_MspInit+0x8c>)
 8000c72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c76:	6193      	str	r3, [r2, #24]
 8000c78:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <HAL_SPI_MspInit+0x8c>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <HAL_SPI_MspInit+0x8c>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4a13      	ldr	r2, [pc, #76]	; (8000cd8 <HAL_SPI_MspInit+0x8c>)
 8000c8a:	f043 0304 	orr.w	r3, r3, #4
 8000c8e:	6193      	str	r3, [r2, #24]
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <HAL_SPI_MspInit+0x8c>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c9c:	23a0      	movs	r3, #160	; 0xa0
 8000c9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	4619      	mov	r1, r3
 8000cae:	480b      	ldr	r0, [pc, #44]	; (8000cdc <HAL_SPI_MspInit+0x90>)
 8000cb0:	f000 fac4 	bl	800123c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cb4:	2340      	movs	r3, #64	; 0x40
 8000cb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc0:	f107 0310 	add.w	r3, r7, #16
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4805      	ldr	r0, [pc, #20]	; (8000cdc <HAL_SPI_MspInit+0x90>)
 8000cc8:	f000 fab8 	bl	800123c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ccc:	bf00      	nop
 8000cce:	3720      	adds	r7, #32
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40013000 	.word	0x40013000
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40010800 	.word	0x40010800

08000ce0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a09      	ldr	r2, [pc, #36]	; (8000d14 <HAL_TIM_PWM_MspInit+0x34>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d10b      	bne.n	8000d0a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <HAL_TIM_PWM_MspInit+0x38>)
 8000cf4:	69db      	ldr	r3, [r3, #28]
 8000cf6:	4a08      	ldr	r2, [pc, #32]	; (8000d18 <HAL_TIM_PWM_MspInit+0x38>)
 8000cf8:	f043 0302 	orr.w	r3, r3, #2
 8000cfc:	61d3      	str	r3, [r2, #28]
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_TIM_PWM_MspInit+0x38>)
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d0a:	bf00      	nop
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	40000400 	.word	0x40000400
 8000d18:	40021000 	.word	0x40021000

08000d1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a18      	ldr	r2, [pc, #96]	; (8000d98 <HAL_TIM_MspPostInit+0x7c>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d129      	bne.n	8000d90 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <HAL_TIM_MspPostInit+0x80>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a16      	ldr	r2, [pc, #88]	; (8000d9c <HAL_TIM_MspPostInit+0x80>)
 8000d42:	f043 0308 	orr.w	r3, r3, #8
 8000d46:	6193      	str	r3, [r2, #24]
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <HAL_TIM_MspPostInit+0x80>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f003 0308 	and.w	r3, r3, #8
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d54:	2330      	movs	r3, #48	; 0x30
 8000d56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	4619      	mov	r1, r3
 8000d66:	480e      	ldr	r0, [pc, #56]	; (8000da0 <HAL_TIM_MspPostInit+0x84>)
 8000d68:	f000 fa68 	bl	800123c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <HAL_TIM_MspPostInit+0x88>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	61fb      	str	r3, [r7, #28]
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000d78:	61fb      	str	r3, [r7, #28]
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d80:	61fb      	str	r3, [r7, #28]
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d88:	61fb      	str	r3, [r7, #28]
 8000d8a:	4a06      	ldr	r2, [pc, #24]	; (8000da4 <HAL_TIM_MspPostInit+0x88>)
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d90:	bf00      	nop
 8000d92:	3720      	adds	r7, #32
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40000400 	.word	0x40000400
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40010c00 	.word	0x40010c00
 8000da4:	40010000 	.word	0x40010000

08000da8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0310 	add.w	r3, r7, #16
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a1c      	ldr	r2, [pc, #112]	; (8000e34 <HAL_UART_MspInit+0x8c>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d131      	bne.n	8000e2c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <HAL_UART_MspInit+0x90>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	4a1a      	ldr	r2, [pc, #104]	; (8000e38 <HAL_UART_MspInit+0x90>)
 8000dce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd2:	6193      	str	r3, [r2, #24]
 8000dd4:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <HAL_UART_MspInit+0x90>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de0:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <HAL_UART_MspInit+0x90>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <HAL_UART_MspInit+0x90>)
 8000de6:	f043 0304 	orr.w	r3, r3, #4
 8000dea:	6193      	str	r3, [r2, #24]
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <HAL_UART_MspInit+0x90>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	f003 0304 	and.w	r3, r3, #4
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000df8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dfc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e02:	2303      	movs	r3, #3
 8000e04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480b      	ldr	r0, [pc, #44]	; (8000e3c <HAL_UART_MspInit+0x94>)
 8000e0e:	f000 fa15 	bl	800123c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	f107 0310 	add.w	r3, r7, #16
 8000e24:	4619      	mov	r1, r3
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <HAL_UART_MspInit+0x94>)
 8000e28:	f000 fa08 	bl	800123c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e2c:	bf00      	nop
 8000e2e:	3720      	adds	r7, #32
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40013800 	.word	0x40013800
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40010800 	.word	0x40010800

08000e40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08e      	sub	sp, #56	; 0x38
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000e50:	2300      	movs	r3, #0
 8000e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000e56:	4b34      	ldr	r3, [pc, #208]	; (8000f28 <HAL_InitTick+0xe8>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	4a33      	ldr	r2, [pc, #204]	; (8000f28 <HAL_InitTick+0xe8>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	61d3      	str	r3, [r2, #28]
 8000e62:	4b31      	ldr	r3, [pc, #196]	; (8000f28 <HAL_InitTick+0xe8>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e6e:	f107 0210 	add.w	r2, r7, #16
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4611      	mov	r1, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f000 ff7f 	bl	8001d7c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e7e:	6a3b      	ldr	r3, [r7, #32]
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d103      	bne.n	8000e90 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e88:	f000 ff50 	bl	8001d2c <HAL_RCC_GetPCLK1Freq>
 8000e8c:	6378      	str	r0, [r7, #52]	; 0x34
 8000e8e:	e004      	b.n	8000e9a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e90:	f000 ff4c 	bl	8001d2c <HAL_RCC_GetPCLK1Freq>
 8000e94:	4603      	mov	r3, r0
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e9c:	4a23      	ldr	r2, [pc, #140]	; (8000f2c <HAL_InitTick+0xec>)
 8000e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea2:	0c9b      	lsrs	r3, r3, #18
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000ea8:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <HAL_InitTick+0xf0>)
 8000eaa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <HAL_InitTick+0xf0>)
 8000eb2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eb6:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000eb8:	4a1d      	ldr	r2, [pc, #116]	; (8000f30 <HAL_InitTick+0xf0>)
 8000eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ebc:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000ebe:	4b1c      	ldr	r3, [pc, #112]	; (8000f30 <HAL_InitTick+0xf0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec4:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <HAL_InitTick+0xf0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eca:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <HAL_InitTick+0xf0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000ed0:	4817      	ldr	r0, [pc, #92]	; (8000f30 <HAL_InitTick+0xf0>)
 8000ed2:	f001 fd29 	bl	8002928 <HAL_TIM_Base_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000edc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d11b      	bne.n	8000f1c <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000ee4:	4812      	ldr	r0, [pc, #72]	; (8000f30 <HAL_InitTick+0xf0>)
 8000ee6:	f001 fd77 	bl	80029d8 <HAL_TIM_Base_Start_IT>
 8000eea:	4603      	mov	r3, r0
 8000eec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ef0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d111      	bne.n	8000f1c <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ef8:	201c      	movs	r0, #28
 8000efa:	f000 f990 	bl	800121e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d808      	bhi.n	8000f16 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000f04:	2200      	movs	r2, #0
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	201c      	movs	r0, #28
 8000f0a:	f000 f96c 	bl	80011e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f0e:	4a09      	ldr	r2, [pc, #36]	; (8000f34 <HAL_InitTick+0xf4>)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	e002      	b.n	8000f1c <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3738      	adds	r7, #56	; 0x38
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	431bde83 	.word	0x431bde83
 8000f30:	200001b0 	.word	0x200001b0
 8000f34:	20000014 	.word	0x20000014

08000f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <NMI_Handler+0x4>

08000f3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <HardFault_Handler+0x4>

08000f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <MemManage_Handler+0x4>

08000f4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <BusFault_Handler+0x4>

08000f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <UsageFault_Handler+0x4>

08000f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr
	...

08000f64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <TIM2_IRQHandler+0x10>)
 8000f6a:	f001 fe6d 	bl	8002c48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200001b0 	.word	0x200001b0

08000f78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f84:	f7ff fff8 	bl	8000f78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f88:	480b      	ldr	r0, [pc, #44]	; (8000fb8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f8a:	490c      	ldr	r1, [pc, #48]	; (8000fbc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f8c:	4a0c      	ldr	r2, [pc, #48]	; (8000fc0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f90:	e002      	b.n	8000f98 <LoopCopyDataInit>

08000f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f96:	3304      	adds	r3, #4

08000f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f9c:	d3f9      	bcc.n	8000f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9e:	4a09      	ldr	r2, [pc, #36]	; (8000fc4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fa0:	4c09      	ldr	r4, [pc, #36]	; (8000fc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa4:	e001      	b.n	8000faa <LoopFillZerobss>

08000fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa8:	3204      	adds	r2, #4

08000faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fac:	d3fb      	bcc.n	8000fa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fae:	f005 f967 	bl	8006280 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fb2:	f7ff fb95 	bl	80006e0 <main>
  bx lr
 8000fb6:	4770      	bx	lr
  ldr r0, =_sdata
 8000fb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fbc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000fc0:	080065bc 	.word	0x080065bc
  ldr r2, =_sbss
 8000fc4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000fc8:	20001b44 	.word	0x20001b44

08000fcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fcc:	e7fe      	b.n	8000fcc <ADC1_2_IRQHandler>
	...

08000fd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <HAL_Init+0x28>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <HAL_Init+0x28>)
 8000fda:	f043 0310 	orr.w	r3, r3, #16
 8000fde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe0:	2003      	movs	r0, #3
 8000fe2:	f000 f8f5 	bl	80011d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe6:	200f      	movs	r0, #15
 8000fe8:	f7ff ff2a 	bl	8000e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fec:	f7ff fdf6 	bl	8000bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40022000 	.word	0x40022000

08000ffc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <HAL_IncTick+0x1c>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b05      	ldr	r3, [pc, #20]	; (800101c <HAL_IncTick+0x20>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
 800100c:	4a03      	ldr	r2, [pc, #12]	; (800101c <HAL_IncTick+0x20>)
 800100e:	6013      	str	r3, [r2, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	20000018 	.word	0x20000018
 800101c:	200001f8 	.word	0x200001f8

08001020 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return uwTick;
 8001024:	4b02      	ldr	r3, [pc, #8]	; (8001030 <HAL_GetTick+0x10>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	200001f8 	.word	0x200001f8

08001034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800103c:	f7ff fff0 	bl	8001020 <HAL_GetTick>
 8001040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800104c:	d005      	beq.n	800105a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <HAL_Delay+0x44>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	461a      	mov	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4413      	add	r3, r2
 8001058:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800105a:	bf00      	nop
 800105c:	f7ff ffe0 	bl	8001020 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	429a      	cmp	r2, r3
 800106a:	d8f7      	bhi.n	800105c <HAL_Delay+0x28>
  {
  }
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000018 	.word	0x20000018

0800107c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001098:	4013      	ands	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	60d3      	str	r3, [r2, #12]
}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <__NVIC_GetPriorityGrouping+0x18>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	0a1b      	lsrs	r3, r3, #8
 80010ce:	f003 0307 	and.w	r3, r3, #7
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	db0b      	blt.n	800110a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	f003 021f 	and.w	r2, r3, #31
 80010f8:	4906      	ldr	r1, [pc, #24]	; (8001114 <__NVIC_EnableIRQ+0x34>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	095b      	lsrs	r3, r3, #5
 8001100:	2001      	movs	r0, #1
 8001102:	fa00 f202 	lsl.w	r2, r0, r2
 8001106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	e000e100 	.word	0xe000e100

08001118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	db0a      	blt.n	8001142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	b2da      	uxtb	r2, r3
 8001130:	490c      	ldr	r1, [pc, #48]	; (8001164 <__NVIC_SetPriority+0x4c>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	0112      	lsls	r2, r2, #4
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	440b      	add	r3, r1
 800113c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001140:	e00a      	b.n	8001158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4908      	ldr	r1, [pc, #32]	; (8001168 <__NVIC_SetPriority+0x50>)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	3b04      	subs	r3, #4
 8001150:	0112      	lsls	r2, r2, #4
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	440b      	add	r3, r1
 8001156:	761a      	strb	r2, [r3, #24]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000e100 	.word	0xe000e100
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f1c3 0307 	rsb	r3, r3, #7
 8001186:	2b04      	cmp	r3, #4
 8001188:	bf28      	it	cs
 800118a:	2304      	movcs	r3, #4
 800118c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3304      	adds	r3, #4
 8001192:	2b06      	cmp	r3, #6
 8001194:	d902      	bls.n	800119c <NVIC_EncodePriority+0x30>
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3b03      	subs	r3, #3
 800119a:	e000      	b.n	800119e <NVIC_EncodePriority+0x32>
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43da      	mvns	r2, r3
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	401a      	ands	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b4:	f04f 31ff 	mov.w	r1, #4294967295
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	43d9      	mvns	r1, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	4313      	orrs	r3, r2
         );
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3724      	adds	r7, #36	; 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff4f 	bl	800107c <__NVIC_SetPriorityGrouping>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b086      	sub	sp, #24
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f8:	f7ff ff64 	bl	80010c4 <__NVIC_GetPriorityGrouping>
 80011fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	68b9      	ldr	r1, [r7, #8]
 8001202:	6978      	ldr	r0, [r7, #20]
 8001204:	f7ff ffb2 	bl	800116c <NVIC_EncodePriority>
 8001208:	4602      	mov	r2, r0
 800120a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff81 	bl	8001118 <__NVIC_SetPriority>
}
 8001216:	bf00      	nop
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff57 	bl	80010e0 <__NVIC_EnableIRQ>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800123c:	b480      	push	{r7}
 800123e:	b08b      	sub	sp, #44	; 0x2c
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800124a:	2300      	movs	r3, #0
 800124c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124e:	e161      	b.n	8001514 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001250:	2201      	movs	r2, #1
 8001252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	69fa      	ldr	r2, [r7, #28]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	429a      	cmp	r2, r3
 800126a:	f040 8150 	bne.w	800150e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	4a97      	ldr	r2, [pc, #604]	; (80014d0 <HAL_GPIO_Init+0x294>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d05e      	beq.n	8001336 <HAL_GPIO_Init+0xfa>
 8001278:	4a95      	ldr	r2, [pc, #596]	; (80014d0 <HAL_GPIO_Init+0x294>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d875      	bhi.n	800136a <HAL_GPIO_Init+0x12e>
 800127e:	4a95      	ldr	r2, [pc, #596]	; (80014d4 <HAL_GPIO_Init+0x298>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d058      	beq.n	8001336 <HAL_GPIO_Init+0xfa>
 8001284:	4a93      	ldr	r2, [pc, #588]	; (80014d4 <HAL_GPIO_Init+0x298>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d86f      	bhi.n	800136a <HAL_GPIO_Init+0x12e>
 800128a:	4a93      	ldr	r2, [pc, #588]	; (80014d8 <HAL_GPIO_Init+0x29c>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d052      	beq.n	8001336 <HAL_GPIO_Init+0xfa>
 8001290:	4a91      	ldr	r2, [pc, #580]	; (80014d8 <HAL_GPIO_Init+0x29c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d869      	bhi.n	800136a <HAL_GPIO_Init+0x12e>
 8001296:	4a91      	ldr	r2, [pc, #580]	; (80014dc <HAL_GPIO_Init+0x2a0>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d04c      	beq.n	8001336 <HAL_GPIO_Init+0xfa>
 800129c:	4a8f      	ldr	r2, [pc, #572]	; (80014dc <HAL_GPIO_Init+0x2a0>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d863      	bhi.n	800136a <HAL_GPIO_Init+0x12e>
 80012a2:	4a8f      	ldr	r2, [pc, #572]	; (80014e0 <HAL_GPIO_Init+0x2a4>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d046      	beq.n	8001336 <HAL_GPIO_Init+0xfa>
 80012a8:	4a8d      	ldr	r2, [pc, #564]	; (80014e0 <HAL_GPIO_Init+0x2a4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d85d      	bhi.n	800136a <HAL_GPIO_Init+0x12e>
 80012ae:	2b12      	cmp	r3, #18
 80012b0:	d82a      	bhi.n	8001308 <HAL_GPIO_Init+0xcc>
 80012b2:	2b12      	cmp	r3, #18
 80012b4:	d859      	bhi.n	800136a <HAL_GPIO_Init+0x12e>
 80012b6:	a201      	add	r2, pc, #4	; (adr r2, 80012bc <HAL_GPIO_Init+0x80>)
 80012b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012bc:	08001337 	.word	0x08001337
 80012c0:	08001311 	.word	0x08001311
 80012c4:	08001323 	.word	0x08001323
 80012c8:	08001365 	.word	0x08001365
 80012cc:	0800136b 	.word	0x0800136b
 80012d0:	0800136b 	.word	0x0800136b
 80012d4:	0800136b 	.word	0x0800136b
 80012d8:	0800136b 	.word	0x0800136b
 80012dc:	0800136b 	.word	0x0800136b
 80012e0:	0800136b 	.word	0x0800136b
 80012e4:	0800136b 	.word	0x0800136b
 80012e8:	0800136b 	.word	0x0800136b
 80012ec:	0800136b 	.word	0x0800136b
 80012f0:	0800136b 	.word	0x0800136b
 80012f4:	0800136b 	.word	0x0800136b
 80012f8:	0800136b 	.word	0x0800136b
 80012fc:	0800136b 	.word	0x0800136b
 8001300:	08001319 	.word	0x08001319
 8001304:	0800132d 	.word	0x0800132d
 8001308:	4a76      	ldr	r2, [pc, #472]	; (80014e4 <HAL_GPIO_Init+0x2a8>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d013      	beq.n	8001336 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800130e:	e02c      	b.n	800136a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	623b      	str	r3, [r7, #32]
          break;
 8001316:	e029      	b.n	800136c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	3304      	adds	r3, #4
 800131e:	623b      	str	r3, [r7, #32]
          break;
 8001320:	e024      	b.n	800136c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	3308      	adds	r3, #8
 8001328:	623b      	str	r3, [r7, #32]
          break;
 800132a:	e01f      	b.n	800136c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	330c      	adds	r3, #12
 8001332:	623b      	str	r3, [r7, #32]
          break;
 8001334:	e01a      	b.n	800136c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d102      	bne.n	8001344 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800133e:	2304      	movs	r3, #4
 8001340:	623b      	str	r3, [r7, #32]
          break;
 8001342:	e013      	b.n	800136c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d105      	bne.n	8001358 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800134c:	2308      	movs	r3, #8
 800134e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69fa      	ldr	r2, [r7, #28]
 8001354:	611a      	str	r2, [r3, #16]
          break;
 8001356:	e009      	b.n	800136c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001358:	2308      	movs	r3, #8
 800135a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69fa      	ldr	r2, [r7, #28]
 8001360:	615a      	str	r2, [r3, #20]
          break;
 8001362:	e003      	b.n	800136c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
          break;
 8001368:	e000      	b.n	800136c <HAL_GPIO_Init+0x130>
          break;
 800136a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	2bff      	cmp	r3, #255	; 0xff
 8001370:	d801      	bhi.n	8001376 <HAL_GPIO_Init+0x13a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	e001      	b.n	800137a <HAL_GPIO_Init+0x13e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3304      	adds	r3, #4
 800137a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	2bff      	cmp	r3, #255	; 0xff
 8001380:	d802      	bhi.n	8001388 <HAL_GPIO_Init+0x14c>
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	e002      	b.n	800138e <HAL_GPIO_Init+0x152>
 8001388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138a:	3b08      	subs	r3, #8
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	210f      	movs	r1, #15
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	fa01 f303 	lsl.w	r3, r1, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	401a      	ands	r2, r3
 80013a0:	6a39      	ldr	r1, [r7, #32]
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	fa01 f303 	lsl.w	r3, r1, r3
 80013a8:	431a      	orrs	r2, r3
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f000 80a9 	beq.w	800150e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013bc:	4b4a      	ldr	r3, [pc, #296]	; (80014e8 <HAL_GPIO_Init+0x2ac>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	4a49      	ldr	r2, [pc, #292]	; (80014e8 <HAL_GPIO_Init+0x2ac>)
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	6193      	str	r3, [r2, #24]
 80013c8:	4b47      	ldr	r3, [pc, #284]	; (80014e8 <HAL_GPIO_Init+0x2ac>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013d4:	4a45      	ldr	r2, [pc, #276]	; (80014ec <HAL_GPIO_Init+0x2b0>)
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	089b      	lsrs	r3, r3, #2
 80013da:	3302      	adds	r3, #2
 80013dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	f003 0303 	and.w	r3, r3, #3
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	220f      	movs	r2, #15
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	4013      	ands	r3, r2
 80013f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a3d      	ldr	r2, [pc, #244]	; (80014f0 <HAL_GPIO_Init+0x2b4>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d00d      	beq.n	800141c <HAL_GPIO_Init+0x1e0>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a3c      	ldr	r2, [pc, #240]	; (80014f4 <HAL_GPIO_Init+0x2b8>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d007      	beq.n	8001418 <HAL_GPIO_Init+0x1dc>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a3b      	ldr	r2, [pc, #236]	; (80014f8 <HAL_GPIO_Init+0x2bc>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d101      	bne.n	8001414 <HAL_GPIO_Init+0x1d8>
 8001410:	2302      	movs	r3, #2
 8001412:	e004      	b.n	800141e <HAL_GPIO_Init+0x1e2>
 8001414:	2303      	movs	r3, #3
 8001416:	e002      	b.n	800141e <HAL_GPIO_Init+0x1e2>
 8001418:	2301      	movs	r3, #1
 800141a:	e000      	b.n	800141e <HAL_GPIO_Init+0x1e2>
 800141c:	2300      	movs	r3, #0
 800141e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001420:	f002 0203 	and.w	r2, r2, #3
 8001424:	0092      	lsls	r2, r2, #2
 8001426:	4093      	lsls	r3, r2
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	4313      	orrs	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800142e:	492f      	ldr	r1, [pc, #188]	; (80014ec <HAL_GPIO_Init+0x2b0>)
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	089b      	lsrs	r3, r3, #2
 8001434:	3302      	adds	r3, #2
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d006      	beq.n	8001456 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001448:	4b2c      	ldr	r3, [pc, #176]	; (80014fc <HAL_GPIO_Init+0x2c0>)
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	492b      	ldr	r1, [pc, #172]	; (80014fc <HAL_GPIO_Init+0x2c0>)
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	4313      	orrs	r3, r2
 8001452:	608b      	str	r3, [r1, #8]
 8001454:	e006      	b.n	8001464 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001456:	4b29      	ldr	r3, [pc, #164]	; (80014fc <HAL_GPIO_Init+0x2c0>)
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	43db      	mvns	r3, r3
 800145e:	4927      	ldr	r1, [pc, #156]	; (80014fc <HAL_GPIO_Init+0x2c0>)
 8001460:	4013      	ands	r3, r2
 8001462:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d006      	beq.n	800147e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001470:	4b22      	ldr	r3, [pc, #136]	; (80014fc <HAL_GPIO_Init+0x2c0>)
 8001472:	68da      	ldr	r2, [r3, #12]
 8001474:	4921      	ldr	r1, [pc, #132]	; (80014fc <HAL_GPIO_Init+0x2c0>)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	4313      	orrs	r3, r2
 800147a:	60cb      	str	r3, [r1, #12]
 800147c:	e006      	b.n	800148c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800147e:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <HAL_GPIO_Init+0x2c0>)
 8001480:	68da      	ldr	r2, [r3, #12]
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	43db      	mvns	r3, r3
 8001486:	491d      	ldr	r1, [pc, #116]	; (80014fc <HAL_GPIO_Init+0x2c0>)
 8001488:	4013      	ands	r3, r2
 800148a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d006      	beq.n	80014a6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <HAL_GPIO_Init+0x2c0>)
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	4917      	ldr	r1, [pc, #92]	; (80014fc <HAL_GPIO_Init+0x2c0>)
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	604b      	str	r3, [r1, #4]
 80014a4:	e006      	b.n	80014b4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_GPIO_Init+0x2c0>)
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	43db      	mvns	r3, r3
 80014ae:	4913      	ldr	r1, [pc, #76]	; (80014fc <HAL_GPIO_Init+0x2c0>)
 80014b0:	4013      	ands	r3, r2
 80014b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d01f      	beq.n	8001500 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HAL_GPIO_Init+0x2c0>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	490d      	ldr	r1, [pc, #52]	; (80014fc <HAL_GPIO_Init+0x2c0>)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	600b      	str	r3, [r1, #0]
 80014cc:	e01f      	b.n	800150e <HAL_GPIO_Init+0x2d2>
 80014ce:	bf00      	nop
 80014d0:	10320000 	.word	0x10320000
 80014d4:	10310000 	.word	0x10310000
 80014d8:	10220000 	.word	0x10220000
 80014dc:	10210000 	.word	0x10210000
 80014e0:	10120000 	.word	0x10120000
 80014e4:	10110000 	.word	0x10110000
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40010000 	.word	0x40010000
 80014f0:	40010800 	.word	0x40010800
 80014f4:	40010c00 	.word	0x40010c00
 80014f8:	40011000 	.word	0x40011000
 80014fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <HAL_GPIO_Init+0x2f4>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	43db      	mvns	r3, r3
 8001508:	4909      	ldr	r1, [pc, #36]	; (8001530 <HAL_GPIO_Init+0x2f4>)
 800150a:	4013      	ands	r3, r2
 800150c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	3301      	adds	r3, #1
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	fa22 f303 	lsr.w	r3, r2, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	f47f ae96 	bne.w	8001250 <HAL_GPIO_Init+0x14>
  }
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	372c      	adds	r7, #44	; 0x2c
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	40010400 	.word	0x40010400

08001534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	807b      	strh	r3, [r7, #2]
 8001540:	4613      	mov	r3, r2
 8001542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001544:	787b      	ldrb	r3, [r7, #1]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800154a:	887a      	ldrh	r2, [r7, #2]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001550:	e003      	b.n	800155a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001552:	887b      	ldrh	r3, [r7, #2]
 8001554:	041a      	lsls	r2, r3, #16
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	611a      	str	r2, [r3, #16]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001576:	887a      	ldrh	r2, [r7, #2]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4013      	ands	r3, r2
 800157c:	041a      	lsls	r2, r3, #16
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	43d9      	mvns	r1, r3
 8001582:	887b      	ldrh	r3, [r7, #2]
 8001584:	400b      	ands	r3, r1
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	611a      	str	r2, [r3, #16]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
	...

08001598 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e272      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 8087 	beq.w	80016c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015b8:	4b92      	ldr	r3, [pc, #584]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 030c 	and.w	r3, r3, #12
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	d00c      	beq.n	80015de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015c4:	4b8f      	ldr	r3, [pc, #572]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 030c 	and.w	r3, r3, #12
 80015cc:	2b08      	cmp	r3, #8
 80015ce:	d112      	bne.n	80015f6 <HAL_RCC_OscConfig+0x5e>
 80015d0:	4b8c      	ldr	r3, [pc, #560]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015dc:	d10b      	bne.n	80015f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015de:	4b89      	ldr	r3, [pc, #548]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d06c      	beq.n	80016c4 <HAL_RCC_OscConfig+0x12c>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d168      	bne.n	80016c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e24c      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015fe:	d106      	bne.n	800160e <HAL_RCC_OscConfig+0x76>
 8001600:	4b80      	ldr	r3, [pc, #512]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a7f      	ldr	r2, [pc, #508]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	e02e      	b.n	800166c <HAL_RCC_OscConfig+0xd4>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10c      	bne.n	8001630 <HAL_RCC_OscConfig+0x98>
 8001616:	4b7b      	ldr	r3, [pc, #492]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a7a      	ldr	r2, [pc, #488]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800161c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	4b78      	ldr	r3, [pc, #480]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a77      	ldr	r2, [pc, #476]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001628:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e01d      	b.n	800166c <HAL_RCC_OscConfig+0xd4>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001638:	d10c      	bne.n	8001654 <HAL_RCC_OscConfig+0xbc>
 800163a:	4b72      	ldr	r3, [pc, #456]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a71      	ldr	r2, [pc, #452]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	4b6f      	ldr	r3, [pc, #444]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a6e      	ldr	r2, [pc, #440]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800164c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	e00b      	b.n	800166c <HAL_RCC_OscConfig+0xd4>
 8001654:	4b6b      	ldr	r3, [pc, #428]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a6a      	ldr	r2, [pc, #424]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800165a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800165e:	6013      	str	r3, [r2, #0]
 8001660:	4b68      	ldr	r3, [pc, #416]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a67      	ldr	r2, [pc, #412]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001666:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800166a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d013      	beq.n	800169c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fcd4 	bl	8001020 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800167c:	f7ff fcd0 	bl	8001020 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b64      	cmp	r3, #100	; 0x64
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e200      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168e:	4b5d      	ldr	r3, [pc, #372]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0xe4>
 800169a:	e014      	b.n	80016c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff fcc0 	bl	8001020 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a4:	f7ff fcbc 	bl	8001020 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b64      	cmp	r3, #100	; 0x64
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e1ec      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b6:	4b53      	ldr	r3, [pc, #332]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f0      	bne.n	80016a4 <HAL_RCC_OscConfig+0x10c>
 80016c2:	e000      	b.n	80016c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d063      	beq.n	800179a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016d2:	4b4c      	ldr	r3, [pc, #304]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 030c 	and.w	r3, r3, #12
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00b      	beq.n	80016f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016de:	4b49      	ldr	r3, [pc, #292]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 030c 	and.w	r3, r3, #12
 80016e6:	2b08      	cmp	r3, #8
 80016e8:	d11c      	bne.n	8001724 <HAL_RCC_OscConfig+0x18c>
 80016ea:	4b46      	ldr	r3, [pc, #280]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d116      	bne.n	8001724 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f6:	4b43      	ldr	r3, [pc, #268]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <HAL_RCC_OscConfig+0x176>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d001      	beq.n	800170e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e1c0      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170e:	4b3d      	ldr	r3, [pc, #244]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	4939      	ldr	r1, [pc, #228]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800171e:	4313      	orrs	r3, r2
 8001720:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001722:	e03a      	b.n	800179a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d020      	beq.n	800176e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800172c:	4b36      	ldr	r3, [pc, #216]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800172e:	2201      	movs	r2, #1
 8001730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001732:	f7ff fc75 	bl	8001020 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800173a:	f7ff fc71 	bl	8001020 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e1a1      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174c:	4b2d      	ldr	r3, [pc, #180]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001758:	4b2a      	ldr	r3, [pc, #168]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	4927      	ldr	r1, [pc, #156]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001768:	4313      	orrs	r3, r2
 800176a:	600b      	str	r3, [r1, #0]
 800176c:	e015      	b.n	800179a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800176e:	4b26      	ldr	r3, [pc, #152]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff fc54 	bl	8001020 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800177c:	f7ff fc50 	bl	8001020 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e180      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d03a      	beq.n	800181c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d019      	beq.n	80017e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b4:	f7ff fc34 	bl	8001020 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017bc:	f7ff fc30 	bl	8001020 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e160      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ce:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0f0      	beq.n	80017bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017da:	2001      	movs	r0, #1
 80017dc:	f000 fafe 	bl	8001ddc <RCC_Delay>
 80017e0:	e01c      	b.n	800181c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e8:	f7ff fc1a 	bl	8001020 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ee:	e00f      	b.n	8001810 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f0:	f7ff fc16 	bl	8001020 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d908      	bls.n	8001810 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e146      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000
 8001808:	42420000 	.word	0x42420000
 800180c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001810:	4b92      	ldr	r3, [pc, #584]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1e9      	bne.n	80017f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 80a6 	beq.w	8001976 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800182a:	2300      	movs	r3, #0
 800182c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800182e:	4b8b      	ldr	r3, [pc, #556]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10d      	bne.n	8001856 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800183a:	4b88      	ldr	r3, [pc, #544]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	4a87      	ldr	r2, [pc, #540]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001844:	61d3      	str	r3, [r2, #28]
 8001846:	4b85      	ldr	r3, [pc, #532]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001852:	2301      	movs	r3, #1
 8001854:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001856:	4b82      	ldr	r3, [pc, #520]	; (8001a60 <HAL_RCC_OscConfig+0x4c8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185e:	2b00      	cmp	r3, #0
 8001860:	d118      	bne.n	8001894 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001862:	4b7f      	ldr	r3, [pc, #508]	; (8001a60 <HAL_RCC_OscConfig+0x4c8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a7e      	ldr	r2, [pc, #504]	; (8001a60 <HAL_RCC_OscConfig+0x4c8>)
 8001868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800186e:	f7ff fbd7 	bl	8001020 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001876:	f7ff fbd3 	bl	8001020 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b64      	cmp	r3, #100	; 0x64
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e103      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001888:	4b75      	ldr	r3, [pc, #468]	; (8001a60 <HAL_RCC_OscConfig+0x4c8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0f0      	beq.n	8001876 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d106      	bne.n	80018aa <HAL_RCC_OscConfig+0x312>
 800189c:	4b6f      	ldr	r3, [pc, #444]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	4a6e      	ldr	r2, [pc, #440]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	6213      	str	r3, [r2, #32]
 80018a8:	e02d      	b.n	8001906 <HAL_RCC_OscConfig+0x36e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10c      	bne.n	80018cc <HAL_RCC_OscConfig+0x334>
 80018b2:	4b6a      	ldr	r3, [pc, #424]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	4a69      	ldr	r2, [pc, #420]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018b8:	f023 0301 	bic.w	r3, r3, #1
 80018bc:	6213      	str	r3, [r2, #32]
 80018be:	4b67      	ldr	r3, [pc, #412]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	4a66      	ldr	r2, [pc, #408]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	f023 0304 	bic.w	r3, r3, #4
 80018c8:	6213      	str	r3, [r2, #32]
 80018ca:	e01c      	b.n	8001906 <HAL_RCC_OscConfig+0x36e>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	2b05      	cmp	r3, #5
 80018d2:	d10c      	bne.n	80018ee <HAL_RCC_OscConfig+0x356>
 80018d4:	4b61      	ldr	r3, [pc, #388]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	4a60      	ldr	r2, [pc, #384]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018da:	f043 0304 	orr.w	r3, r3, #4
 80018de:	6213      	str	r3, [r2, #32]
 80018e0:	4b5e      	ldr	r3, [pc, #376]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	4a5d      	ldr	r2, [pc, #372]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	6213      	str	r3, [r2, #32]
 80018ec:	e00b      	b.n	8001906 <HAL_RCC_OscConfig+0x36e>
 80018ee:	4b5b      	ldr	r3, [pc, #364]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	4a5a      	ldr	r2, [pc, #360]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018f4:	f023 0301 	bic.w	r3, r3, #1
 80018f8:	6213      	str	r3, [r2, #32]
 80018fa:	4b58      	ldr	r3, [pc, #352]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	4a57      	ldr	r2, [pc, #348]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 8001900:	f023 0304 	bic.w	r3, r3, #4
 8001904:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d015      	beq.n	800193a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190e:	f7ff fb87 	bl	8001020 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001914:	e00a      	b.n	800192c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001916:	f7ff fb83 	bl	8001020 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	f241 3288 	movw	r2, #5000	; 0x1388
 8001924:	4293      	cmp	r3, r2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e0b1      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192c:	4b4b      	ldr	r3, [pc, #300]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0ee      	beq.n	8001916 <HAL_RCC_OscConfig+0x37e>
 8001938:	e014      	b.n	8001964 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193a:	f7ff fb71 	bl	8001020 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001940:	e00a      	b.n	8001958 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001942:	f7ff fb6d 	bl	8001020 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001950:	4293      	cmp	r3, r2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e09b      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001958:	4b40      	ldr	r3, [pc, #256]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1ee      	bne.n	8001942 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001964:	7dfb      	ldrb	r3, [r7, #23]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d105      	bne.n	8001976 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800196a:	4b3c      	ldr	r3, [pc, #240]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	4a3b      	ldr	r2, [pc, #236]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 8001970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001974:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 8087 	beq.w	8001a8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001980:	4b36      	ldr	r3, [pc, #216]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 030c 	and.w	r3, r3, #12
 8001988:	2b08      	cmp	r3, #8
 800198a:	d061      	beq.n	8001a50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69db      	ldr	r3, [r3, #28]
 8001990:	2b02      	cmp	r3, #2
 8001992:	d146      	bne.n	8001a22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001994:	4b33      	ldr	r3, [pc, #204]	; (8001a64 <HAL_RCC_OscConfig+0x4cc>)
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199a:	f7ff fb41 	bl	8001020 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a2:	f7ff fb3d 	bl	8001020 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e06d      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b4:	4b29      	ldr	r3, [pc, #164]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1f0      	bne.n	80019a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c8:	d108      	bne.n	80019dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019ca:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	4921      	ldr	r1, [pc, #132]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019dc:	4b1f      	ldr	r3, [pc, #124]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a19      	ldr	r1, [r3, #32]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	430b      	orrs	r3, r1
 80019ee:	491b      	ldr	r1, [pc, #108]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f4:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <HAL_RCC_OscConfig+0x4cc>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fa:	f7ff fb11 	bl	8001020 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a02:	f7ff fb0d 	bl	8001020 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e03d      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x46a>
 8001a20:	e035      	b.n	8001a8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <HAL_RCC_OscConfig+0x4cc>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a28:	f7ff fafa 	bl	8001020 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a30:	f7ff faf6 	bl	8001020 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e026      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0x498>
 8001a4e:	e01e      	b.n	8001a8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d107      	bne.n	8001a68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e019      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40007000 	.word	0x40007000
 8001a64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_RCC_OscConfig+0x500>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d106      	bne.n	8001a8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d001      	beq.n	8001a8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40021000 	.word	0x40021000

08001a9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0d0      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab0:	4b6a      	ldr	r3, [pc, #424]	; (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d910      	bls.n	8001ae0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abe:	4b67      	ldr	r3, [pc, #412]	; (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f023 0207 	bic.w	r2, r3, #7
 8001ac6:	4965      	ldr	r1, [pc, #404]	; (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ace:	4b63      	ldr	r3, [pc, #396]	; (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0b8      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d020      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001af8:	4b59      	ldr	r3, [pc, #356]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	4a58      	ldr	r2, [pc, #352]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001afe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b10:	4b53      	ldr	r3, [pc, #332]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	4a52      	ldr	r2, [pc, #328]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b1c:	4b50      	ldr	r3, [pc, #320]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	494d      	ldr	r1, [pc, #308]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d040      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d107      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	4b47      	ldr	r3, [pc, #284]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d115      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e07f      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d107      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5a:	4b41      	ldr	r3, [pc, #260]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d109      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e073      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6a:	4b3d      	ldr	r3, [pc, #244]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e06b      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b7a:	4b39      	ldr	r3, [pc, #228]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f023 0203 	bic.w	r2, r3, #3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	4936      	ldr	r1, [pc, #216]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b8c:	f7ff fa48 	bl	8001020 <HAL_GetTick>
 8001b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b92:	e00a      	b.n	8001baa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b94:	f7ff fa44 	bl	8001020 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e053      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001baa:	4b2d      	ldr	r3, [pc, #180]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 020c 	and.w	r2, r3, #12
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d1eb      	bne.n	8001b94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bbc:	4b27      	ldr	r3, [pc, #156]	; (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d210      	bcs.n	8001bec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bca:	4b24      	ldr	r3, [pc, #144]	; (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f023 0207 	bic.w	r2, r3, #7
 8001bd2:	4922      	ldr	r1, [pc, #136]	; (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bda:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e032      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf8:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	4916      	ldr	r1, [pc, #88]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d009      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c16:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	490e      	ldr	r1, [pc, #56]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c2a:	f000 f821 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	091b      	lsrs	r3, r3, #4
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	490a      	ldr	r1, [pc, #40]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001c3c:	5ccb      	ldrb	r3, [r1, r3]
 8001c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c42:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <HAL_RCC_ClockConfig+0x1cc>)
 8001c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <HAL_RCC_ClockConfig+0x1d0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff f8f8 	bl	8000e40 <HAL_InitTick>

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40022000 	.word	0x40022000
 8001c60:	40021000 	.word	0x40021000
 8001c64:	08006488 	.word	0x08006488
 8001c68:	20000010 	.word	0x20000010
 8001c6c:	20000014 	.word	0x20000014

08001c70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b087      	sub	sp, #28
 8001c74:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	2300      	movs	r3, #0
 8001c84:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c8a:	4b1e      	ldr	r3, [pc, #120]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 030c 	and.w	r3, r3, #12
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d002      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x30>
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d003      	beq.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x36>
 8001c9e:	e027      	b.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ca0:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ca2:	613b      	str	r3, [r7, #16]
      break;
 8001ca4:	e027      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	0c9b      	lsrs	r3, r3, #18
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	4a17      	ldr	r2, [pc, #92]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cb0:	5cd3      	ldrb	r3, [r2, r3]
 8001cb2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d010      	beq.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	0c5b      	lsrs	r3, r3, #17
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	4a11      	ldr	r2, [pc, #68]	; (8001d10 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cca:	5cd3      	ldrb	r3, [r2, r3]
 8001ccc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a0d      	ldr	r2, [pc, #52]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cd2:	fb03 f202 	mul.w	r2, r3, r2
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	e004      	b.n	8001cea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a0c      	ldr	r2, [pc, #48]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ce4:	fb02 f303 	mul.w	r3, r2, r3
 8001ce8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	613b      	str	r3, [r7, #16]
      break;
 8001cee:	e002      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cf2:	613b      	str	r3, [r7, #16]
      break;
 8001cf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cf6:	693b      	ldr	r3, [r7, #16]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	371c      	adds	r7, #28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000
 8001d08:	007a1200 	.word	0x007a1200
 8001d0c:	080064a0 	.word	0x080064a0
 8001d10:	080064b0 	.word	0x080064b0
 8001d14:	003d0900 	.word	0x003d0900

08001d18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d1c:	4b02      	ldr	r3, [pc, #8]	; (8001d28 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr
 8001d28:	20000010 	.word	0x20000010

08001d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d30:	f7ff fff2 	bl	8001d18 <HAL_RCC_GetHCLKFreq>
 8001d34:	4602      	mov	r2, r0
 8001d36:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	0a1b      	lsrs	r3, r3, #8
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	4903      	ldr	r1, [pc, #12]	; (8001d50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d42:	5ccb      	ldrb	r3, [r1, r3]
 8001d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	08006498 	.word	0x08006498

08001d54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d58:	f7ff ffde 	bl	8001d18 <HAL_RCC_GetHCLKFreq>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	0adb      	lsrs	r3, r3, #11
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	4903      	ldr	r1, [pc, #12]	; (8001d78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d6a:	5ccb      	ldrb	r3, [r1, r3]
 8001d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021000 	.word	0x40021000
 8001d78:	08006498 	.word	0x08006498

08001d7c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	220f      	movs	r2, #15
 8001d8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d8c:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <HAL_RCC_GetClockConfig+0x58>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0203 	and.w	r2, r3, #3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d98:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <HAL_RCC_GetClockConfig+0x58>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_RCC_GetClockConfig+0x58>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001db0:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <HAL_RCC_GetClockConfig+0x58>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	08db      	lsrs	r3, r3, #3
 8001db6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0207 	and.w	r2, r3, #7
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40022000 	.word	0x40022000

08001ddc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001de4:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <RCC_Delay+0x34>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <RCC_Delay+0x38>)
 8001dea:	fba2 2303 	umull	r2, r3, r2, r3
 8001dee:	0a5b      	lsrs	r3, r3, #9
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	fb02 f303 	mul.w	r3, r2, r3
 8001df6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001df8:	bf00      	nop
  }
  while (Delay --);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1e5a      	subs	r2, r3, #1
 8001dfe:	60fa      	str	r2, [r7, #12]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1f9      	bne.n	8001df8 <RCC_Delay+0x1c>
}
 8001e04:	bf00      	nop
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	20000010 	.word	0x20000010
 8001e14:	10624dd3 	.word	0x10624dd3

08001e18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e076      	b.n	8001f18 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d108      	bne.n	8001e44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e3a:	d009      	beq.n	8001e50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	61da      	str	r2, [r3, #28]
 8001e42:	e005      	b.n	8001e50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d106      	bne.n	8001e70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7fe feee 	bl	8000c4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2202      	movs	r2, #2
 8001e74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	431a      	orrs	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed4:	ea42 0103 	orr.w	r1, r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001edc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	0c1a      	lsrs	r2, r3, #16
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f002 0204 	and.w	r2, r2, #4
 8001ef6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	69da      	ldr	r2, [r3, #28]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b088      	sub	sp, #32
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	603b      	str	r3, [r7, #0]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d101      	bne.n	8001f42 <HAL_SPI_Transmit+0x22>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e12d      	b.n	800219e <HAL_SPI_Transmit+0x27e>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f4a:	f7ff f869 	bl	8001020 <HAL_GetTick>
 8001f4e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d002      	beq.n	8001f66 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001f60:	2302      	movs	r3, #2
 8001f62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f64:	e116      	b.n	8002194 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d002      	beq.n	8001f72 <HAL_SPI_Transmit+0x52>
 8001f6c:	88fb      	ldrh	r3, [r7, #6]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d102      	bne.n	8001f78 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f76:	e10d      	b.n	8002194 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	88fa      	ldrh	r2, [r7, #6]
 8001f90:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	88fa      	ldrh	r2, [r7, #6]
 8001f96:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fbe:	d10f      	bne.n	8001fe0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fde:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fea:	2b40      	cmp	r3, #64	; 0x40
 8001fec:	d007      	beq.n	8001ffe <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ffc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002006:	d14f      	bne.n	80020a8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <HAL_SPI_Transmit+0xf6>
 8002010:	8afb      	ldrh	r3, [r7, #22]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d142      	bne.n	800209c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	881a      	ldrh	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	1c9a      	adds	r2, r3, #2
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002030:	b29b      	uxth	r3, r3
 8002032:	3b01      	subs	r3, #1
 8002034:	b29a      	uxth	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800203a:	e02f      	b.n	800209c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b02      	cmp	r3, #2
 8002048:	d112      	bne.n	8002070 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	881a      	ldrh	r2, [r3, #0]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	1c9a      	adds	r2, r3, #2
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002064:	b29b      	uxth	r3, r3
 8002066:	3b01      	subs	r3, #1
 8002068:	b29a      	uxth	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	86da      	strh	r2, [r3, #54]	; 0x36
 800206e:	e015      	b.n	800209c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002070:	f7fe ffd6 	bl	8001020 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d803      	bhi.n	8002088 <HAL_SPI_Transmit+0x168>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002086:	d102      	bne.n	800208e <HAL_SPI_Transmit+0x16e>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d106      	bne.n	800209c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800209a:	e07b      	b.n	8002194 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1ca      	bne.n	800203c <HAL_SPI_Transmit+0x11c>
 80020a6:	e050      	b.n	800214a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d002      	beq.n	80020b6 <HAL_SPI_Transmit+0x196>
 80020b0:	8afb      	ldrh	r3, [r7, #22]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d144      	bne.n	8002140 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	330c      	adds	r3, #12
 80020c0:	7812      	ldrb	r2, [r2, #0]
 80020c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c8:	1c5a      	adds	r2, r3, #1
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80020dc:	e030      	b.n	8002140 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d113      	bne.n	8002114 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	330c      	adds	r3, #12
 80020f6:	7812      	ldrb	r2, [r2, #0]
 80020f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	1c5a      	adds	r2, r3, #1
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002108:	b29b      	uxth	r3, r3
 800210a:	3b01      	subs	r3, #1
 800210c:	b29a      	uxth	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	86da      	strh	r2, [r3, #54]	; 0x36
 8002112:	e015      	b.n	8002140 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002114:	f7fe ff84 	bl	8001020 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d803      	bhi.n	800212c <HAL_SPI_Transmit+0x20c>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212a:	d102      	bne.n	8002132 <HAL_SPI_Transmit+0x212>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d106      	bne.n	8002140 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800213e:	e029      	b.n	8002194 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002144:	b29b      	uxth	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1c9      	bne.n	80020de <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	6839      	ldr	r1, [r7, #0]
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 fbcc 	bl	80028ec <SPI_EndRxTxTransaction>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d002      	beq.n	8002160 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2220      	movs	r2, #32
 800215e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10a      	bne.n	800217e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002168:	2300      	movs	r3, #0
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002182:	2b00      	cmp	r3, #0
 8002184:	d002      	beq.n	800218c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	77fb      	strb	r3, [r7, #31]
 800218a:	e003      	b.n	8002194 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800219c:	7ffb      	ldrb	r3, [r7, #31]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3720      	adds	r7, #32
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b088      	sub	sp, #32
 80021aa:	af02      	add	r7, sp, #8
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	603b      	str	r3, [r7, #0]
 80021b2:	4613      	mov	r3, r2
 80021b4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d002      	beq.n	80021cc <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80021c6:	2302      	movs	r3, #2
 80021c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80021ca:	e0fb      	b.n	80023c4 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021d4:	d112      	bne.n	80021fc <HAL_SPI_Receive+0x56>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10e      	bne.n	80021fc <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2204      	movs	r2, #4
 80021e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80021e6:	88fa      	ldrh	r2, [r7, #6]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	4613      	mov	r3, r2
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	68b9      	ldr	r1, [r7, #8]
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 f8ef 	bl	80023d6 <HAL_SPI_TransmitReceive>
 80021f8:	4603      	mov	r3, r0
 80021fa:	e0e8      	b.n	80023ce <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002202:	2b01      	cmp	r3, #1
 8002204:	d101      	bne.n	800220a <HAL_SPI_Receive+0x64>
 8002206:	2302      	movs	r3, #2
 8002208:	e0e1      	b.n	80023ce <HAL_SPI_Receive+0x228>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002212:	f7fe ff05 	bl	8001020 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d002      	beq.n	8002224 <HAL_SPI_Receive+0x7e>
 800221e:	88fb      	ldrh	r3, [r7, #6]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d102      	bne.n	800222a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002228:	e0cc      	b.n	80023c4 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2204      	movs	r2, #4
 800222e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	88fa      	ldrh	r2, [r7, #6]
 8002242:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	88fa      	ldrh	r2, [r7, #6]
 8002248:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002270:	d10f      	bne.n	8002292 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002280:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002290:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229c:	2b40      	cmp	r3, #64	; 0x40
 800229e:	d007      	beq.n	80022b0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022ae:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d16a      	bne.n	800238e <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80022b8:	e032      	b.n	8002320 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d115      	bne.n	80022f4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f103 020c 	add.w	r2, r3, #12
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d4:	7812      	ldrb	r2, [r2, #0]
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	3b01      	subs	r3, #1
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022f2:	e015      	b.n	8002320 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022f4:	f7fe fe94 	bl	8001020 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	429a      	cmp	r2, r3
 8002302:	d803      	bhi.n	800230c <HAL_SPI_Receive+0x166>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230a:	d102      	bne.n	8002312 <HAL_SPI_Receive+0x16c>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d106      	bne.n	8002320 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800231e:	e051      	b.n	80023c4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002324:	b29b      	uxth	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1c7      	bne.n	80022ba <HAL_SPI_Receive+0x114>
 800232a:	e035      	b.n	8002398 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b01      	cmp	r3, #1
 8002338:	d113      	bne.n	8002362 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002344:	b292      	uxth	r2, r2
 8002346:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234c:	1c9a      	adds	r2, r3, #2
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002356:	b29b      	uxth	r3, r3
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002360:	e015      	b.n	800238e <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002362:	f7fe fe5d 	bl	8001020 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d803      	bhi.n	800237a <HAL_SPI_Receive+0x1d4>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002378:	d102      	bne.n	8002380 <HAL_SPI_Receive+0x1da>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d106      	bne.n	800238e <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800238c:	e01a      	b.n	80023c4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002392:	b29b      	uxth	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1c9      	bne.n	800232c <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	6839      	ldr	r1, [r7, #0]
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 fa53 	bl	8002848 <SPI_EndRxTransaction>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2220      	movs	r2, #32
 80023ac:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	75fb      	strb	r3, [r7, #23]
 80023ba:	e003      	b.n	80023c4 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80023cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b08c      	sub	sp, #48	; 0x30
 80023da:	af00      	add	r7, sp, #0
 80023dc:	60f8      	str	r0, [r7, #12]
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
 80023e2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80023e4:	2301      	movs	r3, #1
 80023e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d101      	bne.n	80023fc <HAL_SPI_TransmitReceive+0x26>
 80023f8:	2302      	movs	r3, #2
 80023fa:	e198      	b.n	800272e <HAL_SPI_TransmitReceive+0x358>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002404:	f7fe fe0c 	bl	8001020 <HAL_GetTick>
 8002408:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800241a:	887b      	ldrh	r3, [r7, #2]
 800241c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800241e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002422:	2b01      	cmp	r3, #1
 8002424:	d00f      	beq.n	8002446 <HAL_SPI_TransmitReceive+0x70>
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800242c:	d107      	bne.n	800243e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d103      	bne.n	800243e <HAL_SPI_TransmitReceive+0x68>
 8002436:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800243a:	2b04      	cmp	r3, #4
 800243c:	d003      	beq.n	8002446 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800243e:	2302      	movs	r3, #2
 8002440:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002444:	e16d      	b.n	8002722 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d005      	beq.n	8002458 <HAL_SPI_TransmitReceive+0x82>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d002      	beq.n	8002458 <HAL_SPI_TransmitReceive+0x82>
 8002452:	887b      	ldrh	r3, [r7, #2]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d103      	bne.n	8002460 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800245e:	e160      	b.n	8002722 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b04      	cmp	r3, #4
 800246a:	d003      	beq.n	8002474 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2205      	movs	r2, #5
 8002470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	887a      	ldrh	r2, [r7, #2]
 8002484:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	887a      	ldrh	r2, [r7, #2]
 800248a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	887a      	ldrh	r2, [r7, #2]
 8002496:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	887a      	ldrh	r2, [r7, #2]
 800249c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b4:	2b40      	cmp	r3, #64	; 0x40
 80024b6:	d007      	beq.n	80024c8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024d0:	d17c      	bne.n	80025cc <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d002      	beq.n	80024e0 <HAL_SPI_TransmitReceive+0x10a>
 80024da:	8b7b      	ldrh	r3, [r7, #26]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d16a      	bne.n	80025b6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	881a      	ldrh	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	1c9a      	adds	r2, r3, #2
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	3b01      	subs	r3, #1
 80024fe:	b29a      	uxth	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002504:	e057      	b.n	80025b6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b02      	cmp	r3, #2
 8002512:	d11b      	bne.n	800254c <HAL_SPI_TransmitReceive+0x176>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002518:	b29b      	uxth	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d016      	beq.n	800254c <HAL_SPI_TransmitReceive+0x176>
 800251e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002520:	2b01      	cmp	r3, #1
 8002522:	d113      	bne.n	800254c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	881a      	ldrh	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002534:	1c9a      	adds	r2, r3, #2
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800253e:	b29b      	uxth	r3, r3
 8002540:	3b01      	subs	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b01      	cmp	r3, #1
 8002558:	d119      	bne.n	800258e <HAL_SPI_TransmitReceive+0x1b8>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800255e:	b29b      	uxth	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d014      	beq.n	800258e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256e:	b292      	uxth	r2, r2
 8002570:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002576:	1c9a      	adds	r2, r3, #2
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002580:	b29b      	uxth	r3, r3
 8002582:	3b01      	subs	r3, #1
 8002584:	b29a      	uxth	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800258a:	2301      	movs	r3, #1
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800258e:	f7fe fd47 	bl	8001020 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800259a:	429a      	cmp	r2, r3
 800259c:	d80b      	bhi.n	80025b6 <HAL_SPI_TransmitReceive+0x1e0>
 800259e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a4:	d007      	beq.n	80025b6 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80025b4:	e0b5      	b.n	8002722 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1a2      	bne.n	8002506 <HAL_SPI_TransmitReceive+0x130>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d19d      	bne.n	8002506 <HAL_SPI_TransmitReceive+0x130>
 80025ca:	e080      	b.n	80026ce <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d002      	beq.n	80025da <HAL_SPI_TransmitReceive+0x204>
 80025d4:	8b7b      	ldrh	r3, [r7, #26]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d16f      	bne.n	80026ba <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	330c      	adds	r3, #12
 80025e4:	7812      	ldrb	r2, [r2, #0]
 80025e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002600:	e05b      	b.n	80026ba <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b02      	cmp	r3, #2
 800260e:	d11c      	bne.n	800264a <HAL_SPI_TransmitReceive+0x274>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002614:	b29b      	uxth	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d017      	beq.n	800264a <HAL_SPI_TransmitReceive+0x274>
 800261a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261c:	2b01      	cmp	r3, #1
 800261e:	d114      	bne.n	800264a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	330c      	adds	r3, #12
 800262a:	7812      	ldrb	r2, [r2, #0]
 800262c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800263c:	b29b      	uxth	r3, r3
 800263e:	3b01      	subs	r3, #1
 8002640:	b29a      	uxth	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b01      	cmp	r3, #1
 8002656:	d119      	bne.n	800268c <HAL_SPI_TransmitReceive+0x2b6>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800265c:	b29b      	uxth	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d014      	beq.n	800268c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800267e:	b29b      	uxth	r3, r3
 8002680:	3b01      	subs	r3, #1
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002688:	2301      	movs	r3, #1
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800268c:	f7fe fcc8 	bl	8001020 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002698:	429a      	cmp	r2, r3
 800269a:	d803      	bhi.n	80026a4 <HAL_SPI_TransmitReceive+0x2ce>
 800269c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a2:	d102      	bne.n	80026aa <HAL_SPI_TransmitReceive+0x2d4>
 80026a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d107      	bne.n	80026ba <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80026b8:	e033      	b.n	8002722 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026be:	b29b      	uxth	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d19e      	bne.n	8002602 <HAL_SPI_TransmitReceive+0x22c>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d199      	bne.n	8002602 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f000 f90a 	bl	80028ec <SPI_EndRxTxTransaction>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d006      	beq.n	80026ec <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2220      	movs	r2, #32
 80026e8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80026ea:	e01a      	b.n	8002722 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10a      	bne.n	800270a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002718:	e003      	b.n	8002722 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800272a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800272e:	4618      	mov	r0, r3
 8002730:	3730      	adds	r7, #48	; 0x30
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	4613      	mov	r3, r2
 8002746:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002748:	f7fe fc6a 	bl	8001020 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	4413      	add	r3, r2
 8002756:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002758:	f7fe fc62 	bl	8001020 <HAL_GetTick>
 800275c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800275e:	4b39      	ldr	r3, [pc, #228]	; (8002844 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	015b      	lsls	r3, r3, #5
 8002764:	0d1b      	lsrs	r3, r3, #20
 8002766:	69fa      	ldr	r2, [r7, #28]
 8002768:	fb02 f303 	mul.w	r3, r2, r3
 800276c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800276e:	e054      	b.n	800281a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002776:	d050      	beq.n	800281a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002778:	f7fe fc52 	bl	8001020 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	69fa      	ldr	r2, [r7, #28]
 8002784:	429a      	cmp	r2, r3
 8002786:	d902      	bls.n	800278e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d13d      	bne.n	800280a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800279c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027a6:	d111      	bne.n	80027cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027b0:	d004      	beq.n	80027bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ba:	d107      	bne.n	80027cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d4:	d10f      	bne.n	80027f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e017      	b.n	800283a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	3b01      	subs	r3, #1
 8002818:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4013      	ands	r3, r2
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	429a      	cmp	r2, r3
 8002828:	bf0c      	ite	eq
 800282a:	2301      	moveq	r3, #1
 800282c:	2300      	movne	r3, #0
 800282e:	b2db      	uxtb	r3, r3
 8002830:	461a      	mov	r2, r3
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	429a      	cmp	r2, r3
 8002836:	d19b      	bne.n	8002770 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3720      	adds	r7, #32
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000010 	.word	0x20000010

08002848 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af02      	add	r7, sp, #8
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800285c:	d111      	bne.n	8002882 <SPI_EndRxTransaction+0x3a>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002866:	d004      	beq.n	8002872 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002870:	d107      	bne.n	8002882 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002880:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800288a:	d117      	bne.n	80028bc <SPI_EndRxTransaction+0x74>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002894:	d112      	bne.n	80028bc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2200      	movs	r2, #0
 800289e:	2101      	movs	r1, #1
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f7ff ff49 	bl	8002738 <SPI_WaitFlagStateUntilTimeout>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d01a      	beq.n	80028e2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b0:	f043 0220 	orr.w	r2, r3, #32
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e013      	b.n	80028e4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2200      	movs	r2, #0
 80028c4:	2180      	movs	r1, #128	; 0x80
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f7ff ff36 	bl	8002738 <SPI_WaitFlagStateUntilTimeout>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d007      	beq.n	80028e2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d6:	f043 0220 	orr.w	r2, r3, #32
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e000      	b.n	80028e4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af02      	add	r7, sp, #8
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2200      	movs	r2, #0
 8002900:	2180      	movs	r1, #128	; 0x80
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f7ff ff18 	bl	8002738 <SPI_WaitFlagStateUntilTimeout>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d007      	beq.n	800291e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002912:	f043 0220 	orr.w	r2, r3, #32
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e000      	b.n	8002920 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e041      	b.n	80029be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d106      	bne.n	8002954 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f839 	bl	80029c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3304      	adds	r3, #4
 8002964:	4619      	mov	r1, r3
 8002966:	4610      	mov	r0, r2
 8002968:	f000 fb5c 	bl	8003024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d001      	beq.n	80029f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e035      	b.n	8002a5c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a16      	ldr	r2, [pc, #88]	; (8002a68 <HAL_TIM_Base_Start_IT+0x90>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d009      	beq.n	8002a26 <HAL_TIM_Base_Start_IT+0x4e>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1a:	d004      	beq.n	8002a26 <HAL_TIM_Base_Start_IT+0x4e>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a12      	ldr	r2, [pc, #72]	; (8002a6c <HAL_TIM_Base_Start_IT+0x94>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d111      	bne.n	8002a4a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2b06      	cmp	r3, #6
 8002a36:	d010      	beq.n	8002a5a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0201 	orr.w	r2, r2, #1
 8002a46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a48:	e007      	b.n	8002a5a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 0201 	orr.w	r2, r2, #1
 8002a58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	40012c00 	.word	0x40012c00
 8002a6c:	40000400 	.word	0x40000400

08002a70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e041      	b.n	8002b06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d106      	bne.n	8002a9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7fe f922 	bl	8000ce0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3304      	adds	r3, #4
 8002aac:	4619      	mov	r1, r3
 8002aae:	4610      	mov	r0, r2
 8002ab0:	f000 fab8 	bl	8003024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
	...

08002b10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d109      	bne.n	8002b34 <HAL_TIM_PWM_Start+0x24>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	bf14      	ite	ne
 8002b2c:	2301      	movne	r3, #1
 8002b2e:	2300      	moveq	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	e022      	b.n	8002b7a <HAL_TIM_PWM_Start+0x6a>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d109      	bne.n	8002b4e <HAL_TIM_PWM_Start+0x3e>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	bf14      	ite	ne
 8002b46:	2301      	movne	r3, #1
 8002b48:	2300      	moveq	r3, #0
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	e015      	b.n	8002b7a <HAL_TIM_PWM_Start+0x6a>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d109      	bne.n	8002b68 <HAL_TIM_PWM_Start+0x58>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	bf14      	ite	ne
 8002b60:	2301      	movne	r3, #1
 8002b62:	2300      	moveq	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	e008      	b.n	8002b7a <HAL_TIM_PWM_Start+0x6a>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	bf14      	ite	ne
 8002b74:	2301      	movne	r3, #1
 8002b76:	2300      	moveq	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e059      	b.n	8002c36 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d104      	bne.n	8002b92 <HAL_TIM_PWM_Start+0x82>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b90:	e013      	b.n	8002bba <HAL_TIM_PWM_Start+0xaa>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d104      	bne.n	8002ba2 <HAL_TIM_PWM_Start+0x92>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ba0:	e00b      	b.n	8002bba <HAL_TIM_PWM_Start+0xaa>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d104      	bne.n	8002bb2 <HAL_TIM_PWM_Start+0xa2>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2202      	movs	r2, #2
 8002bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bb0:	e003      	b.n	8002bba <HAL_TIM_PWM_Start+0xaa>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	6839      	ldr	r1, [r7, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 fc0e 	bl	80033e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1c      	ldr	r2, [pc, #112]	; (8002c40 <HAL_TIM_PWM_Start+0x130>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d107      	bne.n	8002be2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002be0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a16      	ldr	r2, [pc, #88]	; (8002c40 <HAL_TIM_PWM_Start+0x130>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d009      	beq.n	8002c00 <HAL_TIM_PWM_Start+0xf0>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf4:	d004      	beq.n	8002c00 <HAL_TIM_PWM_Start+0xf0>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a12      	ldr	r2, [pc, #72]	; (8002c44 <HAL_TIM_PWM_Start+0x134>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d111      	bne.n	8002c24 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2b06      	cmp	r3, #6
 8002c10:	d010      	beq.n	8002c34 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f042 0201 	orr.w	r2, r2, #1
 8002c20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c22:	e007      	b.n	8002c34 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40012c00 	.word	0x40012c00
 8002c44:	40000400 	.word	0x40000400

08002c48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d122      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d11b      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f06f 0202 	mvn.w	r2, #2
 8002c74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f9af 	bl	8002fee <HAL_TIM_IC_CaptureCallback>
 8002c90:	e005      	b.n	8002c9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f9a2 	bl	8002fdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f9b1 	bl	8003000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	f003 0304 	and.w	r3, r3, #4
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d122      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d11b      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f06f 0204 	mvn.w	r2, #4
 8002cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2202      	movs	r2, #2
 8002cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f985 	bl	8002fee <HAL_TIM_IC_CaptureCallback>
 8002ce4:	e005      	b.n	8002cf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f978 	bl	8002fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f987 	bl	8003000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d122      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f003 0308 	and.w	r3, r3, #8
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d11b      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f06f 0208 	mvn.w	r2, #8
 8002d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2204      	movs	r2, #4
 8002d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f95b 	bl	8002fee <HAL_TIM_IC_CaptureCallback>
 8002d38:	e005      	b.n	8002d46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f94e 	bl	8002fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f95d 	bl	8003000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f003 0310 	and.w	r3, r3, #16
 8002d56:	2b10      	cmp	r3, #16
 8002d58:	d122      	bne.n	8002da0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	2b10      	cmp	r3, #16
 8002d66:	d11b      	bne.n	8002da0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f06f 0210 	mvn.w	r2, #16
 8002d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2208      	movs	r2, #8
 8002d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f931 	bl	8002fee <HAL_TIM_IC_CaptureCallback>
 8002d8c:	e005      	b.n	8002d9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f924 	bl	8002fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f933 	bl	8003000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d10e      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d107      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f06f 0201 	mvn.w	r2, #1
 8002dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7fd fef4 	bl	8000bb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd6:	2b80      	cmp	r3, #128	; 0x80
 8002dd8:	d10e      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de4:	2b80      	cmp	r3, #128	; 0x80
 8002de6:	d107      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 fb7b 	bl	80034ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e02:	2b40      	cmp	r3, #64	; 0x40
 8002e04:	d10e      	bne.n	8002e24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e10:	2b40      	cmp	r3, #64	; 0x40
 8002e12:	d107      	bne.n	8002e24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f8f7 	bl	8003012 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f003 0320 	and.w	r3, r3, #32
 8002e2e:	2b20      	cmp	r3, #32
 8002e30:	d10e      	bne.n	8002e50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f003 0320 	and.w	r3, r3, #32
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d107      	bne.n	8002e50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f06f 0220 	mvn.w	r2, #32
 8002e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 fb46 	bl	80034dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e50:	bf00      	nop
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e0ae      	b.n	8002fd4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b0c      	cmp	r3, #12
 8002e82:	f200 809f 	bhi.w	8002fc4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e86:	a201      	add	r2, pc, #4	; (adr r2, 8002e8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8c:	08002ec1 	.word	0x08002ec1
 8002e90:	08002fc5 	.word	0x08002fc5
 8002e94:	08002fc5 	.word	0x08002fc5
 8002e98:	08002fc5 	.word	0x08002fc5
 8002e9c:	08002f01 	.word	0x08002f01
 8002ea0:	08002fc5 	.word	0x08002fc5
 8002ea4:	08002fc5 	.word	0x08002fc5
 8002ea8:	08002fc5 	.word	0x08002fc5
 8002eac:	08002f43 	.word	0x08002f43
 8002eb0:	08002fc5 	.word	0x08002fc5
 8002eb4:	08002fc5 	.word	0x08002fc5
 8002eb8:	08002fc5 	.word	0x08002fc5
 8002ebc:	08002f83 	.word	0x08002f83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 f904 	bl	80030d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0208 	orr.w	r2, r2, #8
 8002eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699a      	ldr	r2, [r3, #24]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0204 	bic.w	r2, r2, #4
 8002eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6999      	ldr	r1, [r3, #24]
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	691a      	ldr	r2, [r3, #16]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	619a      	str	r2, [r3, #24]
      break;
 8002efe:	e064      	b.n	8002fca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68b9      	ldr	r1, [r7, #8]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 f94a 	bl	80031a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699a      	ldr	r2, [r3, #24]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699a      	ldr	r2, [r3, #24]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6999      	ldr	r1, [r3, #24]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	021a      	lsls	r2, r3, #8
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	619a      	str	r2, [r3, #24]
      break;
 8002f40:	e043      	b.n	8002fca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68b9      	ldr	r1, [r7, #8]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 f993 	bl	8003274 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	69da      	ldr	r2, [r3, #28]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f042 0208 	orr.w	r2, r2, #8
 8002f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	69da      	ldr	r2, [r3, #28]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0204 	bic.w	r2, r2, #4
 8002f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	69d9      	ldr	r1, [r3, #28]
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	691a      	ldr	r2, [r3, #16]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	61da      	str	r2, [r3, #28]
      break;
 8002f80:	e023      	b.n	8002fca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68b9      	ldr	r1, [r7, #8]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 f9dd 	bl	8003348 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	69da      	ldr	r2, [r3, #28]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	69da      	ldr	r2, [r3, #28]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	69d9      	ldr	r1, [r3, #28]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	021a      	lsls	r2, r3, #8
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	61da      	str	r2, [r3, #28]
      break;
 8002fc2:	e002      	b.n	8002fca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8002fc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr

08002fee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr

08003000 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr

08003012 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a25      	ldr	r2, [pc, #148]	; (80030cc <TIM_Base_SetConfig+0xa8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d007      	beq.n	800304c <TIM_Base_SetConfig+0x28>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003042:	d003      	beq.n	800304c <TIM_Base_SetConfig+0x28>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a22      	ldr	r2, [pc, #136]	; (80030d0 <TIM_Base_SetConfig+0xac>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d108      	bne.n	800305e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a1a      	ldr	r2, [pc, #104]	; (80030cc <TIM_Base_SetConfig+0xa8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d007      	beq.n	8003076 <TIM_Base_SetConfig+0x52>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800306c:	d003      	beq.n	8003076 <TIM_Base_SetConfig+0x52>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a17      	ldr	r2, [pc, #92]	; (80030d0 <TIM_Base_SetConfig+0xac>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d108      	bne.n	8003088 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800307c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	4313      	orrs	r3, r2
 8003086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	4313      	orrs	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a07      	ldr	r2, [pc, #28]	; (80030cc <TIM_Base_SetConfig+0xa8>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d103      	bne.n	80030bc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	615a      	str	r2, [r3, #20]
}
 80030c2:	bf00      	nop
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr
 80030cc:	40012c00 	.word	0x40012c00
 80030d0:	40000400 	.word	0x40000400

080030d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	f023 0201 	bic.w	r2, r3, #1
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f023 0303 	bic.w	r3, r3, #3
 800310a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	4313      	orrs	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f023 0302 	bic.w	r3, r3, #2
 800311c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	4313      	orrs	r3, r2
 8003126:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a1c      	ldr	r2, [pc, #112]	; (800319c <TIM_OC1_SetConfig+0xc8>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d10c      	bne.n	800314a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f023 0308 	bic.w	r3, r3, #8
 8003136:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	4313      	orrs	r3, r2
 8003140:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f023 0304 	bic.w	r3, r3, #4
 8003148:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a13      	ldr	r2, [pc, #76]	; (800319c <TIM_OC1_SetConfig+0xc8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d111      	bne.n	8003176 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003158:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003160:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	621a      	str	r2, [r3, #32]
}
 8003190:	bf00      	nop
 8003192:	371c      	adds	r7, #28
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40012c00 	.word	0x40012c00

080031a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f023 0210 	bic.w	r2, r3, #16
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	021b      	lsls	r3, r3, #8
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f023 0320 	bic.w	r3, r3, #32
 80031ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a1d      	ldr	r2, [pc, #116]	; (8003270 <TIM_OC2_SetConfig+0xd0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d10d      	bne.n	800321c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	4313      	orrs	r3, r2
 8003212:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800321a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a14      	ldr	r2, [pc, #80]	; (8003270 <TIM_OC2_SetConfig+0xd0>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d113      	bne.n	800324c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800322a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003232:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4313      	orrs	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	621a      	str	r2, [r3, #32]
}
 8003266:	bf00      	nop
 8003268:	371c      	adds	r7, #28
 800326a:	46bd      	mov	sp, r7
 800326c:	bc80      	pop	{r7}
 800326e:	4770      	bx	lr
 8003270:	40012c00 	.word	0x40012c00

08003274 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f023 0303 	bic.w	r3, r3, #3
 80032aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	021b      	lsls	r3, r3, #8
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a1d      	ldr	r2, [pc, #116]	; (8003344 <TIM_OC3_SetConfig+0xd0>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d10d      	bne.n	80032ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	021b      	lsls	r3, r3, #8
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a14      	ldr	r2, [pc, #80]	; (8003344 <TIM_OC3_SetConfig+0xd0>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d113      	bne.n	800331e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	621a      	str	r2, [r3, #32]
}
 8003338:	bf00      	nop
 800333a:	371c      	adds	r7, #28
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40012c00 	.word	0x40012c00

08003348 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003348:	b480      	push	{r7}
 800334a:	b087      	sub	sp, #28
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800337e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	021b      	lsls	r3, r3, #8
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4313      	orrs	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003392:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	031b      	lsls	r3, r3, #12
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a0f      	ldr	r2, [pc, #60]	; (80033e0 <TIM_OC4_SetConfig+0x98>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d109      	bne.n	80033bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	019b      	lsls	r3, r3, #6
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	621a      	str	r2, [r3, #32]
}
 80033d6:	bf00      	nop
 80033d8:	371c      	adds	r7, #28
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr
 80033e0:	40012c00 	.word	0x40012c00

080033e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b087      	sub	sp, #28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f003 031f 	and.w	r3, r3, #31
 80033f6:	2201      	movs	r2, #1
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6a1a      	ldr	r2, [r3, #32]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	43db      	mvns	r3, r3
 8003406:	401a      	ands	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6a1a      	ldr	r2, [r3, #32]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	f003 031f 	and.w	r3, r3, #31
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	fa01 f303 	lsl.w	r3, r1, r3
 800341c:	431a      	orrs	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	621a      	str	r2, [r3, #32]
}
 8003422:	bf00      	nop
 8003424:	371c      	adds	r7, #28
 8003426:	46bd      	mov	sp, r7
 8003428:	bc80      	pop	{r7}
 800342a:	4770      	bx	lr

0800342c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003440:	2302      	movs	r3, #2
 8003442:	e041      	b.n	80034c8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800346a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4313      	orrs	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a14      	ldr	r2, [pc, #80]	; (80034d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d009      	beq.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003490:	d004      	beq.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a10      	ldr	r2, [pc, #64]	; (80034d8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d10c      	bne.n	80034b6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc80      	pop	{r7}
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40012c00 	.word	0x40012c00
 80034d8:	40000400 	.word	0x40000400

080034dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bc80      	pop	{r7}
 80034ec:	4770      	bx	lr

080034ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr

08003500 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e042      	b.n	8003598 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d106      	bne.n	800352c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7fd fc3e 	bl	8000da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2224      	movs	r2, #36	; 0x24
 8003530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003542:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f92b 	bl	80037a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003558:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695a      	ldr	r2, [r3, #20]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003568:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003578:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2220      	movs	r2, #32
 8003584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08a      	sub	sp, #40	; 0x28
 80035a4:	af02      	add	r7, sp, #8
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	4613      	mov	r3, r2
 80035ae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b20      	cmp	r3, #32
 80035be:	d17c      	bne.n	80036ba <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <HAL_UART_Receive+0x2c>
 80035c6:	88fb      	ldrh	r3, [r7, #6]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e075      	b.n	80036bc <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2222      	movs	r2, #34	; 0x22
 80035da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035e4:	f7fd fd1c 	bl	8001020 <HAL_GetTick>
 80035e8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	88fa      	ldrh	r2, [r7, #6]
 80035ee:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	88fa      	ldrh	r2, [r7, #6]
 80035f4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035fe:	d108      	bne.n	8003612 <HAL_UART_Receive+0x72>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d104      	bne.n	8003612 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003608:	2300      	movs	r3, #0
 800360a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	61bb      	str	r3, [r7, #24]
 8003610:	e003      	b.n	800361a <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003616:	2300      	movs	r3, #0
 8003618:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800361a:	e043      	b.n	80036a4 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	2200      	movs	r2, #0
 8003624:	2120      	movs	r1, #32
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 f84c 	bl	80036c4 <UART_WaitOnFlagUntilTimeout>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e042      	b.n	80036bc <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10c      	bne.n	8003656 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	b29b      	uxth	r3, r3
 8003644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003648:	b29a      	uxth	r2, r3
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	3302      	adds	r3, #2
 8003652:	61bb      	str	r3, [r7, #24]
 8003654:	e01f      	b.n	8003696 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800365e:	d007      	beq.n	8003670 <HAL_UART_Receive+0xd0>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10a      	bne.n	800367e <HAL_UART_Receive+0xde>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d106      	bne.n	800367e <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	b2da      	uxtb	r2, r3
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	701a      	strb	r2, [r3, #0]
 800367c:	e008      	b.n	8003690 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800368a:	b2da      	uxtb	r2, r3
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	3301      	adds	r3, #1
 8003694:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1b6      	bne.n	800361c <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	e000      	b.n	80036bc <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80036ba:	2302      	movs	r3, #2
  }
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3720      	adds	r7, #32
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b090      	sub	sp, #64	; 0x40
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	603b      	str	r3, [r7, #0]
 80036d0:	4613      	mov	r3, r2
 80036d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d4:	e050      	b.n	8003778 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036dc:	d04c      	beq.n	8003778 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d007      	beq.n	80036f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80036e4:	f7fd fc9c 	bl	8001020 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d241      	bcs.n	8003778 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	330c      	adds	r3, #12
 80036fa:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fe:	e853 3f00 	ldrex	r3, [r3]
 8003702:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800370a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	330c      	adds	r3, #12
 8003712:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003714:	637a      	str	r2, [r7, #52]	; 0x34
 8003716:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003718:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800371a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800371c:	e841 2300 	strex	r3, r2, [r1]
 8003720:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1e5      	bne.n	80036f4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3314      	adds	r3, #20
 800372e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	e853 3f00 	ldrex	r3, [r3]
 8003736:	613b      	str	r3, [r7, #16]
   return(result);
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f023 0301 	bic.w	r3, r3, #1
 800373e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3314      	adds	r3, #20
 8003746:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003748:	623a      	str	r2, [r7, #32]
 800374a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374c:	69f9      	ldr	r1, [r7, #28]
 800374e:	6a3a      	ldr	r2, [r7, #32]
 8003750:	e841 2300 	strex	r3, r2, [r1]
 8003754:	61bb      	str	r3, [r7, #24]
   return(result);
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1e5      	bne.n	8003728 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e00f      	b.n	8003798 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	4013      	ands	r3, r2
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	429a      	cmp	r2, r3
 8003786:	bf0c      	ite	eq
 8003788:	2301      	moveq	r3, #1
 800378a:	2300      	movne	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	461a      	mov	r2, r3
 8003790:	79fb      	ldrb	r3, [r7, #7]
 8003792:	429a      	cmp	r2, r3
 8003794:	d09f      	beq.n	80036d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3740      	adds	r7, #64	; 0x40
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80037da:	f023 030c 	bic.w	r3, r3, #12
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6812      	ldr	r2, [r2, #0]
 80037e2:	68b9      	ldr	r1, [r7, #8]
 80037e4:	430b      	orrs	r3, r1
 80037e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699a      	ldr	r2, [r3, #24]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a2c      	ldr	r2, [pc, #176]	; (80038b4 <UART_SetConfig+0x114>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d103      	bne.n	8003810 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003808:	f7fe faa4 	bl	8001d54 <HAL_RCC_GetPCLK2Freq>
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	e002      	b.n	8003816 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003810:	f7fe fa8c 	bl	8001d2c <HAL_RCC_GetPCLK1Freq>
 8003814:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4613      	mov	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	009a      	lsls	r2, r3, #2
 8003820:	441a      	add	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	fbb2 f3f3 	udiv	r3, r2, r3
 800382c:	4a22      	ldr	r2, [pc, #136]	; (80038b8 <UART_SetConfig+0x118>)
 800382e:	fba2 2303 	umull	r2, r3, r2, r3
 8003832:	095b      	lsrs	r3, r3, #5
 8003834:	0119      	lsls	r1, r3, #4
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	4613      	mov	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	009a      	lsls	r2, r3, #2
 8003840:	441a      	add	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	fbb2 f2f3 	udiv	r2, r2, r3
 800384c:	4b1a      	ldr	r3, [pc, #104]	; (80038b8 <UART_SetConfig+0x118>)
 800384e:	fba3 0302 	umull	r0, r3, r3, r2
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	2064      	movs	r0, #100	; 0x64
 8003856:	fb00 f303 	mul.w	r3, r0, r3
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	3332      	adds	r3, #50	; 0x32
 8003860:	4a15      	ldr	r2, [pc, #84]	; (80038b8 <UART_SetConfig+0x118>)
 8003862:	fba2 2303 	umull	r2, r3, r2, r3
 8003866:	095b      	lsrs	r3, r3, #5
 8003868:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800386c:	4419      	add	r1, r3
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4613      	mov	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	009a      	lsls	r2, r3, #2
 8003878:	441a      	add	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	fbb2 f2f3 	udiv	r2, r2, r3
 8003884:	4b0c      	ldr	r3, [pc, #48]	; (80038b8 <UART_SetConfig+0x118>)
 8003886:	fba3 0302 	umull	r0, r3, r3, r2
 800388a:	095b      	lsrs	r3, r3, #5
 800388c:	2064      	movs	r0, #100	; 0x64
 800388e:	fb00 f303 	mul.w	r3, r0, r3
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	3332      	adds	r3, #50	; 0x32
 8003898:	4a07      	ldr	r2, [pc, #28]	; (80038b8 <UART_SetConfig+0x118>)
 800389a:	fba2 2303 	umull	r2, r3, r2, r3
 800389e:	095b      	lsrs	r3, r3, #5
 80038a0:	f003 020f 	and.w	r2, r3, #15
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	440a      	add	r2, r1
 80038aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80038ac:	bf00      	nop
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40013800 	.word	0x40013800
 80038b8:	51eb851f 	.word	0x51eb851f

080038bc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038c2:	f3ef 8305 	mrs	r3, IPSR
 80038c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80038c8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10f      	bne.n	80038ee <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ce:	f3ef 8310 	mrs	r3, PRIMASK
 80038d2:	607b      	str	r3, [r7, #4]
  return(result);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d109      	bne.n	80038ee <osKernelInitialize+0x32>
 80038da:	4b10      	ldr	r3, [pc, #64]	; (800391c <osKernelInitialize+0x60>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d109      	bne.n	80038f6 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80038e2:	f3ef 8311 	mrs	r3, BASEPRI
 80038e6:	603b      	str	r3, [r7, #0]
  return(result);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80038ee:	f06f 0305 	mvn.w	r3, #5
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	e00c      	b.n	8003910 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80038f6:	4b09      	ldr	r3, [pc, #36]	; (800391c <osKernelInitialize+0x60>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d105      	bne.n	800390a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80038fe:	4b07      	ldr	r3, [pc, #28]	; (800391c <osKernelInitialize+0x60>)
 8003900:	2201      	movs	r2, #1
 8003902:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003904:	2300      	movs	r3, #0
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	e002      	b.n	8003910 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800390a:	f04f 33ff 	mov.w	r3, #4294967295
 800390e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003910:	68fb      	ldr	r3, [r7, #12]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr
 800391c:	200001fc 	.word	0x200001fc

08003920 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003926:	f3ef 8305 	mrs	r3, IPSR
 800392a:	60bb      	str	r3, [r7, #8]
  return(result);
 800392c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10f      	bne.n	8003952 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003932:	f3ef 8310 	mrs	r3, PRIMASK
 8003936:	607b      	str	r3, [r7, #4]
  return(result);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <osKernelStart+0x32>
 800393e:	4b11      	ldr	r3, [pc, #68]	; (8003984 <osKernelStart+0x64>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d109      	bne.n	800395a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003946:	f3ef 8311 	mrs	r3, BASEPRI
 800394a:	603b      	str	r3, [r7, #0]
  return(result);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003952:	f06f 0305 	mvn.w	r3, #5
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	e00e      	b.n	8003978 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800395a:	4b0a      	ldr	r3, [pc, #40]	; (8003984 <osKernelStart+0x64>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d107      	bne.n	8003972 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003962:	4b08      	ldr	r3, [pc, #32]	; (8003984 <osKernelStart+0x64>)
 8003964:	2202      	movs	r2, #2
 8003966:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003968:	f001 f878 	bl	8004a5c <vTaskStartScheduler>
      stat = osOK;
 800396c:	2300      	movs	r3, #0
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	e002      	b.n	8003978 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003972:	f04f 33ff 	mov.w	r3, #4294967295
 8003976:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003978:	68fb      	ldr	r3, [r7, #12]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	200001fc 	.word	0x200001fc

08003988 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003988:	b580      	push	{r7, lr}
 800398a:	b092      	sub	sp, #72	; 0x48
 800398c:	af04      	add	r7, sp, #16
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003998:	f3ef 8305 	mrs	r3, IPSR
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f040 8094 	bne.w	8003ace <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039a6:	f3ef 8310 	mrs	r3, PRIMASK
 80039aa:	623b      	str	r3, [r7, #32]
  return(result);
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f040 808d 	bne.w	8003ace <osThreadNew+0x146>
 80039b4:	4b48      	ldr	r3, [pc, #288]	; (8003ad8 <osThreadNew+0x150>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d106      	bne.n	80039ca <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80039bc:	f3ef 8311 	mrs	r3, BASEPRI
 80039c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f040 8082 	bne.w	8003ace <osThreadNew+0x146>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d07e      	beq.n	8003ace <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80039d0:	2380      	movs	r3, #128	; 0x80
 80039d2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80039d4:	2318      	movs	r3, #24
 80039d6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80039d8:	2300      	movs	r3, #0
 80039da:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80039dc:	f107 031b 	add.w	r3, r7, #27
 80039e0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80039e2:	f04f 33ff 	mov.w	r3, #4294967295
 80039e6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d045      	beq.n	8003a7a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d002      	beq.n	80039fc <osThreadNew+0x74>
        name = attr->name;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <osThreadNew+0x9a>
 8003a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a12:	2b38      	cmp	r3, #56	; 0x38
 8003a14:	d805      	bhi.n	8003a22 <osThreadNew+0x9a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <osThreadNew+0x9e>
        return (NULL);
 8003a22:	2300      	movs	r3, #0
 8003a24:	e054      	b.n	8003ad0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	089b      	lsrs	r3, r3, #2
 8003a34:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00e      	beq.n	8003a5c <osThreadNew+0xd4>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	2b5b      	cmp	r3, #91	; 0x5b
 8003a44:	d90a      	bls.n	8003a5c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d006      	beq.n	8003a5c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <osThreadNew+0xd4>
        mem = 1;
 8003a56:	2301      	movs	r3, #1
 8003a58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a5a:	e010      	b.n	8003a7e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10c      	bne.n	8003a7e <osThreadNew+0xf6>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d108      	bne.n	8003a7e <osThreadNew+0xf6>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d104      	bne.n	8003a7e <osThreadNew+0xf6>
          mem = 0;
 8003a74:	2300      	movs	r3, #0
 8003a76:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a78:	e001      	b.n	8003a7e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d110      	bne.n	8003aa6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a8c:	9202      	str	r2, [sp, #8]
 8003a8e:	9301      	str	r3, [sp, #4]
 8003a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a98:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 fe12 	bl	80046c4 <xTaskCreateStatic>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	e013      	b.n	8003ace <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d110      	bne.n	8003ace <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	f107 0314 	add.w	r3, r7, #20
 8003ab4:	9301      	str	r3, [sp, #4]
 8003ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 fe5c 	bl	800477c <xTaskCreate>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d001      	beq.n	8003ace <osThreadNew+0x146>
          hTask = NULL;
 8003aca:	2300      	movs	r3, #0
 8003acc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003ace:	697b      	ldr	r3, [r7, #20]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3738      	adds	r7, #56	; 0x38
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	200001fc 	.word	0x200001fc

08003adc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ae4:	f3ef 8305 	mrs	r3, IPSR
 8003ae8:	613b      	str	r3, [r7, #16]
  return(result);
 8003aea:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10f      	bne.n	8003b10 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003af0:	f3ef 8310 	mrs	r3, PRIMASK
 8003af4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d109      	bne.n	8003b10 <osDelay+0x34>
 8003afc:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <osDelay+0x58>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d109      	bne.n	8003b18 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b04:	f3ef 8311 	mrs	r3, BASEPRI
 8003b08:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <osDelay+0x3c>
    stat = osErrorISR;
 8003b10:	f06f 0305 	mvn.w	r3, #5
 8003b14:	617b      	str	r3, [r7, #20]
 8003b16:	e007      	b.n	8003b28 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 ff66 	bl	80049f4 <vTaskDelay>
    }
  }

  return (stat);
 8003b28:	697b      	ldr	r3, [r7, #20]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	200001fc 	.word	0x200001fc

08003b38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4a06      	ldr	r2, [pc, #24]	; (8003b60 <vApplicationGetIdleTaskMemory+0x28>)
 8003b48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	4a05      	ldr	r2, [pc, #20]	; (8003b64 <vApplicationGetIdleTaskMemory+0x2c>)
 8003b4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2280      	movs	r2, #128	; 0x80
 8003b54:	601a      	str	r2, [r3, #0]
}
 8003b56:	bf00      	nop
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr
 8003b60:	20000200 	.word	0x20000200
 8003b64:	2000025c 	.word	0x2000025c

08003b68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4a07      	ldr	r2, [pc, #28]	; (8003b94 <vApplicationGetTimerTaskMemory+0x2c>)
 8003b78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	4a06      	ldr	r2, [pc, #24]	; (8003b98 <vApplicationGetTimerTaskMemory+0x30>)
 8003b7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b86:	601a      	str	r2, [r3, #0]
}
 8003b88:	bf00      	nop
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	2000045c 	.word	0x2000045c
 8003b98:	200004b8 	.word	0x200004b8

08003b9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f103 0208 	add.w	r2, r3, #8
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f103 0208 	add.w	r2, r3, #8
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f103 0208 	add.w	r2, r3, #8
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bc80      	pop	{r7}
 8003bd8:	4770      	bx	lr

08003bda <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bc80      	pop	{r7}
 8003bf0:	4770      	bx	lr

08003bf2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b085      	sub	sp, #20
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	601a      	str	r2, [r3, #0]
}
 8003c2e:	bf00      	nop
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr

08003c38 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4e:	d103      	bne.n	8003c58 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	e00c      	b.n	8003c72 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3308      	adds	r3, #8
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	e002      	b.n	8003c66 <vListInsert+0x2e>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d2f6      	bcs.n	8003c60 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	1c5a      	adds	r2, r3, #1
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	601a      	str	r2, [r3, #0]
}
 8003c9e:	bf00      	nop
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bc80      	pop	{r7}
 8003ca6:	4770      	bx	lr

08003ca8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6892      	ldr	r2, [r2, #8]
 8003cbe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6852      	ldr	r2, [r2, #4]
 8003cc8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d103      	bne.n	8003cdc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	1e5a      	subs	r2, r3, #1
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bc80      	pop	{r7}
 8003cf8:	4770      	bx	lr
	...

08003cfc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10a      	bne.n	8003d26 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d14:	f383 8811 	msr	BASEPRI, r3
 8003d18:	f3bf 8f6f 	isb	sy
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d22:	bf00      	nop
 8003d24:	e7fe      	b.n	8003d24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003d26:	f001 ffc9 	bl	8005cbc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d32:	68f9      	ldr	r1, [r7, #12]
 8003d34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d36:	fb01 f303 	mul.w	r3, r1, r3
 8003d3a:	441a      	add	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d56:	3b01      	subs	r3, #1
 8003d58:	68f9      	ldr	r1, [r7, #12]
 8003d5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d5c:	fb01 f303 	mul.w	r3, r1, r3
 8003d60:	441a      	add	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	22ff      	movs	r2, #255	; 0xff
 8003d6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	22ff      	movs	r2, #255	; 0xff
 8003d72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d114      	bne.n	8003da6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d01a      	beq.n	8003dba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	3310      	adds	r3, #16
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f001 f8f1 	bl	8004f70 <xTaskRemoveFromEventList>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d012      	beq.n	8003dba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003d94:	4b0c      	ldr	r3, [pc, #48]	; (8003dc8 <xQueueGenericReset+0xcc>)
 8003d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	f3bf 8f6f 	isb	sy
 8003da4:	e009      	b.n	8003dba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	3310      	adds	r3, #16
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff fef6 	bl	8003b9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	3324      	adds	r3, #36	; 0x24
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff fef1 	bl	8003b9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003dba:	f001 ffaf 	bl	8005d1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003dbe:	2301      	movs	r3, #1
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	e000ed04 	.word	0xe000ed04

08003dcc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b08e      	sub	sp, #56	; 0x38
 8003dd0:	af02      	add	r7, sp, #8
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10a      	bne.n	8003df6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003df2:	bf00      	nop
 8003df4:	e7fe      	b.n	8003df4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10a      	bne.n	8003e12 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e00:	f383 8811 	msr	BASEPRI, r3
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e0e:	bf00      	nop
 8003e10:	e7fe      	b.n	8003e10 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <xQueueGenericCreateStatic+0x52>
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <xQueueGenericCreateStatic+0x56>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <xQueueGenericCreateStatic+0x58>
 8003e22:	2300      	movs	r3, #0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10a      	bne.n	8003e3e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2c:	f383 8811 	msr	BASEPRI, r3
 8003e30:	f3bf 8f6f 	isb	sy
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	623b      	str	r3, [r7, #32]
}
 8003e3a:	bf00      	nop
 8003e3c:	e7fe      	b.n	8003e3c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d102      	bne.n	8003e4a <xQueueGenericCreateStatic+0x7e>
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <xQueueGenericCreateStatic+0x82>
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e000      	b.n	8003e50 <xQueueGenericCreateStatic+0x84>
 8003e4e:	2300      	movs	r3, #0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10a      	bne.n	8003e6a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e58:	f383 8811 	msr	BASEPRI, r3
 8003e5c:	f3bf 8f6f 	isb	sy
 8003e60:	f3bf 8f4f 	dsb	sy
 8003e64:	61fb      	str	r3, [r7, #28]
}
 8003e66:	bf00      	nop
 8003e68:	e7fe      	b.n	8003e68 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003e6a:	2350      	movs	r3, #80	; 0x50
 8003e6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	2b50      	cmp	r3, #80	; 0x50
 8003e72:	d00a      	beq.n	8003e8a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e78:	f383 8811 	msr	BASEPRI, r3
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	61bb      	str	r3, [r7, #24]
}
 8003e86:	bf00      	nop
 8003e88:	e7fe      	b.n	8003e88 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00d      	beq.n	8003eb0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e9c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	68b9      	ldr	r1, [r7, #8]
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f805 	bl	8003eba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3730      	adds	r7, #48	; 0x30
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b084      	sub	sp, #16
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	60f8      	str	r0, [r7, #12]
 8003ec2:	60b9      	str	r1, [r7, #8]
 8003ec4:	607a      	str	r2, [r7, #4]
 8003ec6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d103      	bne.n	8003ed6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	e002      	b.n	8003edc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ee8:	2101      	movs	r1, #1
 8003eea:	69b8      	ldr	r0, [r7, #24]
 8003eec:	f7ff ff06 	bl	8003cfc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	78fa      	ldrb	r2, [r7, #3]
 8003ef4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003ef8:	bf00      	nop
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08e      	sub	sp, #56	; 0x38
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
 8003f0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10a      	bne.n	8003f32 <xQueueGenericSend+0x32>
	__asm volatile
 8003f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f20:	f383 8811 	msr	BASEPRI, r3
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003f2e:	bf00      	nop
 8003f30:	e7fe      	b.n	8003f30 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d103      	bne.n	8003f40 <xQueueGenericSend+0x40>
 8003f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <xQueueGenericSend+0x44>
 8003f40:	2301      	movs	r3, #1
 8003f42:	e000      	b.n	8003f46 <xQueueGenericSend+0x46>
 8003f44:	2300      	movs	r3, #0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10a      	bne.n	8003f60 <xQueueGenericSend+0x60>
	__asm volatile
 8003f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4e:	f383 8811 	msr	BASEPRI, r3
 8003f52:	f3bf 8f6f 	isb	sy
 8003f56:	f3bf 8f4f 	dsb	sy
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f5c:	bf00      	nop
 8003f5e:	e7fe      	b.n	8003f5e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d103      	bne.n	8003f6e <xQueueGenericSend+0x6e>
 8003f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d101      	bne.n	8003f72 <xQueueGenericSend+0x72>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e000      	b.n	8003f74 <xQueueGenericSend+0x74>
 8003f72:	2300      	movs	r3, #0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10a      	bne.n	8003f8e <xQueueGenericSend+0x8e>
	__asm volatile
 8003f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7c:	f383 8811 	msr	BASEPRI, r3
 8003f80:	f3bf 8f6f 	isb	sy
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	623b      	str	r3, [r7, #32]
}
 8003f8a:	bf00      	nop
 8003f8c:	e7fe      	b.n	8003f8c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f8e:	f001 f9b1 	bl	80052f4 <xTaskGetSchedulerState>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d102      	bne.n	8003f9e <xQueueGenericSend+0x9e>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <xQueueGenericSend+0xa2>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e000      	b.n	8003fa4 <xQueueGenericSend+0xa4>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10a      	bne.n	8003fbe <xQueueGenericSend+0xbe>
	__asm volatile
 8003fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fac:	f383 8811 	msr	BASEPRI, r3
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	61fb      	str	r3, [r7, #28]
}
 8003fba:	bf00      	nop
 8003fbc:	e7fe      	b.n	8003fbc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003fbe:	f001 fe7d 	bl	8005cbc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d302      	bcc.n	8003fd4 <xQueueGenericSend+0xd4>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d129      	bne.n	8004028 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	68b9      	ldr	r1, [r7, #8]
 8003fd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fda:	f000 fa07 	bl	80043ec <prvCopyDataToQueue>
 8003fde:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d010      	beq.n	800400a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fea:	3324      	adds	r3, #36	; 0x24
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 ffbf 	bl	8004f70 <xTaskRemoveFromEventList>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d013      	beq.n	8004020 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ff8:	4b3f      	ldr	r3, [pc, #252]	; (80040f8 <xQueueGenericSend+0x1f8>)
 8003ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	f3bf 8f6f 	isb	sy
 8004008:	e00a      	b.n	8004020 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800400a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400c:	2b00      	cmp	r3, #0
 800400e:	d007      	beq.n	8004020 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004010:	4b39      	ldr	r3, [pc, #228]	; (80040f8 <xQueueGenericSend+0x1f8>)
 8004012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004020:	f001 fe7c 	bl	8005d1c <vPortExitCritical>
				return pdPASS;
 8004024:	2301      	movs	r3, #1
 8004026:	e063      	b.n	80040f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d103      	bne.n	8004036 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800402e:	f001 fe75 	bl	8005d1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004032:	2300      	movs	r3, #0
 8004034:	e05c      	b.n	80040f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004038:	2b00      	cmp	r3, #0
 800403a:	d106      	bne.n	800404a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800403c:	f107 0314 	add.w	r3, r7, #20
 8004040:	4618      	mov	r0, r3
 8004042:	f000 fff9 	bl	8005038 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004046:	2301      	movs	r3, #1
 8004048:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800404a:	f001 fe67 	bl	8005d1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800404e:	f000 fd6b 	bl	8004b28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004052:	f001 fe33 	bl	8005cbc <vPortEnterCritical>
 8004056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004058:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800405c:	b25b      	sxtb	r3, r3
 800405e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004062:	d103      	bne.n	800406c <xQueueGenericSend+0x16c>
 8004064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800406c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004072:	b25b      	sxtb	r3, r3
 8004074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004078:	d103      	bne.n	8004082 <xQueueGenericSend+0x182>
 800407a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004082:	f001 fe4b 	bl	8005d1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004086:	1d3a      	adds	r2, r7, #4
 8004088:	f107 0314 	add.w	r3, r7, #20
 800408c:	4611      	mov	r1, r2
 800408e:	4618      	mov	r0, r3
 8004090:	f000 ffe8 	bl	8005064 <xTaskCheckForTimeOut>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d124      	bne.n	80040e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800409a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800409c:	f000 fa9e 	bl	80045dc <prvIsQueueFull>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d018      	beq.n	80040d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80040a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a8:	3310      	adds	r3, #16
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	4611      	mov	r1, r2
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 ff0e 	bl	8004ed0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80040b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040b6:	f000 fa29 	bl	800450c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80040ba:	f000 fd43 	bl	8004b44 <xTaskResumeAll>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f47f af7c 	bne.w	8003fbe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80040c6:	4b0c      	ldr	r3, [pc, #48]	; (80040f8 <xQueueGenericSend+0x1f8>)
 80040c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	e772      	b.n	8003fbe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80040d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040da:	f000 fa17 	bl	800450c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040de:	f000 fd31 	bl	8004b44 <xTaskResumeAll>
 80040e2:	e76c      	b.n	8003fbe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80040e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040e6:	f000 fa11 	bl	800450c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040ea:	f000 fd2b 	bl	8004b44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80040ee:	2300      	movs	r3, #0
		}
	}
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3738      	adds	r7, #56	; 0x38
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	e000ed04 	.word	0xe000ed04

080040fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b08e      	sub	sp, #56	; 0x38
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
 8004108:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800410e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10a      	bne.n	800412a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004126:	bf00      	nop
 8004128:	e7fe      	b.n	8004128 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d103      	bne.n	8004138 <xQueueGenericSendFromISR+0x3c>
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <xQueueGenericSendFromISR+0x40>
 8004138:	2301      	movs	r3, #1
 800413a:	e000      	b.n	800413e <xQueueGenericSendFromISR+0x42>
 800413c:	2300      	movs	r3, #0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10a      	bne.n	8004158 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	623b      	str	r3, [r7, #32]
}
 8004154:	bf00      	nop
 8004156:	e7fe      	b.n	8004156 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	2b02      	cmp	r3, #2
 800415c:	d103      	bne.n	8004166 <xQueueGenericSendFromISR+0x6a>
 800415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004162:	2b01      	cmp	r3, #1
 8004164:	d101      	bne.n	800416a <xQueueGenericSendFromISR+0x6e>
 8004166:	2301      	movs	r3, #1
 8004168:	e000      	b.n	800416c <xQueueGenericSendFromISR+0x70>
 800416a:	2300      	movs	r3, #0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10a      	bne.n	8004186 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	61fb      	str	r3, [r7, #28]
}
 8004182:	bf00      	nop
 8004184:	e7fe      	b.n	8004184 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004186:	f001 fe5b 	bl	8005e40 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800418a:	f3ef 8211 	mrs	r2, BASEPRI
 800418e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	61ba      	str	r2, [r7, #24]
 80041a0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80041a2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80041a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d302      	bcc.n	80041b8 <xQueueGenericSendFromISR+0xbc>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d12c      	bne.n	8004212 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80041b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	68b9      	ldr	r1, [r7, #8]
 80041c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041c8:	f000 f910 	bl	80043ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80041cc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80041d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d4:	d112      	bne.n	80041fc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d016      	beq.n	800420c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e0:	3324      	adds	r3, #36	; 0x24
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 fec4 	bl	8004f70 <xTaskRemoveFromEventList>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00e      	beq.n	800420c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00b      	beq.n	800420c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	e007      	b.n	800420c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80041fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004200:	3301      	adds	r3, #1
 8004202:	b2db      	uxtb	r3, r3
 8004204:	b25a      	sxtb	r2, r3
 8004206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800420c:	2301      	movs	r3, #1
 800420e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004210:	e001      	b.n	8004216 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004212:	2300      	movs	r3, #0
 8004214:	637b      	str	r3, [r7, #52]	; 0x34
 8004216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004218:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004220:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004224:	4618      	mov	r0, r3
 8004226:	3738      	adds	r7, #56	; 0x38
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b08c      	sub	sp, #48	; 0x30
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004238:	2300      	movs	r3, #0
 800423a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10a      	bne.n	800425c <xQueueReceive+0x30>
	__asm volatile
 8004246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424a:	f383 8811 	msr	BASEPRI, r3
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	f3bf 8f4f 	dsb	sy
 8004256:	623b      	str	r3, [r7, #32]
}
 8004258:	bf00      	nop
 800425a:	e7fe      	b.n	800425a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d103      	bne.n	800426a <xQueueReceive+0x3e>
 8004262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <xQueueReceive+0x42>
 800426a:	2301      	movs	r3, #1
 800426c:	e000      	b.n	8004270 <xQueueReceive+0x44>
 800426e:	2300      	movs	r3, #0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10a      	bne.n	800428a <xQueueReceive+0x5e>
	__asm volatile
 8004274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004278:	f383 8811 	msr	BASEPRI, r3
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	61fb      	str	r3, [r7, #28]
}
 8004286:	bf00      	nop
 8004288:	e7fe      	b.n	8004288 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800428a:	f001 f833 	bl	80052f4 <xTaskGetSchedulerState>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d102      	bne.n	800429a <xQueueReceive+0x6e>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <xQueueReceive+0x72>
 800429a:	2301      	movs	r3, #1
 800429c:	e000      	b.n	80042a0 <xQueueReceive+0x74>
 800429e:	2300      	movs	r3, #0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10a      	bne.n	80042ba <xQueueReceive+0x8e>
	__asm volatile
 80042a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a8:	f383 8811 	msr	BASEPRI, r3
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	61bb      	str	r3, [r7, #24]
}
 80042b6:	bf00      	nop
 80042b8:	e7fe      	b.n	80042b8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80042ba:	f001 fcff 	bl	8005cbc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d01f      	beq.n	800430a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80042ca:	68b9      	ldr	r1, [r7, #8]
 80042cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042ce:	f000 f8f7 	bl	80044c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	1e5a      	subs	r2, r3, #1
 80042d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00f      	beq.n	8004302 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e4:	3310      	adds	r3, #16
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fe42 	bl	8004f70 <xTaskRemoveFromEventList>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d007      	beq.n	8004302 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80042f2:	4b3d      	ldr	r3, [pc, #244]	; (80043e8 <xQueueReceive+0x1bc>)
 80042f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004302:	f001 fd0b 	bl	8005d1c <vPortExitCritical>
				return pdPASS;
 8004306:	2301      	movs	r3, #1
 8004308:	e069      	b.n	80043de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d103      	bne.n	8004318 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004310:	f001 fd04 	bl	8005d1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004314:	2300      	movs	r3, #0
 8004316:	e062      	b.n	80043de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431a:	2b00      	cmp	r3, #0
 800431c:	d106      	bne.n	800432c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800431e:	f107 0310 	add.w	r3, r7, #16
 8004322:	4618      	mov	r0, r3
 8004324:	f000 fe88 	bl	8005038 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004328:	2301      	movs	r3, #1
 800432a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800432c:	f001 fcf6 	bl	8005d1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004330:	f000 fbfa 	bl	8004b28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004334:	f001 fcc2 	bl	8005cbc <vPortEnterCritical>
 8004338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800433e:	b25b      	sxtb	r3, r3
 8004340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004344:	d103      	bne.n	800434e <xQueueReceive+0x122>
 8004346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800434e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004350:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004354:	b25b      	sxtb	r3, r3
 8004356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435a:	d103      	bne.n	8004364 <xQueueReceive+0x138>
 800435c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004364:	f001 fcda 	bl	8005d1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004368:	1d3a      	adds	r2, r7, #4
 800436a:	f107 0310 	add.w	r3, r7, #16
 800436e:	4611      	mov	r1, r2
 8004370:	4618      	mov	r0, r3
 8004372:	f000 fe77 	bl	8005064 <xTaskCheckForTimeOut>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d123      	bne.n	80043c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800437c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800437e:	f000 f917 	bl	80045b0 <prvIsQueueEmpty>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d017      	beq.n	80043b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438a:	3324      	adds	r3, #36	; 0x24
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	4611      	mov	r1, r2
 8004390:	4618      	mov	r0, r3
 8004392:	f000 fd9d 	bl	8004ed0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004398:	f000 f8b8 	bl	800450c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800439c:	f000 fbd2 	bl	8004b44 <xTaskResumeAll>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d189      	bne.n	80042ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80043a6:	4b10      	ldr	r3, [pc, #64]	; (80043e8 <xQueueReceive+0x1bc>)
 80043a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	e780      	b.n	80042ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80043b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043ba:	f000 f8a7 	bl	800450c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043be:	f000 fbc1 	bl	8004b44 <xTaskResumeAll>
 80043c2:	e77a      	b.n	80042ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80043c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043c6:	f000 f8a1 	bl	800450c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043ca:	f000 fbbb 	bl	8004b44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043d0:	f000 f8ee 	bl	80045b0 <prvIsQueueEmpty>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f43f af6f 	beq.w	80042ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80043dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3730      	adds	r7, #48	; 0x30
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	e000ed04 	.word	0xe000ed04

080043ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004400:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10d      	bne.n	8004426 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d14d      	bne.n	80044ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	4618      	mov	r0, r3
 8004418:	f000 ff8a 	bl	8005330 <xTaskPriorityDisinherit>
 800441c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	605a      	str	r2, [r3, #4]
 8004424:	e043      	b.n	80044ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d119      	bne.n	8004460 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6898      	ldr	r0, [r3, #8]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004434:	461a      	mov	r2, r3
 8004436:	68b9      	ldr	r1, [r7, #8]
 8004438:	f001 ff46 	bl	80062c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	441a      	add	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	689a      	ldr	r2, [r3, #8]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	429a      	cmp	r2, r3
 8004454:	d32b      	bcc.n	80044ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	609a      	str	r2, [r3, #8]
 800445e:	e026      	b.n	80044ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	68d8      	ldr	r0, [r3, #12]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004468:	461a      	mov	r2, r3
 800446a:	68b9      	ldr	r1, [r7, #8]
 800446c:	f001 ff2c 	bl	80062c8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	68da      	ldr	r2, [r3, #12]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	425b      	negs	r3, r3
 800447a:	441a      	add	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d207      	bcs.n	800449c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	425b      	negs	r3, r3
 8004496:	441a      	add	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d105      	bne.n	80044ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1c5a      	adds	r2, r3, #1
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80044b6:	697b      	ldr	r3, [r7, #20]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d018      	beq.n	8004504 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	441a      	add	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68da      	ldr	r2, [r3, #12]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d303      	bcc.n	80044f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68d9      	ldr	r1, [r3, #12]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	461a      	mov	r2, r3
 80044fe:	6838      	ldr	r0, [r7, #0]
 8004500:	f001 fee2 	bl	80062c8 <memcpy>
	}
}
 8004504:	bf00      	nop
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004514:	f001 fbd2 	bl	8005cbc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800451e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004520:	e011      	b.n	8004546 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	2b00      	cmp	r3, #0
 8004528:	d012      	beq.n	8004550 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3324      	adds	r3, #36	; 0x24
 800452e:	4618      	mov	r0, r3
 8004530:	f000 fd1e 	bl	8004f70 <xTaskRemoveFromEventList>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800453a:	f000 fdf5 	bl	8005128 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800453e:	7bfb      	ldrb	r3, [r7, #15]
 8004540:	3b01      	subs	r3, #1
 8004542:	b2db      	uxtb	r3, r3
 8004544:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800454a:	2b00      	cmp	r3, #0
 800454c:	dce9      	bgt.n	8004522 <prvUnlockQueue+0x16>
 800454e:	e000      	b.n	8004552 <prvUnlockQueue+0x46>
					break;
 8004550:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	22ff      	movs	r2, #255	; 0xff
 8004556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800455a:	f001 fbdf 	bl	8005d1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800455e:	f001 fbad 	bl	8005cbc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004568:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800456a:	e011      	b.n	8004590 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d012      	beq.n	800459a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3310      	adds	r3, #16
 8004578:	4618      	mov	r0, r3
 800457a:	f000 fcf9 	bl	8004f70 <xTaskRemoveFromEventList>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004584:	f000 fdd0 	bl	8005128 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004588:	7bbb      	ldrb	r3, [r7, #14]
 800458a:	3b01      	subs	r3, #1
 800458c:	b2db      	uxtb	r3, r3
 800458e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004594:	2b00      	cmp	r3, #0
 8004596:	dce9      	bgt.n	800456c <prvUnlockQueue+0x60>
 8004598:	e000      	b.n	800459c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800459a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	22ff      	movs	r2, #255	; 0xff
 80045a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80045a4:	f001 fbba 	bl	8005d1c <vPortExitCritical>
}
 80045a8:	bf00      	nop
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045b8:	f001 fb80 	bl	8005cbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d102      	bne.n	80045ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80045c4:	2301      	movs	r3, #1
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	e001      	b.n	80045ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80045ca:	2300      	movs	r3, #0
 80045cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045ce:	f001 fba5 	bl	8005d1c <vPortExitCritical>

	return xReturn;
 80045d2:	68fb      	ldr	r3, [r7, #12]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045e4:	f001 fb6a 	bl	8005cbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d102      	bne.n	80045fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80045f4:	2301      	movs	r3, #1
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	e001      	b.n	80045fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80045fa:	2300      	movs	r3, #0
 80045fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045fe:	f001 fb8d 	bl	8005d1c <vPortExitCritical>

	return xReturn;
 8004602:	68fb      	ldr	r3, [r7, #12]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004616:	2300      	movs	r3, #0
 8004618:	60fb      	str	r3, [r7, #12]
 800461a:	e014      	b.n	8004646 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800461c:	4a0e      	ldr	r2, [pc, #56]	; (8004658 <vQueueAddToRegistry+0x4c>)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10b      	bne.n	8004640 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004628:	490b      	ldr	r1, [pc, #44]	; (8004658 <vQueueAddToRegistry+0x4c>)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004632:	4a09      	ldr	r2, [pc, #36]	; (8004658 <vQueueAddToRegistry+0x4c>)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	4413      	add	r3, r2
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800463e:	e006      	b.n	800464e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	3301      	adds	r3, #1
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2b07      	cmp	r3, #7
 800464a:	d9e7      	bls.n	800461c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800464c:	bf00      	nop
 800464e:	bf00      	nop
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr
 8004658:	200008b8 	.word	0x200008b8

0800465c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800466c:	f001 fb26 	bl	8005cbc <vPortEnterCritical>
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004676:	b25b      	sxtb	r3, r3
 8004678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467c:	d103      	bne.n	8004686 <vQueueWaitForMessageRestricted+0x2a>
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800468c:	b25b      	sxtb	r3, r3
 800468e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004692:	d103      	bne.n	800469c <vQueueWaitForMessageRestricted+0x40>
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800469c:	f001 fb3e 	bl	8005d1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d106      	bne.n	80046b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	3324      	adds	r3, #36	; 0x24
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	68b9      	ldr	r1, [r7, #8]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 fc31 	bl	8004f18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80046b6:	6978      	ldr	r0, [r7, #20]
 80046b8:	f7ff ff28 	bl	800450c <prvUnlockQueue>
	}
 80046bc:	bf00      	nop
 80046be:	3718      	adds	r7, #24
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b08e      	sub	sp, #56	; 0x38
 80046c8:	af04      	add	r7, sp, #16
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
 80046d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80046d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10a      	bne.n	80046ee <xTaskCreateStatic+0x2a>
	__asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	623b      	str	r3, [r7, #32]
}
 80046ea:	bf00      	nop
 80046ec:	e7fe      	b.n	80046ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80046ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10a      	bne.n	800470a <xTaskCreateStatic+0x46>
	__asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	61fb      	str	r3, [r7, #28]
}
 8004706:	bf00      	nop
 8004708:	e7fe      	b.n	8004708 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800470a:	235c      	movs	r3, #92	; 0x5c
 800470c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	2b5c      	cmp	r3, #92	; 0x5c
 8004712:	d00a      	beq.n	800472a <xTaskCreateStatic+0x66>
	__asm volatile
 8004714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	61bb      	str	r3, [r7, #24]
}
 8004726:	bf00      	nop
 8004728:	e7fe      	b.n	8004728 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800472a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472c:	2b00      	cmp	r3, #0
 800472e:	d01e      	beq.n	800476e <xTaskCreateStatic+0xaa>
 8004730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004732:	2b00      	cmp	r3, #0
 8004734:	d01b      	beq.n	800476e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800473e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	2202      	movs	r2, #2
 8004744:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004748:	2300      	movs	r3, #0
 800474a:	9303      	str	r3, [sp, #12]
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	9302      	str	r3, [sp, #8]
 8004750:	f107 0314 	add.w	r3, r7, #20
 8004754:	9301      	str	r3, [sp, #4]
 8004756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	68b9      	ldr	r1, [r7, #8]
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 f850 	bl	8004806 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004766:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004768:	f000 f8d4 	bl	8004914 <prvAddNewTaskToReadyList>
 800476c:	e001      	b.n	8004772 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800476e:	2300      	movs	r3, #0
 8004770:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004772:	697b      	ldr	r3, [r7, #20]
	}
 8004774:	4618      	mov	r0, r3
 8004776:	3728      	adds	r7, #40	; 0x28
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08c      	sub	sp, #48	; 0x30
 8004780:	af04      	add	r7, sp, #16
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	603b      	str	r3, [r7, #0]
 8004788:	4613      	mov	r3, r2
 800478a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800478c:	88fb      	ldrh	r3, [r7, #6]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4618      	mov	r0, r3
 8004792:	f001 fb93 	bl	8005ebc <pvPortMalloc>
 8004796:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00e      	beq.n	80047bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800479e:	205c      	movs	r0, #92	; 0x5c
 80047a0:	f001 fb8c 	bl	8005ebc <pvPortMalloc>
 80047a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	631a      	str	r2, [r3, #48]	; 0x30
 80047b2:	e005      	b.n	80047c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80047b4:	6978      	ldr	r0, [r7, #20]
 80047b6:	f001 fc45 	bl	8006044 <vPortFree>
 80047ba:	e001      	b.n	80047c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80047bc:	2300      	movs	r3, #0
 80047be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d017      	beq.n	80047f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80047ce:	88fa      	ldrh	r2, [r7, #6]
 80047d0:	2300      	movs	r3, #0
 80047d2:	9303      	str	r3, [sp, #12]
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	9302      	str	r3, [sp, #8]
 80047d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047da:	9301      	str	r3, [sp, #4]
 80047dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	68b9      	ldr	r1, [r7, #8]
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 f80e 	bl	8004806 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047ea:	69f8      	ldr	r0, [r7, #28]
 80047ec:	f000 f892 	bl	8004914 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80047f0:	2301      	movs	r3, #1
 80047f2:	61bb      	str	r3, [r7, #24]
 80047f4:	e002      	b.n	80047fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80047f6:	f04f 33ff 	mov.w	r3, #4294967295
 80047fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80047fc:	69bb      	ldr	r3, [r7, #24]
	}
 80047fe:	4618      	mov	r0, r3
 8004800:	3720      	adds	r7, #32
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b088      	sub	sp, #32
 800480a:	af00      	add	r7, sp, #0
 800480c:	60f8      	str	r0, [r7, #12]
 800480e:	60b9      	str	r1, [r7, #8]
 8004810:	607a      	str	r2, [r7, #4]
 8004812:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004816:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	461a      	mov	r2, r3
 800481e:	21a5      	movs	r1, #165	; 0xa5
 8004820:	f001 fd60 	bl	80062e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004826:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800482e:	3b01      	subs	r3, #1
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	f023 0307 	bic.w	r3, r3, #7
 800483c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00a      	beq.n	800485e <prvInitialiseNewTask+0x58>
	__asm volatile
 8004848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484c:	f383 8811 	msr	BASEPRI, r3
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	617b      	str	r3, [r7, #20]
}
 800485a:	bf00      	nop
 800485c:	e7fe      	b.n	800485c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800485e:	2300      	movs	r3, #0
 8004860:	61fb      	str	r3, [r7, #28]
 8004862:	e012      	b.n	800488a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	4413      	add	r3, r2
 800486a:	7819      	ldrb	r1, [r3, #0]
 800486c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	4413      	add	r3, r2
 8004872:	3334      	adds	r3, #52	; 0x34
 8004874:	460a      	mov	r2, r1
 8004876:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	4413      	add	r3, r2
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d006      	beq.n	8004892 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	3301      	adds	r3, #1
 8004888:	61fb      	str	r3, [r7, #28]
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	2b0f      	cmp	r3, #15
 800488e:	d9e9      	bls.n	8004864 <prvInitialiseNewTask+0x5e>
 8004890:	e000      	b.n	8004894 <prvInitialiseNewTask+0x8e>
		{
			break;
 8004892:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004896:	2200      	movs	r2, #0
 8004898:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800489c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489e:	2b37      	cmp	r3, #55	; 0x37
 80048a0:	d901      	bls.n	80048a6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80048a2:	2337      	movs	r3, #55	; 0x37
 80048a4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80048a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048aa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80048ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048b0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80048b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b4:	2200      	movs	r2, #0
 80048b6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80048b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ba:	3304      	adds	r3, #4
 80048bc:	4618      	mov	r0, r3
 80048be:	f7ff f98c 	bl	8003bda <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80048c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c4:	3318      	adds	r3, #24
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7ff f987 	bl	8003bda <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80048cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80048d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80048dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048e0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80048e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e4:	2200      	movs	r2, #0
 80048e6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80048e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	68f9      	ldr	r1, [r7, #12]
 80048f4:	69b8      	ldr	r0, [r7, #24]
 80048f6:	f001 f8ef 	bl	8005ad8 <pxPortInitialiseStack>
 80048fa:	4602      	mov	r2, r0
 80048fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fe:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800490a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800490c:	bf00      	nop
 800490e:	3720      	adds	r7, #32
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800491c:	f001 f9ce 	bl	8005cbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004920:	4b2d      	ldr	r3, [pc, #180]	; (80049d8 <prvAddNewTaskToReadyList+0xc4>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3301      	adds	r3, #1
 8004926:	4a2c      	ldr	r2, [pc, #176]	; (80049d8 <prvAddNewTaskToReadyList+0xc4>)
 8004928:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800492a:	4b2c      	ldr	r3, [pc, #176]	; (80049dc <prvAddNewTaskToReadyList+0xc8>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d109      	bne.n	8004946 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004932:	4a2a      	ldr	r2, [pc, #168]	; (80049dc <prvAddNewTaskToReadyList+0xc8>)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004938:	4b27      	ldr	r3, [pc, #156]	; (80049d8 <prvAddNewTaskToReadyList+0xc4>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d110      	bne.n	8004962 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004940:	f000 fc16 	bl	8005170 <prvInitialiseTaskLists>
 8004944:	e00d      	b.n	8004962 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004946:	4b26      	ldr	r3, [pc, #152]	; (80049e0 <prvAddNewTaskToReadyList+0xcc>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d109      	bne.n	8004962 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800494e:	4b23      	ldr	r3, [pc, #140]	; (80049dc <prvAddNewTaskToReadyList+0xc8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004958:	429a      	cmp	r2, r3
 800495a:	d802      	bhi.n	8004962 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800495c:	4a1f      	ldr	r2, [pc, #124]	; (80049dc <prvAddNewTaskToReadyList+0xc8>)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004962:	4b20      	ldr	r3, [pc, #128]	; (80049e4 <prvAddNewTaskToReadyList+0xd0>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	3301      	adds	r3, #1
 8004968:	4a1e      	ldr	r2, [pc, #120]	; (80049e4 <prvAddNewTaskToReadyList+0xd0>)
 800496a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800496c:	4b1d      	ldr	r3, [pc, #116]	; (80049e4 <prvAddNewTaskToReadyList+0xd0>)
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004978:	4b1b      	ldr	r3, [pc, #108]	; (80049e8 <prvAddNewTaskToReadyList+0xd4>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	429a      	cmp	r2, r3
 800497e:	d903      	bls.n	8004988 <prvAddNewTaskToReadyList+0x74>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	4a18      	ldr	r2, [pc, #96]	; (80049e8 <prvAddNewTaskToReadyList+0xd4>)
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800498c:	4613      	mov	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4a15      	ldr	r2, [pc, #84]	; (80049ec <prvAddNewTaskToReadyList+0xd8>)
 8004996:	441a      	add	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	3304      	adds	r3, #4
 800499c:	4619      	mov	r1, r3
 800499e:	4610      	mov	r0, r2
 80049a0:	f7ff f927 	bl	8003bf2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80049a4:	f001 f9ba 	bl	8005d1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80049a8:	4b0d      	ldr	r3, [pc, #52]	; (80049e0 <prvAddNewTaskToReadyList+0xcc>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00e      	beq.n	80049ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80049b0:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <prvAddNewTaskToReadyList+0xc8>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d207      	bcs.n	80049ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80049be:	4b0c      	ldr	r3, [pc, #48]	; (80049f0 <prvAddNewTaskToReadyList+0xdc>)
 80049c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049ce:	bf00      	nop
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20000dcc 	.word	0x20000dcc
 80049dc:	200008f8 	.word	0x200008f8
 80049e0:	20000dd8 	.word	0x20000dd8
 80049e4:	20000de8 	.word	0x20000de8
 80049e8:	20000dd4 	.word	0x20000dd4
 80049ec:	200008fc 	.word	0x200008fc
 80049f0:	e000ed04 	.word	0xe000ed04

080049f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80049fc:	2300      	movs	r3, #0
 80049fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d017      	beq.n	8004a36 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004a06:	4b13      	ldr	r3, [pc, #76]	; (8004a54 <vTaskDelay+0x60>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <vTaskDelay+0x30>
	__asm volatile
 8004a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a12:	f383 8811 	msr	BASEPRI, r3
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	60bb      	str	r3, [r7, #8]
}
 8004a20:	bf00      	nop
 8004a22:	e7fe      	b.n	8004a22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004a24:	f000 f880 	bl	8004b28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a28:	2100      	movs	r1, #0
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 fcee 	bl	800540c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004a30:	f000 f888 	bl	8004b44 <xTaskResumeAll>
 8004a34:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d107      	bne.n	8004a4c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004a3c:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <vTaskDelay+0x64>)
 8004a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a4c:	bf00      	nop
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	20000df4 	.word	0x20000df4
 8004a58:	e000ed04 	.word	0xe000ed04

08004a5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b08a      	sub	sp, #40	; 0x28
 8004a60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004a62:	2300      	movs	r3, #0
 8004a64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004a66:	2300      	movs	r3, #0
 8004a68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a6a:	463a      	mov	r2, r7
 8004a6c:	1d39      	adds	r1, r7, #4
 8004a6e:	f107 0308 	add.w	r3, r7, #8
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff f860 	bl	8003b38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a78:	6839      	ldr	r1, [r7, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	9202      	str	r2, [sp, #8]
 8004a80:	9301      	str	r3, [sp, #4]
 8004a82:	2300      	movs	r3, #0
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	2300      	movs	r3, #0
 8004a88:	460a      	mov	r2, r1
 8004a8a:	4921      	ldr	r1, [pc, #132]	; (8004b10 <vTaskStartScheduler+0xb4>)
 8004a8c:	4821      	ldr	r0, [pc, #132]	; (8004b14 <vTaskStartScheduler+0xb8>)
 8004a8e:	f7ff fe19 	bl	80046c4 <xTaskCreateStatic>
 8004a92:	4603      	mov	r3, r0
 8004a94:	4a20      	ldr	r2, [pc, #128]	; (8004b18 <vTaskStartScheduler+0xbc>)
 8004a96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a98:	4b1f      	ldr	r3, [pc, #124]	; (8004b18 <vTaskStartScheduler+0xbc>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d002      	beq.n	8004aa6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	617b      	str	r3, [r7, #20]
 8004aa4:	e001      	b.n	8004aaa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d102      	bne.n	8004ab6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004ab0:	f000 fd00 	bl	80054b4 <xTimerCreateTimerTask>
 8004ab4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d116      	bne.n	8004aea <vTaskStartScheduler+0x8e>
	__asm volatile
 8004abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	613b      	str	r3, [r7, #16]
}
 8004ace:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ad0:	4b12      	ldr	r3, [pc, #72]	; (8004b1c <vTaskStartScheduler+0xc0>)
 8004ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ad6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ad8:	4b11      	ldr	r3, [pc, #68]	; (8004b20 <vTaskStartScheduler+0xc4>)
 8004ada:	2201      	movs	r2, #1
 8004adc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004ade:	4b11      	ldr	r3, [pc, #68]	; (8004b24 <vTaskStartScheduler+0xc8>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ae4:	f001 f878 	bl	8005bd8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ae8:	e00e      	b.n	8004b08 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af0:	d10a      	bne.n	8004b08 <vTaskStartScheduler+0xac>
	__asm volatile
 8004af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af6:	f383 8811 	msr	BASEPRI, r3
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	60fb      	str	r3, [r7, #12]
}
 8004b04:	bf00      	nop
 8004b06:	e7fe      	b.n	8004b06 <vTaskStartScheduler+0xaa>
}
 8004b08:	bf00      	nop
 8004b0a:	3718      	adds	r7, #24
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	08006428 	.word	0x08006428
 8004b14:	08005141 	.word	0x08005141
 8004b18:	20000df0 	.word	0x20000df0
 8004b1c:	20000dec 	.word	0x20000dec
 8004b20:	20000dd8 	.word	0x20000dd8
 8004b24:	20000dd0 	.word	0x20000dd0

08004b28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004b2c:	4b04      	ldr	r3, [pc, #16]	; (8004b40 <vTaskSuspendAll+0x18>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3301      	adds	r3, #1
 8004b32:	4a03      	ldr	r2, [pc, #12]	; (8004b40 <vTaskSuspendAll+0x18>)
 8004b34:	6013      	str	r3, [r2, #0]
}
 8004b36:	bf00      	nop
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bc80      	pop	{r7}
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	20000df4 	.word	0x20000df4

08004b44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b52:	4b42      	ldr	r3, [pc, #264]	; (8004c5c <xTaskResumeAll+0x118>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10a      	bne.n	8004b70 <xTaskResumeAll+0x2c>
	__asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	603b      	str	r3, [r7, #0]
}
 8004b6c:	bf00      	nop
 8004b6e:	e7fe      	b.n	8004b6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b70:	f001 f8a4 	bl	8005cbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b74:	4b39      	ldr	r3, [pc, #228]	; (8004c5c <xTaskResumeAll+0x118>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	4a38      	ldr	r2, [pc, #224]	; (8004c5c <xTaskResumeAll+0x118>)
 8004b7c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b7e:	4b37      	ldr	r3, [pc, #220]	; (8004c5c <xTaskResumeAll+0x118>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d162      	bne.n	8004c4c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b86:	4b36      	ldr	r3, [pc, #216]	; (8004c60 <xTaskResumeAll+0x11c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d05e      	beq.n	8004c4c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b8e:	e02f      	b.n	8004bf0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004b90:	4b34      	ldr	r3, [pc, #208]	; (8004c64 <xTaskResumeAll+0x120>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	3318      	adds	r3, #24
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff f883 	bl	8003ca8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7ff f87e 	bl	8003ca8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb0:	4b2d      	ldr	r3, [pc, #180]	; (8004c68 <xTaskResumeAll+0x124>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d903      	bls.n	8004bc0 <xTaskResumeAll+0x7c>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbc:	4a2a      	ldr	r2, [pc, #168]	; (8004c68 <xTaskResumeAll+0x124>)
 8004bbe:	6013      	str	r3, [r2, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4a27      	ldr	r2, [pc, #156]	; (8004c6c <xTaskResumeAll+0x128>)
 8004bce:	441a      	add	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	4610      	mov	r0, r2
 8004bd8:	f7ff f80b 	bl	8003bf2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be0:	4b23      	ldr	r3, [pc, #140]	; (8004c70 <xTaskResumeAll+0x12c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d302      	bcc.n	8004bf0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004bea:	4b22      	ldr	r3, [pc, #136]	; (8004c74 <xTaskResumeAll+0x130>)
 8004bec:	2201      	movs	r2, #1
 8004bee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bf0:	4b1c      	ldr	r3, [pc, #112]	; (8004c64 <xTaskResumeAll+0x120>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1cb      	bne.n	8004b90 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004bfe:	f000 fb55 	bl	80052ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004c02:	4b1d      	ldr	r3, [pc, #116]	; (8004c78 <xTaskResumeAll+0x134>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d010      	beq.n	8004c30 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c0e:	f000 f845 	bl	8004c9c <xTaskIncrementTick>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004c18:	4b16      	ldr	r3, [pc, #88]	; (8004c74 <xTaskResumeAll+0x130>)
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	3b01      	subs	r3, #1
 8004c22:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1f1      	bne.n	8004c0e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004c2a:	4b13      	ldr	r3, [pc, #76]	; (8004c78 <xTaskResumeAll+0x134>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c30:	4b10      	ldr	r3, [pc, #64]	; (8004c74 <xTaskResumeAll+0x130>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d009      	beq.n	8004c4c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c3c:	4b0f      	ldr	r3, [pc, #60]	; (8004c7c <xTaskResumeAll+0x138>)
 8004c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c4c:	f001 f866 	bl	8005d1c <vPortExitCritical>

	return xAlreadyYielded;
 8004c50:	68bb      	ldr	r3, [r7, #8]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20000df4 	.word	0x20000df4
 8004c60:	20000dcc 	.word	0x20000dcc
 8004c64:	20000d8c 	.word	0x20000d8c
 8004c68:	20000dd4 	.word	0x20000dd4
 8004c6c:	200008fc 	.word	0x200008fc
 8004c70:	200008f8 	.word	0x200008f8
 8004c74:	20000de0 	.word	0x20000de0
 8004c78:	20000ddc 	.word	0x20000ddc
 8004c7c:	e000ed04 	.word	0xe000ed04

08004c80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004c86:	4b04      	ldr	r3, [pc, #16]	; (8004c98 <xTaskGetTickCount+0x18>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004c8c:	687b      	ldr	r3, [r7, #4]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bc80      	pop	{r7}
 8004c96:	4770      	bx	lr
 8004c98:	20000dd0 	.word	0x20000dd0

08004c9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ca6:	4b51      	ldr	r3, [pc, #324]	; (8004dec <xTaskIncrementTick+0x150>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f040 808e 	bne.w	8004dcc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004cb0:	4b4f      	ldr	r3, [pc, #316]	; (8004df0 <xTaskIncrementTick+0x154>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004cb8:	4a4d      	ldr	r2, [pc, #308]	; (8004df0 <xTaskIncrementTick+0x154>)
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d120      	bne.n	8004d06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004cc4:	4b4b      	ldr	r3, [pc, #300]	; (8004df4 <xTaskIncrementTick+0x158>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00a      	beq.n	8004ce4 <xTaskIncrementTick+0x48>
	__asm volatile
 8004cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	603b      	str	r3, [r7, #0]
}
 8004ce0:	bf00      	nop
 8004ce2:	e7fe      	b.n	8004ce2 <xTaskIncrementTick+0x46>
 8004ce4:	4b43      	ldr	r3, [pc, #268]	; (8004df4 <xTaskIncrementTick+0x158>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	4b43      	ldr	r3, [pc, #268]	; (8004df8 <xTaskIncrementTick+0x15c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a41      	ldr	r2, [pc, #260]	; (8004df4 <xTaskIncrementTick+0x158>)
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	4a41      	ldr	r2, [pc, #260]	; (8004df8 <xTaskIncrementTick+0x15c>)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	4b40      	ldr	r3, [pc, #256]	; (8004dfc <xTaskIncrementTick+0x160>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	4a3f      	ldr	r2, [pc, #252]	; (8004dfc <xTaskIncrementTick+0x160>)
 8004d00:	6013      	str	r3, [r2, #0]
 8004d02:	f000 fad3 	bl	80052ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d06:	4b3e      	ldr	r3, [pc, #248]	; (8004e00 <xTaskIncrementTick+0x164>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d34e      	bcc.n	8004dae <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d10:	4b38      	ldr	r3, [pc, #224]	; (8004df4 <xTaskIncrementTick+0x158>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <xTaskIncrementTick+0x82>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e000      	b.n	8004d20 <xTaskIncrementTick+0x84>
 8004d1e:	2300      	movs	r3, #0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d004      	beq.n	8004d2e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d24:	4b36      	ldr	r3, [pc, #216]	; (8004e00 <xTaskIncrementTick+0x164>)
 8004d26:	f04f 32ff 	mov.w	r2, #4294967295
 8004d2a:	601a      	str	r2, [r3, #0]
					break;
 8004d2c:	e03f      	b.n	8004dae <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004d2e:	4b31      	ldr	r3, [pc, #196]	; (8004df4 <xTaskIncrementTick+0x158>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d203      	bcs.n	8004d4e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d46:	4a2e      	ldr	r2, [pc, #184]	; (8004e00 <xTaskIncrementTick+0x164>)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6013      	str	r3, [r2, #0]
						break;
 8004d4c:	e02f      	b.n	8004dae <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	3304      	adds	r3, #4
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fe ffa8 	bl	8003ca8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d004      	beq.n	8004d6a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	3318      	adds	r3, #24
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7fe ff9f 	bl	8003ca8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d6e:	4b25      	ldr	r3, [pc, #148]	; (8004e04 <xTaskIncrementTick+0x168>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d903      	bls.n	8004d7e <xTaskIncrementTick+0xe2>
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7a:	4a22      	ldr	r2, [pc, #136]	; (8004e04 <xTaskIncrementTick+0x168>)
 8004d7c:	6013      	str	r3, [r2, #0]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d82:	4613      	mov	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4a1f      	ldr	r2, [pc, #124]	; (8004e08 <xTaskIncrementTick+0x16c>)
 8004d8c:	441a      	add	r2, r3
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	3304      	adds	r3, #4
 8004d92:	4619      	mov	r1, r3
 8004d94:	4610      	mov	r0, r2
 8004d96:	f7fe ff2c 	bl	8003bf2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d9e:	4b1b      	ldr	r3, [pc, #108]	; (8004e0c <xTaskIncrementTick+0x170>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d3b3      	bcc.n	8004d10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004da8:	2301      	movs	r3, #1
 8004daa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dac:	e7b0      	b.n	8004d10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004dae:	4b17      	ldr	r3, [pc, #92]	; (8004e0c <xTaskIncrementTick+0x170>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db4:	4914      	ldr	r1, [pc, #80]	; (8004e08 <xTaskIncrementTick+0x16c>)
 8004db6:	4613      	mov	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	440b      	add	r3, r1
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d907      	bls.n	8004dd6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	617b      	str	r3, [r7, #20]
 8004dca:	e004      	b.n	8004dd6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004dcc:	4b10      	ldr	r3, [pc, #64]	; (8004e10 <xTaskIncrementTick+0x174>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	4a0f      	ldr	r2, [pc, #60]	; (8004e10 <xTaskIncrementTick+0x174>)
 8004dd4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004dd6:	4b0f      	ldr	r3, [pc, #60]	; (8004e14 <xTaskIncrementTick+0x178>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004dde:	2301      	movs	r3, #1
 8004de0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004de2:	697b      	ldr	r3, [r7, #20]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3718      	adds	r7, #24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	20000df4 	.word	0x20000df4
 8004df0:	20000dd0 	.word	0x20000dd0
 8004df4:	20000d84 	.word	0x20000d84
 8004df8:	20000d88 	.word	0x20000d88
 8004dfc:	20000de4 	.word	0x20000de4
 8004e00:	20000dec 	.word	0x20000dec
 8004e04:	20000dd4 	.word	0x20000dd4
 8004e08:	200008fc 	.word	0x200008fc
 8004e0c:	200008f8 	.word	0x200008f8
 8004e10:	20000ddc 	.word	0x20000ddc
 8004e14:	20000de0 	.word	0x20000de0

08004e18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e1e:	4b27      	ldr	r3, [pc, #156]	; (8004ebc <vTaskSwitchContext+0xa4>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e26:	4b26      	ldr	r3, [pc, #152]	; (8004ec0 <vTaskSwitchContext+0xa8>)
 8004e28:	2201      	movs	r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e2c:	e041      	b.n	8004eb2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004e2e:	4b24      	ldr	r3, [pc, #144]	; (8004ec0 <vTaskSwitchContext+0xa8>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004e34:	4b23      	ldr	r3, [pc, #140]	; (8004ec4 <vTaskSwitchContext+0xac>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	60fb      	str	r3, [r7, #12]
 8004e3a:	e010      	b.n	8004e5e <vTaskSwitchContext+0x46>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10a      	bne.n	8004e58 <vTaskSwitchContext+0x40>
	__asm volatile
 8004e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e46:	f383 8811 	msr	BASEPRI, r3
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	607b      	str	r3, [r7, #4]
}
 8004e54:	bf00      	nop
 8004e56:	e7fe      	b.n	8004e56 <vTaskSwitchContext+0x3e>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	491a      	ldr	r1, [pc, #104]	; (8004ec8 <vTaskSwitchContext+0xb0>)
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	4613      	mov	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	440b      	add	r3, r1
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0e4      	beq.n	8004e3c <vTaskSwitchContext+0x24>
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	4613      	mov	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4a12      	ldr	r2, [pc, #72]	; (8004ec8 <vTaskSwitchContext+0xb0>)
 8004e7e:	4413      	add	r3, r2
 8004e80:	60bb      	str	r3, [r7, #8]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	605a      	str	r2, [r3, #4]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	3308      	adds	r3, #8
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d104      	bne.n	8004ea2 <vTaskSwitchContext+0x8a>
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	605a      	str	r2, [r3, #4]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	4a08      	ldr	r2, [pc, #32]	; (8004ecc <vTaskSwitchContext+0xb4>)
 8004eaa:	6013      	str	r3, [r2, #0]
 8004eac:	4a05      	ldr	r2, [pc, #20]	; (8004ec4 <vTaskSwitchContext+0xac>)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6013      	str	r3, [r2, #0]
}
 8004eb2:	bf00      	nop
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr
 8004ebc:	20000df4 	.word	0x20000df4
 8004ec0:	20000de0 	.word	0x20000de0
 8004ec4:	20000dd4 	.word	0x20000dd4
 8004ec8:	200008fc 	.word	0x200008fc
 8004ecc:	200008f8 	.word	0x200008f8

08004ed0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10a      	bne.n	8004ef6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	60fb      	str	r3, [r7, #12]
}
 8004ef2:	bf00      	nop
 8004ef4:	e7fe      	b.n	8004ef4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ef6:	4b07      	ldr	r3, [pc, #28]	; (8004f14 <vTaskPlaceOnEventList+0x44>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3318      	adds	r3, #24
 8004efc:	4619      	mov	r1, r3
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7fe fe9a 	bl	8003c38 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f04:	2101      	movs	r1, #1
 8004f06:	6838      	ldr	r0, [r7, #0]
 8004f08:	f000 fa80 	bl	800540c <prvAddCurrentTaskToDelayedList>
}
 8004f0c:	bf00      	nop
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	200008f8 	.word	0x200008f8

08004f18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10a      	bne.n	8004f40 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2e:	f383 8811 	msr	BASEPRI, r3
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	617b      	str	r3, [r7, #20]
}
 8004f3c:	bf00      	nop
 8004f3e:	e7fe      	b.n	8004f3e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f40:	4b0a      	ldr	r3, [pc, #40]	; (8004f6c <vTaskPlaceOnEventListRestricted+0x54>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	3318      	adds	r3, #24
 8004f46:	4619      	mov	r1, r3
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f7fe fe52 	bl	8003bf2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004f54:	f04f 33ff 	mov.w	r3, #4294967295
 8004f58:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004f5a:	6879      	ldr	r1, [r7, #4]
 8004f5c:	68b8      	ldr	r0, [r7, #8]
 8004f5e:	f000 fa55 	bl	800540c <prvAddCurrentTaskToDelayedList>
	}
 8004f62:	bf00      	nop
 8004f64:	3718      	adds	r7, #24
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	200008f8 	.word	0x200008f8

08004f70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10a      	bne.n	8004f9c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8a:	f383 8811 	msr	BASEPRI, r3
 8004f8e:	f3bf 8f6f 	isb	sy
 8004f92:	f3bf 8f4f 	dsb	sy
 8004f96:	60fb      	str	r3, [r7, #12]
}
 8004f98:	bf00      	nop
 8004f9a:	e7fe      	b.n	8004f9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	3318      	adds	r3, #24
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fe fe81 	bl	8003ca8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fa6:	4b1e      	ldr	r3, [pc, #120]	; (8005020 <xTaskRemoveFromEventList+0xb0>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d11d      	bne.n	8004fea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	3304      	adds	r3, #4
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fe fe78 	bl	8003ca8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fbc:	4b19      	ldr	r3, [pc, #100]	; (8005024 <xTaskRemoveFromEventList+0xb4>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d903      	bls.n	8004fcc <xTaskRemoveFromEventList+0x5c>
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc8:	4a16      	ldr	r2, [pc, #88]	; (8005024 <xTaskRemoveFromEventList+0xb4>)
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4a13      	ldr	r2, [pc, #76]	; (8005028 <xTaskRemoveFromEventList+0xb8>)
 8004fda:	441a      	add	r2, r3
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	3304      	adds	r3, #4
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	f7fe fe05 	bl	8003bf2 <vListInsertEnd>
 8004fe8:	e005      	b.n	8004ff6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	3318      	adds	r3, #24
 8004fee:	4619      	mov	r1, r3
 8004ff0:	480e      	ldr	r0, [pc, #56]	; (800502c <xTaskRemoveFromEventList+0xbc>)
 8004ff2:	f7fe fdfe 	bl	8003bf2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ffa:	4b0d      	ldr	r3, [pc, #52]	; (8005030 <xTaskRemoveFromEventList+0xc0>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	429a      	cmp	r2, r3
 8005002:	d905      	bls.n	8005010 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005004:	2301      	movs	r3, #1
 8005006:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005008:	4b0a      	ldr	r3, [pc, #40]	; (8005034 <xTaskRemoveFromEventList+0xc4>)
 800500a:	2201      	movs	r2, #1
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	e001      	b.n	8005014 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005010:	2300      	movs	r3, #0
 8005012:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005014:	697b      	ldr	r3, [r7, #20]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3718      	adds	r7, #24
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	20000df4 	.word	0x20000df4
 8005024:	20000dd4 	.word	0x20000dd4
 8005028:	200008fc 	.word	0x200008fc
 800502c:	20000d8c 	.word	0x20000d8c
 8005030:	200008f8 	.word	0x200008f8
 8005034:	20000de0 	.word	0x20000de0

08005038 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005040:	4b06      	ldr	r3, [pc, #24]	; (800505c <vTaskInternalSetTimeOutState+0x24>)
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005048:	4b05      	ldr	r3, [pc, #20]	; (8005060 <vTaskInternalSetTimeOutState+0x28>)
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	605a      	str	r2, [r3, #4]
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	bc80      	pop	{r7}
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	20000de4 	.word	0x20000de4
 8005060:	20000dd0 	.word	0x20000dd0

08005064 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b088      	sub	sp, #32
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10a      	bne.n	800508a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	613b      	str	r3, [r7, #16]
}
 8005086:	bf00      	nop
 8005088:	e7fe      	b.n	8005088 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10a      	bne.n	80050a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005094:	f383 8811 	msr	BASEPRI, r3
 8005098:	f3bf 8f6f 	isb	sy
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	60fb      	str	r3, [r7, #12]
}
 80050a2:	bf00      	nop
 80050a4:	e7fe      	b.n	80050a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80050a6:	f000 fe09 	bl	8005cbc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80050aa:	4b1d      	ldr	r3, [pc, #116]	; (8005120 <xTaskCheckForTimeOut+0xbc>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c2:	d102      	bne.n	80050ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80050c4:	2300      	movs	r3, #0
 80050c6:	61fb      	str	r3, [r7, #28]
 80050c8:	e023      	b.n	8005112 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	4b15      	ldr	r3, [pc, #84]	; (8005124 <xTaskCheckForTimeOut+0xc0>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d007      	beq.n	80050e6 <xTaskCheckForTimeOut+0x82>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d302      	bcc.n	80050e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80050e0:	2301      	movs	r3, #1
 80050e2:	61fb      	str	r3, [r7, #28]
 80050e4:	e015      	b.n	8005112 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d20b      	bcs.n	8005108 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	1ad2      	subs	r2, r2, r3
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f7ff ff9b 	bl	8005038 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005102:	2300      	movs	r3, #0
 8005104:	61fb      	str	r3, [r7, #28]
 8005106:	e004      	b.n	8005112 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2200      	movs	r2, #0
 800510c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800510e:	2301      	movs	r3, #1
 8005110:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005112:	f000 fe03 	bl	8005d1c <vPortExitCritical>

	return xReturn;
 8005116:	69fb      	ldr	r3, [r7, #28]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3720      	adds	r7, #32
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	20000dd0 	.word	0x20000dd0
 8005124:	20000de4 	.word	0x20000de4

08005128 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005128:	b480      	push	{r7}
 800512a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800512c:	4b03      	ldr	r3, [pc, #12]	; (800513c <vTaskMissedYield+0x14>)
 800512e:	2201      	movs	r2, #1
 8005130:	601a      	str	r2, [r3, #0]
}
 8005132:	bf00      	nop
 8005134:	46bd      	mov	sp, r7
 8005136:	bc80      	pop	{r7}
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	20000de0 	.word	0x20000de0

08005140 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005148:	f000 f852 	bl	80051f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800514c:	4b06      	ldr	r3, [pc, #24]	; (8005168 <prvIdleTask+0x28>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d9f9      	bls.n	8005148 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005154:	4b05      	ldr	r3, [pc, #20]	; (800516c <prvIdleTask+0x2c>)
 8005156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005164:	e7f0      	b.n	8005148 <prvIdleTask+0x8>
 8005166:	bf00      	nop
 8005168:	200008fc 	.word	0x200008fc
 800516c:	e000ed04 	.word	0xe000ed04

08005170 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005176:	2300      	movs	r3, #0
 8005178:	607b      	str	r3, [r7, #4]
 800517a:	e00c      	b.n	8005196 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	4613      	mov	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4a12      	ldr	r2, [pc, #72]	; (80051d0 <prvInitialiseTaskLists+0x60>)
 8005188:	4413      	add	r3, r2
 800518a:	4618      	mov	r0, r3
 800518c:	f7fe fd06 	bl	8003b9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3301      	adds	r3, #1
 8005194:	607b      	str	r3, [r7, #4]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b37      	cmp	r3, #55	; 0x37
 800519a:	d9ef      	bls.n	800517c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800519c:	480d      	ldr	r0, [pc, #52]	; (80051d4 <prvInitialiseTaskLists+0x64>)
 800519e:	f7fe fcfd 	bl	8003b9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80051a2:	480d      	ldr	r0, [pc, #52]	; (80051d8 <prvInitialiseTaskLists+0x68>)
 80051a4:	f7fe fcfa 	bl	8003b9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80051a8:	480c      	ldr	r0, [pc, #48]	; (80051dc <prvInitialiseTaskLists+0x6c>)
 80051aa:	f7fe fcf7 	bl	8003b9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80051ae:	480c      	ldr	r0, [pc, #48]	; (80051e0 <prvInitialiseTaskLists+0x70>)
 80051b0:	f7fe fcf4 	bl	8003b9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80051b4:	480b      	ldr	r0, [pc, #44]	; (80051e4 <prvInitialiseTaskLists+0x74>)
 80051b6:	f7fe fcf1 	bl	8003b9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80051ba:	4b0b      	ldr	r3, [pc, #44]	; (80051e8 <prvInitialiseTaskLists+0x78>)
 80051bc:	4a05      	ldr	r2, [pc, #20]	; (80051d4 <prvInitialiseTaskLists+0x64>)
 80051be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80051c0:	4b0a      	ldr	r3, [pc, #40]	; (80051ec <prvInitialiseTaskLists+0x7c>)
 80051c2:	4a05      	ldr	r2, [pc, #20]	; (80051d8 <prvInitialiseTaskLists+0x68>)
 80051c4:	601a      	str	r2, [r3, #0]
}
 80051c6:	bf00      	nop
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	200008fc 	.word	0x200008fc
 80051d4:	20000d5c 	.word	0x20000d5c
 80051d8:	20000d70 	.word	0x20000d70
 80051dc:	20000d8c 	.word	0x20000d8c
 80051e0:	20000da0 	.word	0x20000da0
 80051e4:	20000db8 	.word	0x20000db8
 80051e8:	20000d84 	.word	0x20000d84
 80051ec:	20000d88 	.word	0x20000d88

080051f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051f6:	e019      	b.n	800522c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80051f8:	f000 fd60 	bl	8005cbc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80051fc:	4b10      	ldr	r3, [pc, #64]	; (8005240 <prvCheckTasksWaitingTermination+0x50>)
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3304      	adds	r3, #4
 8005208:	4618      	mov	r0, r3
 800520a:	f7fe fd4d 	bl	8003ca8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800520e:	4b0d      	ldr	r3, [pc, #52]	; (8005244 <prvCheckTasksWaitingTermination+0x54>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3b01      	subs	r3, #1
 8005214:	4a0b      	ldr	r2, [pc, #44]	; (8005244 <prvCheckTasksWaitingTermination+0x54>)
 8005216:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005218:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <prvCheckTasksWaitingTermination+0x58>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	3b01      	subs	r3, #1
 800521e:	4a0a      	ldr	r2, [pc, #40]	; (8005248 <prvCheckTasksWaitingTermination+0x58>)
 8005220:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005222:	f000 fd7b 	bl	8005d1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f810 	bl	800524c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800522c:	4b06      	ldr	r3, [pc, #24]	; (8005248 <prvCheckTasksWaitingTermination+0x58>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1e1      	bne.n	80051f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005234:	bf00      	nop
 8005236:	bf00      	nop
 8005238:	3708      	adds	r7, #8
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	20000da0 	.word	0x20000da0
 8005244:	20000dcc 	.word	0x20000dcc
 8005248:	20000db4 	.word	0x20000db4

0800524c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800525a:	2b00      	cmp	r3, #0
 800525c:	d108      	bne.n	8005270 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005262:	4618      	mov	r0, r3
 8005264:	f000 feee 	bl	8006044 <vPortFree>
				vPortFree( pxTCB );
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 feeb 	bl	8006044 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800526e:	e018      	b.n	80052a2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005276:	2b01      	cmp	r3, #1
 8005278:	d103      	bne.n	8005282 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fee2 	bl	8006044 <vPortFree>
	}
 8005280:	e00f      	b.n	80052a2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005288:	2b02      	cmp	r3, #2
 800528a:	d00a      	beq.n	80052a2 <prvDeleteTCB+0x56>
	__asm volatile
 800528c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	60fb      	str	r3, [r7, #12]
}
 800529e:	bf00      	nop
 80052a0:	e7fe      	b.n	80052a0 <prvDeleteTCB+0x54>
	}
 80052a2:	bf00      	nop
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
	...

080052ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052b2:	4b0e      	ldr	r3, [pc, #56]	; (80052ec <prvResetNextTaskUnblockTime+0x40>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <prvResetNextTaskUnblockTime+0x14>
 80052bc:	2301      	movs	r3, #1
 80052be:	e000      	b.n	80052c2 <prvResetNextTaskUnblockTime+0x16>
 80052c0:	2300      	movs	r3, #0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d004      	beq.n	80052d0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80052c6:	4b0a      	ldr	r3, [pc, #40]	; (80052f0 <prvResetNextTaskUnblockTime+0x44>)
 80052c8:	f04f 32ff 	mov.w	r2, #4294967295
 80052cc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80052ce:	e008      	b.n	80052e2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80052d0:	4b06      	ldr	r3, [pc, #24]	; (80052ec <prvResetNextTaskUnblockTime+0x40>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	4a04      	ldr	r2, [pc, #16]	; (80052f0 <prvResetNextTaskUnblockTime+0x44>)
 80052e0:	6013      	str	r3, [r2, #0]
}
 80052e2:	bf00      	nop
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bc80      	pop	{r7}
 80052ea:	4770      	bx	lr
 80052ec:	20000d84 	.word	0x20000d84
 80052f0:	20000dec 	.word	0x20000dec

080052f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80052fa:	4b0b      	ldr	r3, [pc, #44]	; (8005328 <xTaskGetSchedulerState+0x34>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d102      	bne.n	8005308 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005302:	2301      	movs	r3, #1
 8005304:	607b      	str	r3, [r7, #4]
 8005306:	e008      	b.n	800531a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005308:	4b08      	ldr	r3, [pc, #32]	; (800532c <xTaskGetSchedulerState+0x38>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d102      	bne.n	8005316 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005310:	2302      	movs	r3, #2
 8005312:	607b      	str	r3, [r7, #4]
 8005314:	e001      	b.n	800531a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005316:	2300      	movs	r3, #0
 8005318:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800531a:	687b      	ldr	r3, [r7, #4]
	}
 800531c:	4618      	mov	r0, r3
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	bc80      	pop	{r7}
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	20000dd8 	.word	0x20000dd8
 800532c:	20000df4 	.word	0x20000df4

08005330 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800533c:	2300      	movs	r3, #0
 800533e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d056      	beq.n	80053f4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005346:	4b2e      	ldr	r3, [pc, #184]	; (8005400 <xTaskPriorityDisinherit+0xd0>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	429a      	cmp	r2, r3
 800534e:	d00a      	beq.n	8005366 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005354:	f383 8811 	msr	BASEPRI, r3
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	60fb      	str	r3, [r7, #12]
}
 8005362:	bf00      	nop
 8005364:	e7fe      	b.n	8005364 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10a      	bne.n	8005384 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800536e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	60bb      	str	r3, [r7, #8]
}
 8005380:	bf00      	nop
 8005382:	e7fe      	b.n	8005382 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005388:	1e5a      	subs	r2, r3, #1
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005396:	429a      	cmp	r2, r3
 8005398:	d02c      	beq.n	80053f4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d128      	bne.n	80053f4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	3304      	adds	r3, #4
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7fe fc7e 	bl	8003ca8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c4:	4b0f      	ldr	r3, [pc, #60]	; (8005404 <xTaskPriorityDisinherit+0xd4>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d903      	bls.n	80053d4 <xTaskPriorityDisinherit+0xa4>
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d0:	4a0c      	ldr	r2, [pc, #48]	; (8005404 <xTaskPriorityDisinherit+0xd4>)
 80053d2:	6013      	str	r3, [r2, #0]
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d8:	4613      	mov	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4a09      	ldr	r2, [pc, #36]	; (8005408 <xTaskPriorityDisinherit+0xd8>)
 80053e2:	441a      	add	r2, r3
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	3304      	adds	r3, #4
 80053e8:	4619      	mov	r1, r3
 80053ea:	4610      	mov	r0, r2
 80053ec:	f7fe fc01 	bl	8003bf2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80053f0:	2301      	movs	r3, #1
 80053f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80053f4:	697b      	ldr	r3, [r7, #20]
	}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3718      	adds	r7, #24
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	200008f8 	.word	0x200008f8
 8005404:	20000dd4 	.word	0x20000dd4
 8005408:	200008fc 	.word	0x200008fc

0800540c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005416:	4b21      	ldr	r3, [pc, #132]	; (800549c <prvAddCurrentTaskToDelayedList+0x90>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800541c:	4b20      	ldr	r3, [pc, #128]	; (80054a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	3304      	adds	r3, #4
 8005422:	4618      	mov	r0, r3
 8005424:	f7fe fc40 	bl	8003ca8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542e:	d10a      	bne.n	8005446 <prvAddCurrentTaskToDelayedList+0x3a>
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d007      	beq.n	8005446 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005436:	4b1a      	ldr	r3, [pc, #104]	; (80054a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3304      	adds	r3, #4
 800543c:	4619      	mov	r1, r3
 800543e:	4819      	ldr	r0, [pc, #100]	; (80054a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005440:	f7fe fbd7 	bl	8003bf2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005444:	e026      	b.n	8005494 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4413      	add	r3, r2
 800544c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800544e:	4b14      	ldr	r3, [pc, #80]	; (80054a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	429a      	cmp	r2, r3
 800545c:	d209      	bcs.n	8005472 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800545e:	4b12      	ldr	r3, [pc, #72]	; (80054a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	4b0f      	ldr	r3, [pc, #60]	; (80054a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	3304      	adds	r3, #4
 8005468:	4619      	mov	r1, r3
 800546a:	4610      	mov	r0, r2
 800546c:	f7fe fbe4 	bl	8003c38 <vListInsert>
}
 8005470:	e010      	b.n	8005494 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005472:	4b0e      	ldr	r3, [pc, #56]	; (80054ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	4b0a      	ldr	r3, [pc, #40]	; (80054a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	3304      	adds	r3, #4
 800547c:	4619      	mov	r1, r3
 800547e:	4610      	mov	r0, r2
 8005480:	f7fe fbda 	bl	8003c38 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005484:	4b0a      	ldr	r3, [pc, #40]	; (80054b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	429a      	cmp	r2, r3
 800548c:	d202      	bcs.n	8005494 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800548e:	4a08      	ldr	r2, [pc, #32]	; (80054b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	6013      	str	r3, [r2, #0]
}
 8005494:	bf00      	nop
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	20000dd0 	.word	0x20000dd0
 80054a0:	200008f8 	.word	0x200008f8
 80054a4:	20000db8 	.word	0x20000db8
 80054a8:	20000d88 	.word	0x20000d88
 80054ac:	20000d84 	.word	0x20000d84
 80054b0:	20000dec 	.word	0x20000dec

080054b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b08a      	sub	sp, #40	; 0x28
 80054b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80054ba:	2300      	movs	r3, #0
 80054bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80054be:	f000 facb 	bl	8005a58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80054c2:	4b1c      	ldr	r3, [pc, #112]	; (8005534 <xTimerCreateTimerTask+0x80>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d021      	beq.n	800550e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80054ca:	2300      	movs	r3, #0
 80054cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80054d2:	1d3a      	adds	r2, r7, #4
 80054d4:	f107 0108 	add.w	r1, r7, #8
 80054d8:	f107 030c 	add.w	r3, r7, #12
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fe fb43 	bl	8003b68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80054e2:	6879      	ldr	r1, [r7, #4]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	9202      	str	r2, [sp, #8]
 80054ea:	9301      	str	r3, [sp, #4]
 80054ec:	2302      	movs	r3, #2
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	2300      	movs	r3, #0
 80054f2:	460a      	mov	r2, r1
 80054f4:	4910      	ldr	r1, [pc, #64]	; (8005538 <xTimerCreateTimerTask+0x84>)
 80054f6:	4811      	ldr	r0, [pc, #68]	; (800553c <xTimerCreateTimerTask+0x88>)
 80054f8:	f7ff f8e4 	bl	80046c4 <xTaskCreateStatic>
 80054fc:	4603      	mov	r3, r0
 80054fe:	4a10      	ldr	r2, [pc, #64]	; (8005540 <xTimerCreateTimerTask+0x8c>)
 8005500:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005502:	4b0f      	ldr	r3, [pc, #60]	; (8005540 <xTimerCreateTimerTask+0x8c>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800550a:	2301      	movs	r3, #1
 800550c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10a      	bne.n	800552a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	613b      	str	r3, [r7, #16]
}
 8005526:	bf00      	nop
 8005528:	e7fe      	b.n	8005528 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800552a:	697b      	ldr	r3, [r7, #20]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	20000e28 	.word	0x20000e28
 8005538:	08006430 	.word	0x08006430
 800553c:	08005661 	.word	0x08005661
 8005540:	20000e2c 	.word	0x20000e2c

08005544 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b08a      	sub	sp, #40	; 0x28
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
 8005550:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005552:	2300      	movs	r3, #0
 8005554:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10a      	bne.n	8005572 <xTimerGenericCommand+0x2e>
	__asm volatile
 800555c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	623b      	str	r3, [r7, #32]
}
 800556e:	bf00      	nop
 8005570:	e7fe      	b.n	8005570 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005572:	4b1a      	ldr	r3, [pc, #104]	; (80055dc <xTimerGenericCommand+0x98>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d02a      	beq.n	80055d0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2b05      	cmp	r3, #5
 800558a:	dc18      	bgt.n	80055be <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800558c:	f7ff feb2 	bl	80052f4 <xTaskGetSchedulerState>
 8005590:	4603      	mov	r3, r0
 8005592:	2b02      	cmp	r3, #2
 8005594:	d109      	bne.n	80055aa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005596:	4b11      	ldr	r3, [pc, #68]	; (80055dc <xTimerGenericCommand+0x98>)
 8005598:	6818      	ldr	r0, [r3, #0]
 800559a:	f107 0110 	add.w	r1, r7, #16
 800559e:	2300      	movs	r3, #0
 80055a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055a2:	f7fe fcad 	bl	8003f00 <xQueueGenericSend>
 80055a6:	6278      	str	r0, [r7, #36]	; 0x24
 80055a8:	e012      	b.n	80055d0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80055aa:	4b0c      	ldr	r3, [pc, #48]	; (80055dc <xTimerGenericCommand+0x98>)
 80055ac:	6818      	ldr	r0, [r3, #0]
 80055ae:	f107 0110 	add.w	r1, r7, #16
 80055b2:	2300      	movs	r3, #0
 80055b4:	2200      	movs	r2, #0
 80055b6:	f7fe fca3 	bl	8003f00 <xQueueGenericSend>
 80055ba:	6278      	str	r0, [r7, #36]	; 0x24
 80055bc:	e008      	b.n	80055d0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80055be:	4b07      	ldr	r3, [pc, #28]	; (80055dc <xTimerGenericCommand+0x98>)
 80055c0:	6818      	ldr	r0, [r3, #0]
 80055c2:	f107 0110 	add.w	r1, r7, #16
 80055c6:	2300      	movs	r3, #0
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	f7fe fd97 	bl	80040fc <xQueueGenericSendFromISR>
 80055ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3728      	adds	r7, #40	; 0x28
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	20000e28 	.word	0x20000e28

080055e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b088      	sub	sp, #32
 80055e4:	af02      	add	r7, sp, #8
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055ea:	4b1c      	ldr	r3, [pc, #112]	; (800565c <prvProcessExpiredTimer+0x7c>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	3304      	adds	r3, #4
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7fe fb55 	bl	8003ca8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d122      	bne.n	800564c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	699a      	ldr	r2, [r3, #24]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	18d1      	adds	r1, r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	683a      	ldr	r2, [r7, #0]
 8005612:	6978      	ldr	r0, [r7, #20]
 8005614:	f000 f8c8 	bl	80057a8 <prvInsertTimerInActiveList>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d016      	beq.n	800564c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800561e:	2300      	movs	r3, #0
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	2300      	movs	r3, #0
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	2100      	movs	r1, #0
 8005628:	6978      	ldr	r0, [r7, #20]
 800562a:	f7ff ff8b 	bl	8005544 <xTimerGenericCommand>
 800562e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10a      	bne.n	800564c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8005636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563a:	f383 8811 	msr	BASEPRI, r3
 800563e:	f3bf 8f6f 	isb	sy
 8005642:	f3bf 8f4f 	dsb	sy
 8005646:	60fb      	str	r3, [r7, #12]
}
 8005648:	bf00      	nop
 800564a:	e7fe      	b.n	800564a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	6978      	ldr	r0, [r7, #20]
 8005652:	4798      	blx	r3
}
 8005654:	bf00      	nop
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	20000e20 	.word	0x20000e20

08005660 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005668:	f107 0308 	add.w	r3, r7, #8
 800566c:	4618      	mov	r0, r3
 800566e:	f000 f857 	bl	8005720 <prvGetNextExpireTime>
 8005672:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	4619      	mov	r1, r3
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 f803 	bl	8005684 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800567e:	f000 f8d5 	bl	800582c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005682:	e7f1      	b.n	8005668 <prvTimerTask+0x8>

08005684 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800568e:	f7ff fa4b 	bl	8004b28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005692:	f107 0308 	add.w	r3, r7, #8
 8005696:	4618      	mov	r0, r3
 8005698:	f000 f866 	bl	8005768 <prvSampleTimeNow>
 800569c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d130      	bne.n	8005706 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10a      	bne.n	80056c0 <prvProcessTimerOrBlockTask+0x3c>
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d806      	bhi.n	80056c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80056b2:	f7ff fa47 	bl	8004b44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80056b6:	68f9      	ldr	r1, [r7, #12]
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7ff ff91 	bl	80055e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80056be:	e024      	b.n	800570a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d008      	beq.n	80056d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80056c6:	4b13      	ldr	r3, [pc, #76]	; (8005714 <prvProcessTimerOrBlockTask+0x90>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	bf0c      	ite	eq
 80056d0:	2301      	moveq	r3, #1
 80056d2:	2300      	movne	r3, #0
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80056d8:	4b0f      	ldr	r3, [pc, #60]	; (8005718 <prvProcessTimerOrBlockTask+0x94>)
 80056da:	6818      	ldr	r0, [r3, #0]
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	4619      	mov	r1, r3
 80056e6:	f7fe ffb9 	bl	800465c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80056ea:	f7ff fa2b 	bl	8004b44 <xTaskResumeAll>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10a      	bne.n	800570a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80056f4:	4b09      	ldr	r3, [pc, #36]	; (800571c <prvProcessTimerOrBlockTask+0x98>)
 80056f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	f3bf 8f6f 	isb	sy
}
 8005704:	e001      	b.n	800570a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005706:	f7ff fa1d 	bl	8004b44 <xTaskResumeAll>
}
 800570a:	bf00      	nop
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	20000e24 	.word	0x20000e24
 8005718:	20000e28 	.word	0x20000e28
 800571c:	e000ed04 	.word	0xe000ed04

08005720 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005728:	4b0e      	ldr	r3, [pc, #56]	; (8005764 <prvGetNextExpireTime+0x44>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	bf0c      	ite	eq
 8005732:	2301      	moveq	r3, #1
 8005734:	2300      	movne	r3, #0
 8005736:	b2db      	uxtb	r3, r3
 8005738:	461a      	mov	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d105      	bne.n	8005752 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005746:	4b07      	ldr	r3, [pc, #28]	; (8005764 <prvGetNextExpireTime+0x44>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	60fb      	str	r3, [r7, #12]
 8005750:	e001      	b.n	8005756 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005752:	2300      	movs	r3, #0
 8005754:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005756:	68fb      	ldr	r3, [r7, #12]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	bc80      	pop	{r7}
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	20000e20 	.word	0x20000e20

08005768 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005770:	f7ff fa86 	bl	8004c80 <xTaskGetTickCount>
 8005774:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005776:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <prvSampleTimeNow+0x3c>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	429a      	cmp	r2, r3
 800577e:	d205      	bcs.n	800578c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005780:	f000 f908 	bl	8005994 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	e002      	b.n	8005792 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005792:	4a04      	ldr	r2, [pc, #16]	; (80057a4 <prvSampleTimeNow+0x3c>)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005798:	68fb      	ldr	r3, [r7, #12]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	20000e30 	.word	0x20000e30

080057a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
 80057b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80057b6:	2300      	movs	r3, #0
 80057b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d812      	bhi.n	80057f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	1ad2      	subs	r2, r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d302      	bcc.n	80057e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80057dc:	2301      	movs	r3, #1
 80057de:	617b      	str	r3, [r7, #20]
 80057e0:	e01b      	b.n	800581a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80057e2:	4b10      	ldr	r3, [pc, #64]	; (8005824 <prvInsertTimerInActiveList+0x7c>)
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	3304      	adds	r3, #4
 80057ea:	4619      	mov	r1, r3
 80057ec:	4610      	mov	r0, r2
 80057ee:	f7fe fa23 	bl	8003c38 <vListInsert>
 80057f2:	e012      	b.n	800581a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d206      	bcs.n	800580a <prvInsertTimerInActiveList+0x62>
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	429a      	cmp	r2, r3
 8005802:	d302      	bcc.n	800580a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005804:	2301      	movs	r3, #1
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	e007      	b.n	800581a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800580a:	4b07      	ldr	r3, [pc, #28]	; (8005828 <prvInsertTimerInActiveList+0x80>)
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	3304      	adds	r3, #4
 8005812:	4619      	mov	r1, r3
 8005814:	4610      	mov	r0, r2
 8005816:	f7fe fa0f 	bl	8003c38 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800581a:	697b      	ldr	r3, [r7, #20]
}
 800581c:	4618      	mov	r0, r3
 800581e:	3718      	adds	r7, #24
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	20000e24 	.word	0x20000e24
 8005828:	20000e20 	.word	0x20000e20

0800582c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b08e      	sub	sp, #56	; 0x38
 8005830:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005832:	e09d      	b.n	8005970 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	da18      	bge.n	800586c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800583a:	1d3b      	adds	r3, r7, #4
 800583c:	3304      	adds	r3, #4
 800583e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10a      	bne.n	800585c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	61fb      	str	r3, [r7, #28]
}
 8005858:	bf00      	nop
 800585a:	e7fe      	b.n	800585a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800585c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005862:	6850      	ldr	r0, [r2, #4]
 8005864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005866:	6892      	ldr	r2, [r2, #8]
 8005868:	4611      	mov	r1, r2
 800586a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	db7d      	blt.n	800596e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d004      	beq.n	8005888 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800587e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005880:	3304      	adds	r3, #4
 8005882:	4618      	mov	r0, r3
 8005884:	f7fe fa10 	bl	8003ca8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005888:	463b      	mov	r3, r7
 800588a:	4618      	mov	r0, r3
 800588c:	f7ff ff6c 	bl	8005768 <prvSampleTimeNow>
 8005890:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b09      	cmp	r3, #9
 8005896:	d86b      	bhi.n	8005970 <prvProcessReceivedCommands+0x144>
 8005898:	a201      	add	r2, pc, #4	; (adr r2, 80058a0 <prvProcessReceivedCommands+0x74>)
 800589a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589e:	bf00      	nop
 80058a0:	080058c9 	.word	0x080058c9
 80058a4:	080058c9 	.word	0x080058c9
 80058a8:	080058c9 	.word	0x080058c9
 80058ac:	08005971 	.word	0x08005971
 80058b0:	08005925 	.word	0x08005925
 80058b4:	0800595d 	.word	0x0800595d
 80058b8:	080058c9 	.word	0x080058c9
 80058bc:	080058c9 	.word	0x080058c9
 80058c0:	08005971 	.word	0x08005971
 80058c4:	08005925 	.word	0x08005925
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	18d1      	adds	r1, r2, r3
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058d6:	f7ff ff67 	bl	80057a8 <prvInsertTimerInActiveList>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d047      	beq.n	8005970 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058e6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80058e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ea:	69db      	ldr	r3, [r3, #28]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d13f      	bne.n	8005970 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	441a      	add	r2, r3
 80058f8:	2300      	movs	r3, #0
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	2300      	movs	r3, #0
 80058fe:	2100      	movs	r1, #0
 8005900:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005902:	f7ff fe1f 	bl	8005544 <xTimerGenericCommand>
 8005906:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d130      	bne.n	8005970 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800590e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	61bb      	str	r3, [r7, #24]
}
 8005920:	bf00      	nop
 8005922:	e7fe      	b.n	8005922 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005928:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800592a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10a      	bne.n	8005948 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8005932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	617b      	str	r3, [r7, #20]
}
 8005944:	bf00      	nop
 8005946:	e7fe      	b.n	8005946 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594a:	699a      	ldr	r2, [r3, #24]
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	18d1      	adds	r1, r2, r3
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005956:	f7ff ff27 	bl	80057a8 <prvInsertTimerInActiveList>
					break;
 800595a:	e009      	b.n	8005970 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005962:	2b00      	cmp	r3, #0
 8005964:	d104      	bne.n	8005970 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005968:	f000 fb6c 	bl	8006044 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800596c:	e000      	b.n	8005970 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800596e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005970:	4b07      	ldr	r3, [pc, #28]	; (8005990 <prvProcessReceivedCommands+0x164>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	1d39      	adds	r1, r7, #4
 8005976:	2200      	movs	r2, #0
 8005978:	4618      	mov	r0, r3
 800597a:	f7fe fc57 	bl	800422c <xQueueReceive>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	f47f af57 	bne.w	8005834 <prvProcessReceivedCommands+0x8>
	}
}
 8005986:	bf00      	nop
 8005988:	bf00      	nop
 800598a:	3730      	adds	r7, #48	; 0x30
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	20000e28 	.word	0x20000e28

08005994 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b088      	sub	sp, #32
 8005998:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800599a:	e045      	b.n	8005a28 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800599c:	4b2c      	ldr	r3, [pc, #176]	; (8005a50 <prvSwitchTimerLists+0xbc>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059a6:	4b2a      	ldr	r3, [pc, #168]	; (8005a50 <prvSwitchTimerLists+0xbc>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	3304      	adds	r3, #4
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7fe f977 	bl	8003ca8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d12e      	bne.n	8005a28 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	4413      	add	r3, r2
 80059d2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d90e      	bls.n	80059fa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80059e8:	4b19      	ldr	r3, [pc, #100]	; (8005a50 <prvSwitchTimerLists+0xbc>)
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	3304      	adds	r3, #4
 80059f0:	4619      	mov	r1, r3
 80059f2:	4610      	mov	r0, r2
 80059f4:	f7fe f920 	bl	8003c38 <vListInsert>
 80059f8:	e016      	b.n	8005a28 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80059fa:	2300      	movs	r3, #0
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	2300      	movs	r3, #0
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	2100      	movs	r1, #0
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f7ff fd9d 	bl	8005544 <xTimerGenericCommand>
 8005a0a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10a      	bne.n	8005a28 <prvSwitchTimerLists+0x94>
	__asm volatile
 8005a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a16:	f383 8811 	msr	BASEPRI, r3
 8005a1a:	f3bf 8f6f 	isb	sy
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	603b      	str	r3, [r7, #0]
}
 8005a24:	bf00      	nop
 8005a26:	e7fe      	b.n	8005a26 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a28:	4b09      	ldr	r3, [pc, #36]	; (8005a50 <prvSwitchTimerLists+0xbc>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1b4      	bne.n	800599c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005a32:	4b07      	ldr	r3, [pc, #28]	; (8005a50 <prvSwitchTimerLists+0xbc>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005a38:	4b06      	ldr	r3, [pc, #24]	; (8005a54 <prvSwitchTimerLists+0xc0>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a04      	ldr	r2, [pc, #16]	; (8005a50 <prvSwitchTimerLists+0xbc>)
 8005a3e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005a40:	4a04      	ldr	r2, [pc, #16]	; (8005a54 <prvSwitchTimerLists+0xc0>)
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	6013      	str	r3, [r2, #0]
}
 8005a46:	bf00      	nop
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	20000e20 	.word	0x20000e20
 8005a54:	20000e24 	.word	0x20000e24

08005a58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005a5e:	f000 f92d 	bl	8005cbc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005a62:	4b15      	ldr	r3, [pc, #84]	; (8005ab8 <prvCheckForValidListAndQueue+0x60>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d120      	bne.n	8005aac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005a6a:	4814      	ldr	r0, [pc, #80]	; (8005abc <prvCheckForValidListAndQueue+0x64>)
 8005a6c:	f7fe f896 	bl	8003b9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005a70:	4813      	ldr	r0, [pc, #76]	; (8005ac0 <prvCheckForValidListAndQueue+0x68>)
 8005a72:	f7fe f893 	bl	8003b9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005a76:	4b13      	ldr	r3, [pc, #76]	; (8005ac4 <prvCheckForValidListAndQueue+0x6c>)
 8005a78:	4a10      	ldr	r2, [pc, #64]	; (8005abc <prvCheckForValidListAndQueue+0x64>)
 8005a7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005a7c:	4b12      	ldr	r3, [pc, #72]	; (8005ac8 <prvCheckForValidListAndQueue+0x70>)
 8005a7e:	4a10      	ldr	r2, [pc, #64]	; (8005ac0 <prvCheckForValidListAndQueue+0x68>)
 8005a80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005a82:	2300      	movs	r3, #0
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	4b11      	ldr	r3, [pc, #68]	; (8005acc <prvCheckForValidListAndQueue+0x74>)
 8005a88:	4a11      	ldr	r2, [pc, #68]	; (8005ad0 <prvCheckForValidListAndQueue+0x78>)
 8005a8a:	2110      	movs	r1, #16
 8005a8c:	200a      	movs	r0, #10
 8005a8e:	f7fe f99d 	bl	8003dcc <xQueueGenericCreateStatic>
 8005a92:	4603      	mov	r3, r0
 8005a94:	4a08      	ldr	r2, [pc, #32]	; (8005ab8 <prvCheckForValidListAndQueue+0x60>)
 8005a96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005a98:	4b07      	ldr	r3, [pc, #28]	; (8005ab8 <prvCheckForValidListAndQueue+0x60>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d005      	beq.n	8005aac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005aa0:	4b05      	ldr	r3, [pc, #20]	; (8005ab8 <prvCheckForValidListAndQueue+0x60>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	490b      	ldr	r1, [pc, #44]	; (8005ad4 <prvCheckForValidListAndQueue+0x7c>)
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fe fdb0 	bl	800460c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005aac:	f000 f936 	bl	8005d1c <vPortExitCritical>
}
 8005ab0:	bf00      	nop
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	20000e28 	.word	0x20000e28
 8005abc:	20000df8 	.word	0x20000df8
 8005ac0:	20000e0c 	.word	0x20000e0c
 8005ac4:	20000e20 	.word	0x20000e20
 8005ac8:	20000e24 	.word	0x20000e24
 8005acc:	20000ed4 	.word	0x20000ed4
 8005ad0:	20000e34 	.word	0x20000e34
 8005ad4:	08006438 	.word	0x08006438

08005ad8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	3b04      	subs	r3, #4
 8005ae8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005af0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	3b04      	subs	r3, #4
 8005af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f023 0201 	bic.w	r2, r3, #1
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	3b04      	subs	r3, #4
 8005b06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b08:	4a08      	ldr	r2, [pc, #32]	; (8005b2c <pxPortInitialiseStack+0x54>)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	3b14      	subs	r3, #20
 8005b12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	3b20      	subs	r3, #32
 8005b1e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b20:	68fb      	ldr	r3, [r7, #12]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bc80      	pop	{r7}
 8005b2a:	4770      	bx	lr
 8005b2c:	08005b31 	.word	0x08005b31

08005b30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005b36:	2300      	movs	r3, #0
 8005b38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b3a:	4b12      	ldr	r3, [pc, #72]	; (8005b84 <prvTaskExitError+0x54>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b42:	d00a      	beq.n	8005b5a <prvTaskExitError+0x2a>
	__asm volatile
 8005b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b48:	f383 8811 	msr	BASEPRI, r3
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	60fb      	str	r3, [r7, #12]
}
 8005b56:	bf00      	nop
 8005b58:	e7fe      	b.n	8005b58 <prvTaskExitError+0x28>
	__asm volatile
 8005b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5e:	f383 8811 	msr	BASEPRI, r3
 8005b62:	f3bf 8f6f 	isb	sy
 8005b66:	f3bf 8f4f 	dsb	sy
 8005b6a:	60bb      	str	r3, [r7, #8]
}
 8005b6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b6e:	bf00      	nop
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d0fc      	beq.n	8005b70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b76:	bf00      	nop
 8005b78:	bf00      	nop
 8005b7a:	3714      	adds	r7, #20
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bc80      	pop	{r7}
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	2000001c 	.word	0x2000001c
	...

08005b90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b90:	4b07      	ldr	r3, [pc, #28]	; (8005bb0 <pxCurrentTCBConst2>)
 8005b92:	6819      	ldr	r1, [r3, #0]
 8005b94:	6808      	ldr	r0, [r1, #0]
 8005b96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005b9a:	f380 8809 	msr	PSP, r0
 8005b9e:	f3bf 8f6f 	isb	sy
 8005ba2:	f04f 0000 	mov.w	r0, #0
 8005ba6:	f380 8811 	msr	BASEPRI, r0
 8005baa:	f04e 0e0d 	orr.w	lr, lr, #13
 8005bae:	4770      	bx	lr

08005bb0 <pxCurrentTCBConst2>:
 8005bb0:	200008f8 	.word	0x200008f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005bb4:	bf00      	nop
 8005bb6:	bf00      	nop

08005bb8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005bb8:	4806      	ldr	r0, [pc, #24]	; (8005bd4 <prvPortStartFirstTask+0x1c>)
 8005bba:	6800      	ldr	r0, [r0, #0]
 8005bbc:	6800      	ldr	r0, [r0, #0]
 8005bbe:	f380 8808 	msr	MSP, r0
 8005bc2:	b662      	cpsie	i
 8005bc4:	b661      	cpsie	f
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	f3bf 8f6f 	isb	sy
 8005bce:	df00      	svc	0
 8005bd0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005bd2:	bf00      	nop
 8005bd4:	e000ed08 	.word	0xe000ed08

08005bd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005bde:	4b32      	ldr	r3, [pc, #200]	; (8005ca8 <xPortStartScheduler+0xd0>)
 8005be0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	22ff      	movs	r2, #255	; 0xff
 8005bee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005bf8:	78fb      	ldrb	r3, [r7, #3]
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	4b2a      	ldr	r3, [pc, #168]	; (8005cac <xPortStartScheduler+0xd4>)
 8005c04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c06:	4b2a      	ldr	r3, [pc, #168]	; (8005cb0 <xPortStartScheduler+0xd8>)
 8005c08:	2207      	movs	r2, #7
 8005c0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c0c:	e009      	b.n	8005c22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005c0e:	4b28      	ldr	r3, [pc, #160]	; (8005cb0 <xPortStartScheduler+0xd8>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3b01      	subs	r3, #1
 8005c14:	4a26      	ldr	r2, [pc, #152]	; (8005cb0 <xPortStartScheduler+0xd8>)
 8005c16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c18:	78fb      	ldrb	r3, [r7, #3]
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	005b      	lsls	r3, r3, #1
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c22:	78fb      	ldrb	r3, [r7, #3]
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2a:	2b80      	cmp	r3, #128	; 0x80
 8005c2c:	d0ef      	beq.n	8005c0e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c2e:	4b20      	ldr	r3, [pc, #128]	; (8005cb0 <xPortStartScheduler+0xd8>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f1c3 0307 	rsb	r3, r3, #7
 8005c36:	2b04      	cmp	r3, #4
 8005c38:	d00a      	beq.n	8005c50 <xPortStartScheduler+0x78>
	__asm volatile
 8005c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3e:	f383 8811 	msr	BASEPRI, r3
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	60bb      	str	r3, [r7, #8]
}
 8005c4c:	bf00      	nop
 8005c4e:	e7fe      	b.n	8005c4e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c50:	4b17      	ldr	r3, [pc, #92]	; (8005cb0 <xPortStartScheduler+0xd8>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	021b      	lsls	r3, r3, #8
 8005c56:	4a16      	ldr	r2, [pc, #88]	; (8005cb0 <xPortStartScheduler+0xd8>)
 8005c58:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c5a:	4b15      	ldr	r3, [pc, #84]	; (8005cb0 <xPortStartScheduler+0xd8>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c62:	4a13      	ldr	r2, [pc, #76]	; (8005cb0 <xPortStartScheduler+0xd8>)
 8005c64:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c6e:	4b11      	ldr	r3, [pc, #68]	; (8005cb4 <xPortStartScheduler+0xdc>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a10      	ldr	r2, [pc, #64]	; (8005cb4 <xPortStartScheduler+0xdc>)
 8005c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c7a:	4b0e      	ldr	r3, [pc, #56]	; (8005cb4 <xPortStartScheduler+0xdc>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a0d      	ldr	r2, [pc, #52]	; (8005cb4 <xPortStartScheduler+0xdc>)
 8005c80:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005c84:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c86:	f000 f8b9 	bl	8005dfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c8a:	4b0b      	ldr	r3, [pc, #44]	; (8005cb8 <xPortStartScheduler+0xe0>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c90:	f7ff ff92 	bl	8005bb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c94:	f7ff f8c0 	bl	8004e18 <vTaskSwitchContext>
	prvTaskExitError();
 8005c98:	f7ff ff4a 	bl	8005b30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	e000e400 	.word	0xe000e400
 8005cac:	20000f24 	.word	0x20000f24
 8005cb0:	20000f28 	.word	0x20000f28
 8005cb4:	e000ed20 	.word	0xe000ed20
 8005cb8:	2000001c 	.word	0x2000001c

08005cbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
	__asm volatile
 8005cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	607b      	str	r3, [r7, #4]
}
 8005cd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005cd6:	4b0f      	ldr	r3, [pc, #60]	; (8005d14 <vPortEnterCritical+0x58>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	4a0d      	ldr	r2, [pc, #52]	; (8005d14 <vPortEnterCritical+0x58>)
 8005cde:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005ce0:	4b0c      	ldr	r3, [pc, #48]	; (8005d14 <vPortEnterCritical+0x58>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d10f      	bne.n	8005d08 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ce8:	4b0b      	ldr	r3, [pc, #44]	; (8005d18 <vPortEnterCritical+0x5c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00a      	beq.n	8005d08 <vPortEnterCritical+0x4c>
	__asm volatile
 8005cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	603b      	str	r3, [r7, #0]
}
 8005d04:	bf00      	nop
 8005d06:	e7fe      	b.n	8005d06 <vPortEnterCritical+0x4a>
	}
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bc80      	pop	{r7}
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	2000001c 	.word	0x2000001c
 8005d18:	e000ed04 	.word	0xe000ed04

08005d1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d22:	4b11      	ldr	r3, [pc, #68]	; (8005d68 <vPortExitCritical+0x4c>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10a      	bne.n	8005d40 <vPortExitCritical+0x24>
	__asm volatile
 8005d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	607b      	str	r3, [r7, #4]
}
 8005d3c:	bf00      	nop
 8005d3e:	e7fe      	b.n	8005d3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005d40:	4b09      	ldr	r3, [pc, #36]	; (8005d68 <vPortExitCritical+0x4c>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	3b01      	subs	r3, #1
 8005d46:	4a08      	ldr	r2, [pc, #32]	; (8005d68 <vPortExitCritical+0x4c>)
 8005d48:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d4a:	4b07      	ldr	r3, [pc, #28]	; (8005d68 <vPortExitCritical+0x4c>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d105      	bne.n	8005d5e <vPortExitCritical+0x42>
 8005d52:	2300      	movs	r3, #0
 8005d54:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	f383 8811 	msr	BASEPRI, r3
}
 8005d5c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d5e:	bf00      	nop
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bc80      	pop	{r7}
 8005d66:	4770      	bx	lr
 8005d68:	2000001c 	.word	0x2000001c
 8005d6c:	00000000 	.word	0x00000000

08005d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d70:	f3ef 8009 	mrs	r0, PSP
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	4b0d      	ldr	r3, [pc, #52]	; (8005db0 <pxCurrentTCBConst>)
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005d80:	6010      	str	r0, [r2, #0]
 8005d82:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005d86:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d8a:	f380 8811 	msr	BASEPRI, r0
 8005d8e:	f7ff f843 	bl	8004e18 <vTaskSwitchContext>
 8005d92:	f04f 0000 	mov.w	r0, #0
 8005d96:	f380 8811 	msr	BASEPRI, r0
 8005d9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005d9e:	6819      	ldr	r1, [r3, #0]
 8005da0:	6808      	ldr	r0, [r1, #0]
 8005da2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005da6:	f380 8809 	msr	PSP, r0
 8005daa:	f3bf 8f6f 	isb	sy
 8005dae:	4770      	bx	lr

08005db0 <pxCurrentTCBConst>:
 8005db0:	200008f8 	.word	0x200008f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005db4:	bf00      	nop
 8005db6:	bf00      	nop

08005db8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
	__asm volatile
 8005dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	607b      	str	r3, [r7, #4]
}
 8005dd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005dd2:	f7fe ff63 	bl	8004c9c <xTaskIncrementTick>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005ddc:	4b06      	ldr	r3, [pc, #24]	; (8005df8 <SysTick_Handler+0x40>)
 8005dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	2300      	movs	r3, #0
 8005de6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	f383 8811 	msr	BASEPRI, r3
}
 8005dee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005df0:	bf00      	nop
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	e000ed04 	.word	0xe000ed04

08005dfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e00:	4b0a      	ldr	r3, [pc, #40]	; (8005e2c <vPortSetupTimerInterrupt+0x30>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e06:	4b0a      	ldr	r3, [pc, #40]	; (8005e30 <vPortSetupTimerInterrupt+0x34>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e0c:	4b09      	ldr	r3, [pc, #36]	; (8005e34 <vPortSetupTimerInterrupt+0x38>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a09      	ldr	r2, [pc, #36]	; (8005e38 <vPortSetupTimerInterrupt+0x3c>)
 8005e12:	fba2 2303 	umull	r2, r3, r2, r3
 8005e16:	099b      	lsrs	r3, r3, #6
 8005e18:	4a08      	ldr	r2, [pc, #32]	; (8005e3c <vPortSetupTimerInterrupt+0x40>)
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e1e:	4b03      	ldr	r3, [pc, #12]	; (8005e2c <vPortSetupTimerInterrupt+0x30>)
 8005e20:	2207      	movs	r2, #7
 8005e22:	601a      	str	r2, [r3, #0]
}
 8005e24:	bf00      	nop
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bc80      	pop	{r7}
 8005e2a:	4770      	bx	lr
 8005e2c:	e000e010 	.word	0xe000e010
 8005e30:	e000e018 	.word	0xe000e018
 8005e34:	20000010 	.word	0x20000010
 8005e38:	10624dd3 	.word	0x10624dd3
 8005e3c:	e000e014 	.word	0xe000e014

08005e40 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005e46:	f3ef 8305 	mrs	r3, IPSR
 8005e4a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2b0f      	cmp	r3, #15
 8005e50:	d914      	bls.n	8005e7c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e52:	4a16      	ldr	r2, [pc, #88]	; (8005eac <vPortValidateInterruptPriority+0x6c>)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4413      	add	r3, r2
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e5c:	4b14      	ldr	r3, [pc, #80]	; (8005eb0 <vPortValidateInterruptPriority+0x70>)
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	7afa      	ldrb	r2, [r7, #11]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d20a      	bcs.n	8005e7c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6a:	f383 8811 	msr	BASEPRI, r3
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	f3bf 8f4f 	dsb	sy
 8005e76:	607b      	str	r3, [r7, #4]
}
 8005e78:	bf00      	nop
 8005e7a:	e7fe      	b.n	8005e7a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e7c:	4b0d      	ldr	r3, [pc, #52]	; (8005eb4 <vPortValidateInterruptPriority+0x74>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e84:	4b0c      	ldr	r3, [pc, #48]	; (8005eb8 <vPortValidateInterruptPriority+0x78>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d90a      	bls.n	8005ea2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e90:	f383 8811 	msr	BASEPRI, r3
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	f3bf 8f4f 	dsb	sy
 8005e9c:	603b      	str	r3, [r7, #0]
}
 8005e9e:	bf00      	nop
 8005ea0:	e7fe      	b.n	8005ea0 <vPortValidateInterruptPriority+0x60>
	}
 8005ea2:	bf00      	nop
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bc80      	pop	{r7}
 8005eaa:	4770      	bx	lr
 8005eac:	e000e3f0 	.word	0xe000e3f0
 8005eb0:	20000f24 	.word	0x20000f24
 8005eb4:	e000ed0c 	.word	0xe000ed0c
 8005eb8:	20000f28 	.word	0x20000f28

08005ebc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b08a      	sub	sp, #40	; 0x28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ec8:	f7fe fe2e 	bl	8004b28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ecc:	4b58      	ldr	r3, [pc, #352]	; (8006030 <pvPortMalloc+0x174>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d101      	bne.n	8005ed8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ed4:	f000 f910 	bl	80060f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ed8:	4b56      	ldr	r3, [pc, #344]	; (8006034 <pvPortMalloc+0x178>)
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4013      	ands	r3, r2
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f040 808e 	bne.w	8006002 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d01d      	beq.n	8005f28 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005eec:	2208      	movs	r2, #8
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f003 0307 	and.w	r3, r3, #7
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d014      	beq.n	8005f28 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f023 0307 	bic.w	r3, r3, #7
 8005f04:	3308      	adds	r3, #8
 8005f06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f003 0307 	and.w	r3, r3, #7
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00a      	beq.n	8005f28 <pvPortMalloc+0x6c>
	__asm volatile
 8005f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f16:	f383 8811 	msr	BASEPRI, r3
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	617b      	str	r3, [r7, #20]
}
 8005f24:	bf00      	nop
 8005f26:	e7fe      	b.n	8005f26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d069      	beq.n	8006002 <pvPortMalloc+0x146>
 8005f2e:	4b42      	ldr	r3, [pc, #264]	; (8006038 <pvPortMalloc+0x17c>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d864      	bhi.n	8006002 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f38:	4b40      	ldr	r3, [pc, #256]	; (800603c <pvPortMalloc+0x180>)
 8005f3a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f3c:	4b3f      	ldr	r3, [pc, #252]	; (800603c <pvPortMalloc+0x180>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f42:	e004      	b.n	8005f4e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d903      	bls.n	8005f60 <pvPortMalloc+0xa4>
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1f1      	bne.n	8005f44 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f60:	4b33      	ldr	r3, [pc, #204]	; (8006030 <pvPortMalloc+0x174>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d04b      	beq.n	8006002 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2208      	movs	r2, #8
 8005f70:	4413      	add	r3, r2
 8005f72:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	1ad2      	subs	r2, r2, r3
 8005f84:	2308      	movs	r3, #8
 8005f86:	005b      	lsls	r3, r3, #1
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d91f      	bls.n	8005fcc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4413      	add	r3, r2
 8005f92:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	f003 0307 	and.w	r3, r3, #7
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00a      	beq.n	8005fb4 <pvPortMalloc+0xf8>
	__asm volatile
 8005f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	613b      	str	r3, [r7, #16]
}
 8005fb0:	bf00      	nop
 8005fb2:	e7fe      	b.n	8005fb2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	1ad2      	subs	r2, r2, r3
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005fc6:	69b8      	ldr	r0, [r7, #24]
 8005fc8:	f000 f8f8 	bl	80061bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005fcc:	4b1a      	ldr	r3, [pc, #104]	; (8006038 <pvPortMalloc+0x17c>)
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	4a18      	ldr	r2, [pc, #96]	; (8006038 <pvPortMalloc+0x17c>)
 8005fd8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005fda:	4b17      	ldr	r3, [pc, #92]	; (8006038 <pvPortMalloc+0x17c>)
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	4b18      	ldr	r3, [pc, #96]	; (8006040 <pvPortMalloc+0x184>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d203      	bcs.n	8005fee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005fe6:	4b14      	ldr	r3, [pc, #80]	; (8006038 <pvPortMalloc+0x17c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a15      	ldr	r2, [pc, #84]	; (8006040 <pvPortMalloc+0x184>)
 8005fec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	4b10      	ldr	r3, [pc, #64]	; (8006034 <pvPortMalloc+0x178>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	2200      	movs	r2, #0
 8006000:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006002:	f7fe fd9f 	bl	8004b44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	f003 0307 	and.w	r3, r3, #7
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00a      	beq.n	8006026 <pvPortMalloc+0x16a>
	__asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	60fb      	str	r3, [r7, #12]
}
 8006022:	bf00      	nop
 8006024:	e7fe      	b.n	8006024 <pvPortMalloc+0x168>
	return pvReturn;
 8006026:	69fb      	ldr	r3, [r7, #28]
}
 8006028:	4618      	mov	r0, r3
 800602a:	3728      	adds	r7, #40	; 0x28
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	20001b34 	.word	0x20001b34
 8006034:	20001b40 	.word	0x20001b40
 8006038:	20001b38 	.word	0x20001b38
 800603c:	20001b2c 	.word	0x20001b2c
 8006040:	20001b3c 	.word	0x20001b3c

08006044 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d048      	beq.n	80060e8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006056:	2308      	movs	r3, #8
 8006058:	425b      	negs	r3, r3
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	4413      	add	r3, r2
 800605e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	4b21      	ldr	r3, [pc, #132]	; (80060f0 <vPortFree+0xac>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4013      	ands	r3, r2
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10a      	bne.n	8006088 <vPortFree+0x44>
	__asm volatile
 8006072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	60fb      	str	r3, [r7, #12]
}
 8006084:	bf00      	nop
 8006086:	e7fe      	b.n	8006086 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00a      	beq.n	80060a6 <vPortFree+0x62>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	60bb      	str	r3, [r7, #8]
}
 80060a2:	bf00      	nop
 80060a4:	e7fe      	b.n	80060a4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	4b11      	ldr	r3, [pc, #68]	; (80060f0 <vPortFree+0xac>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4013      	ands	r3, r2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d019      	beq.n	80060e8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d115      	bne.n	80060e8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	4b0b      	ldr	r3, [pc, #44]	; (80060f0 <vPortFree+0xac>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	43db      	mvns	r3, r3
 80060c6:	401a      	ands	r2, r3
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80060cc:	f7fe fd2c 	bl	8004b28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	685a      	ldr	r2, [r3, #4]
 80060d4:	4b07      	ldr	r3, [pc, #28]	; (80060f4 <vPortFree+0xb0>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4413      	add	r3, r2
 80060da:	4a06      	ldr	r2, [pc, #24]	; (80060f4 <vPortFree+0xb0>)
 80060dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060de:	6938      	ldr	r0, [r7, #16]
 80060e0:	f000 f86c 	bl	80061bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80060e4:	f7fe fd2e 	bl	8004b44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80060e8:	bf00      	nop
 80060ea:	3718      	adds	r7, #24
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	20001b40 	.word	0x20001b40
 80060f4:	20001b38 	.word	0x20001b38

080060f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80060fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006102:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006104:	4b27      	ldr	r3, [pc, #156]	; (80061a4 <prvHeapInit+0xac>)
 8006106:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f003 0307 	and.w	r3, r3, #7
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00c      	beq.n	800612c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	3307      	adds	r3, #7
 8006116:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f023 0307 	bic.w	r3, r3, #7
 800611e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	4a1f      	ldr	r2, [pc, #124]	; (80061a4 <prvHeapInit+0xac>)
 8006128:	4413      	add	r3, r2
 800612a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006130:	4a1d      	ldr	r2, [pc, #116]	; (80061a8 <prvHeapInit+0xb0>)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006136:	4b1c      	ldr	r3, [pc, #112]	; (80061a8 <prvHeapInit+0xb0>)
 8006138:	2200      	movs	r2, #0
 800613a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	4413      	add	r3, r2
 8006142:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006144:	2208      	movs	r2, #8
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	1a9b      	subs	r3, r3, r2
 800614a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f023 0307 	bic.w	r3, r3, #7
 8006152:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	4a15      	ldr	r2, [pc, #84]	; (80061ac <prvHeapInit+0xb4>)
 8006158:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800615a:	4b14      	ldr	r3, [pc, #80]	; (80061ac <prvHeapInit+0xb4>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2200      	movs	r2, #0
 8006160:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006162:	4b12      	ldr	r3, [pc, #72]	; (80061ac <prvHeapInit+0xb4>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2200      	movs	r2, #0
 8006168:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	1ad2      	subs	r2, r2, r3
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006178:	4b0c      	ldr	r3, [pc, #48]	; (80061ac <prvHeapInit+0xb4>)
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	4a0a      	ldr	r2, [pc, #40]	; (80061b0 <prvHeapInit+0xb8>)
 8006186:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	4a09      	ldr	r2, [pc, #36]	; (80061b4 <prvHeapInit+0xbc>)
 800618e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006190:	4b09      	ldr	r3, [pc, #36]	; (80061b8 <prvHeapInit+0xc0>)
 8006192:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006196:	601a      	str	r2, [r3, #0]
}
 8006198:	bf00      	nop
 800619a:	3714      	adds	r7, #20
 800619c:	46bd      	mov	sp, r7
 800619e:	bc80      	pop	{r7}
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	20000f2c 	.word	0x20000f2c
 80061a8:	20001b2c 	.word	0x20001b2c
 80061ac:	20001b34 	.word	0x20001b34
 80061b0:	20001b3c 	.word	0x20001b3c
 80061b4:	20001b38 	.word	0x20001b38
 80061b8:	20001b40 	.word	0x20001b40

080061bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80061c4:	4b27      	ldr	r3, [pc, #156]	; (8006264 <prvInsertBlockIntoFreeList+0xa8>)
 80061c6:	60fb      	str	r3, [r7, #12]
 80061c8:	e002      	b.n	80061d0 <prvInsertBlockIntoFreeList+0x14>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	60fb      	str	r3, [r7, #12]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d8f7      	bhi.n	80061ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	4413      	add	r3, r2
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d108      	bne.n	80061fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	441a      	add	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	441a      	add	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	429a      	cmp	r2, r3
 8006210:	d118      	bne.n	8006244 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	4b14      	ldr	r3, [pc, #80]	; (8006268 <prvInsertBlockIntoFreeList+0xac>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	429a      	cmp	r2, r3
 800621c:	d00d      	beq.n	800623a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685a      	ldr	r2, [r3, #4]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	441a      	add	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	e008      	b.n	800624c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800623a:	4b0b      	ldr	r3, [pc, #44]	; (8006268 <prvInsertBlockIntoFreeList+0xac>)
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	e003      	b.n	800624c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	429a      	cmp	r2, r3
 8006252:	d002      	beq.n	800625a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800625a:	bf00      	nop
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	bc80      	pop	{r7}
 8006262:	4770      	bx	lr
 8006264:	20001b2c 	.word	0x20001b2c
 8006268:	20001b34 	.word	0x20001b34

0800626c <atoi>:
 800626c:	220a      	movs	r2, #10
 800626e:	2100      	movs	r1, #0
 8006270:	f000 b8bc 	b.w	80063ec <strtol>

08006274 <__errno>:
 8006274:	4b01      	ldr	r3, [pc, #4]	; (800627c <__errno+0x8>)
 8006276:	6818      	ldr	r0, [r3, #0]
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	20000020 	.word	0x20000020

08006280 <__libc_init_array>:
 8006280:	b570      	push	{r4, r5, r6, lr}
 8006282:	2600      	movs	r6, #0
 8006284:	4d0c      	ldr	r5, [pc, #48]	; (80062b8 <__libc_init_array+0x38>)
 8006286:	4c0d      	ldr	r4, [pc, #52]	; (80062bc <__libc_init_array+0x3c>)
 8006288:	1b64      	subs	r4, r4, r5
 800628a:	10a4      	asrs	r4, r4, #2
 800628c:	42a6      	cmp	r6, r4
 800628e:	d109      	bne.n	80062a4 <__libc_init_array+0x24>
 8006290:	f000 f8b6 	bl	8006400 <_init>
 8006294:	2600      	movs	r6, #0
 8006296:	4d0a      	ldr	r5, [pc, #40]	; (80062c0 <__libc_init_array+0x40>)
 8006298:	4c0a      	ldr	r4, [pc, #40]	; (80062c4 <__libc_init_array+0x44>)
 800629a:	1b64      	subs	r4, r4, r5
 800629c:	10a4      	asrs	r4, r4, #2
 800629e:	42a6      	cmp	r6, r4
 80062a0:	d105      	bne.n	80062ae <__libc_init_array+0x2e>
 80062a2:	bd70      	pop	{r4, r5, r6, pc}
 80062a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80062a8:	4798      	blx	r3
 80062aa:	3601      	adds	r6, #1
 80062ac:	e7ee      	b.n	800628c <__libc_init_array+0xc>
 80062ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80062b2:	4798      	blx	r3
 80062b4:	3601      	adds	r6, #1
 80062b6:	e7f2      	b.n	800629e <__libc_init_array+0x1e>
 80062b8:	080065b4 	.word	0x080065b4
 80062bc:	080065b4 	.word	0x080065b4
 80062c0:	080065b4 	.word	0x080065b4
 80062c4:	080065b8 	.word	0x080065b8

080062c8 <memcpy>:
 80062c8:	440a      	add	r2, r1
 80062ca:	4291      	cmp	r1, r2
 80062cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80062d0:	d100      	bne.n	80062d4 <memcpy+0xc>
 80062d2:	4770      	bx	lr
 80062d4:	b510      	push	{r4, lr}
 80062d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062da:	4291      	cmp	r1, r2
 80062dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062e0:	d1f9      	bne.n	80062d6 <memcpy+0xe>
 80062e2:	bd10      	pop	{r4, pc}

080062e4 <memset>:
 80062e4:	4603      	mov	r3, r0
 80062e6:	4402      	add	r2, r0
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d100      	bne.n	80062ee <memset+0xa>
 80062ec:	4770      	bx	lr
 80062ee:	f803 1b01 	strb.w	r1, [r3], #1
 80062f2:	e7f9      	b.n	80062e8 <memset+0x4>

080062f4 <_strtol_l.constprop.0>:
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062fa:	4680      	mov	r8, r0
 80062fc:	d001      	beq.n	8006302 <_strtol_l.constprop.0+0xe>
 80062fe:	2b24      	cmp	r3, #36	; 0x24
 8006300:	d906      	bls.n	8006310 <_strtol_l.constprop.0+0x1c>
 8006302:	f7ff ffb7 	bl	8006274 <__errno>
 8006306:	2316      	movs	r3, #22
 8006308:	6003      	str	r3, [r0, #0]
 800630a:	2000      	movs	r0, #0
 800630c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006310:	460d      	mov	r5, r1
 8006312:	4f35      	ldr	r7, [pc, #212]	; (80063e8 <_strtol_l.constprop.0+0xf4>)
 8006314:	4628      	mov	r0, r5
 8006316:	f815 4b01 	ldrb.w	r4, [r5], #1
 800631a:	5de6      	ldrb	r6, [r4, r7]
 800631c:	f016 0608 	ands.w	r6, r6, #8
 8006320:	d1f8      	bne.n	8006314 <_strtol_l.constprop.0+0x20>
 8006322:	2c2d      	cmp	r4, #45	; 0x2d
 8006324:	d12f      	bne.n	8006386 <_strtol_l.constprop.0+0x92>
 8006326:	2601      	movs	r6, #1
 8006328:	782c      	ldrb	r4, [r5, #0]
 800632a:	1c85      	adds	r5, r0, #2
 800632c:	2b00      	cmp	r3, #0
 800632e:	d057      	beq.n	80063e0 <_strtol_l.constprop.0+0xec>
 8006330:	2b10      	cmp	r3, #16
 8006332:	d109      	bne.n	8006348 <_strtol_l.constprop.0+0x54>
 8006334:	2c30      	cmp	r4, #48	; 0x30
 8006336:	d107      	bne.n	8006348 <_strtol_l.constprop.0+0x54>
 8006338:	7828      	ldrb	r0, [r5, #0]
 800633a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800633e:	2858      	cmp	r0, #88	; 0x58
 8006340:	d149      	bne.n	80063d6 <_strtol_l.constprop.0+0xe2>
 8006342:	2310      	movs	r3, #16
 8006344:	786c      	ldrb	r4, [r5, #1]
 8006346:	3502      	adds	r5, #2
 8006348:	2700      	movs	r7, #0
 800634a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800634e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006352:	fbbe f9f3 	udiv	r9, lr, r3
 8006356:	4638      	mov	r0, r7
 8006358:	fb03 ea19 	mls	sl, r3, r9, lr
 800635c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006360:	f1bc 0f09 	cmp.w	ip, #9
 8006364:	d814      	bhi.n	8006390 <_strtol_l.constprop.0+0x9c>
 8006366:	4664      	mov	r4, ip
 8006368:	42a3      	cmp	r3, r4
 800636a:	dd22      	ble.n	80063b2 <_strtol_l.constprop.0+0xbe>
 800636c:	2f00      	cmp	r7, #0
 800636e:	db1d      	blt.n	80063ac <_strtol_l.constprop.0+0xb8>
 8006370:	4581      	cmp	r9, r0
 8006372:	d31b      	bcc.n	80063ac <_strtol_l.constprop.0+0xb8>
 8006374:	d101      	bne.n	800637a <_strtol_l.constprop.0+0x86>
 8006376:	45a2      	cmp	sl, r4
 8006378:	db18      	blt.n	80063ac <_strtol_l.constprop.0+0xb8>
 800637a:	2701      	movs	r7, #1
 800637c:	fb00 4003 	mla	r0, r0, r3, r4
 8006380:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006384:	e7ea      	b.n	800635c <_strtol_l.constprop.0+0x68>
 8006386:	2c2b      	cmp	r4, #43	; 0x2b
 8006388:	bf04      	itt	eq
 800638a:	782c      	ldrbeq	r4, [r5, #0]
 800638c:	1c85      	addeq	r5, r0, #2
 800638e:	e7cd      	b.n	800632c <_strtol_l.constprop.0+0x38>
 8006390:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006394:	f1bc 0f19 	cmp.w	ip, #25
 8006398:	d801      	bhi.n	800639e <_strtol_l.constprop.0+0xaa>
 800639a:	3c37      	subs	r4, #55	; 0x37
 800639c:	e7e4      	b.n	8006368 <_strtol_l.constprop.0+0x74>
 800639e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80063a2:	f1bc 0f19 	cmp.w	ip, #25
 80063a6:	d804      	bhi.n	80063b2 <_strtol_l.constprop.0+0xbe>
 80063a8:	3c57      	subs	r4, #87	; 0x57
 80063aa:	e7dd      	b.n	8006368 <_strtol_l.constprop.0+0x74>
 80063ac:	f04f 37ff 	mov.w	r7, #4294967295
 80063b0:	e7e6      	b.n	8006380 <_strtol_l.constprop.0+0x8c>
 80063b2:	2f00      	cmp	r7, #0
 80063b4:	da07      	bge.n	80063c6 <_strtol_l.constprop.0+0xd2>
 80063b6:	2322      	movs	r3, #34	; 0x22
 80063b8:	4670      	mov	r0, lr
 80063ba:	f8c8 3000 	str.w	r3, [r8]
 80063be:	2a00      	cmp	r2, #0
 80063c0:	d0a4      	beq.n	800630c <_strtol_l.constprop.0+0x18>
 80063c2:	1e69      	subs	r1, r5, #1
 80063c4:	e005      	b.n	80063d2 <_strtol_l.constprop.0+0xde>
 80063c6:	b106      	cbz	r6, 80063ca <_strtol_l.constprop.0+0xd6>
 80063c8:	4240      	negs	r0, r0
 80063ca:	2a00      	cmp	r2, #0
 80063cc:	d09e      	beq.n	800630c <_strtol_l.constprop.0+0x18>
 80063ce:	2f00      	cmp	r7, #0
 80063d0:	d1f7      	bne.n	80063c2 <_strtol_l.constprop.0+0xce>
 80063d2:	6011      	str	r1, [r2, #0]
 80063d4:	e79a      	b.n	800630c <_strtol_l.constprop.0+0x18>
 80063d6:	2430      	movs	r4, #48	; 0x30
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1b5      	bne.n	8006348 <_strtol_l.constprop.0+0x54>
 80063dc:	2308      	movs	r3, #8
 80063de:	e7b3      	b.n	8006348 <_strtol_l.constprop.0+0x54>
 80063e0:	2c30      	cmp	r4, #48	; 0x30
 80063e2:	d0a9      	beq.n	8006338 <_strtol_l.constprop.0+0x44>
 80063e4:	230a      	movs	r3, #10
 80063e6:	e7af      	b.n	8006348 <_strtol_l.constprop.0+0x54>
 80063e8:	080064b3 	.word	0x080064b3

080063ec <strtol>:
 80063ec:	4613      	mov	r3, r2
 80063ee:	460a      	mov	r2, r1
 80063f0:	4601      	mov	r1, r0
 80063f2:	4802      	ldr	r0, [pc, #8]	; (80063fc <strtol+0x10>)
 80063f4:	6800      	ldr	r0, [r0, #0]
 80063f6:	f7ff bf7d 	b.w	80062f4 <_strtol_l.constprop.0>
 80063fa:	bf00      	nop
 80063fc:	20000020 	.word	0x20000020

08006400 <_init>:
 8006400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006402:	bf00      	nop
 8006404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006406:	bc08      	pop	{r3}
 8006408:	469e      	mov	lr, r3
 800640a:	4770      	bx	lr

0800640c <_fini>:
 800640c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800640e:	bf00      	nop
 8006410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006412:	bc08      	pop	{r3}
 8006414:	469e      	mov	lr, r3
 8006416:	4770      	bx	lr
